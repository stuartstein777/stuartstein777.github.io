{"version":3,"sources":["exfn/utilities/logic.cljs"],"mappings":";AAGA,kCAAA,lCAAMA,4EAAYC;AAAlB,AACE,oBAAMA;AAAN,AACE,IAAMC,QAAY,wDAAA,xDAACC,mDAAUF;IACvBG,QAAY,wDAAA,xDAACD,mDAAUF;IACvBI,QAAY,wDAAA,xDAACF,mDAAUF;IACvBK,SAAY,wDAAA,xDAACH,mDAAUF;IACvBM,aAAY,wDAAA,xDAACJ,mDAAUF;IACvBO,SAAY,wDAAA,xDAACL,mDAAUF;IACvBQ,cAAY,wDAAA,xDAACN,mDAAUF;IACvBS,aAAY,sGAAKR,tBAAMS,9DAAY,8DAAA,9DAACC,gDAAQC,lEAAKC;IACjDC,aAAY,sGAAKX,tBAAMO,9DAAY,8DAAA,9DAACC,gDAAQC,lEAAKC;AARvD,AAAA,+CAAA,iEAAA,yDAAA,uDAAA,uDAAA,0DAAA,2EAAA,wDAAA,oEAAA,iEAAA,kMASoB,AAACE,gBAAMZ,tCACP,AAACY,gBAAMf,tFACP,AAACe,gBAAMd,OACP,AAACc,gBAAMX,/DACP,AAACW,gBAAMV,wJACP,AAACU,gBAAMT,lHACP,AAACS,gBAAMR,qDACP,AAACQ,gBAAMP,yCACPC,/MACAK;;AAnBtB;;;AAqBF,gDAAA,wDAAAE,xGAAMI,iHAAwCG;AAA9C,AAAA,IAAAN,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;QAAA,AAAAE,4CAAAF,eAAA,/DAAwCI;QAAxC,AAAAF,4CAAAF,eAAA,/DAA0CK;AAA1C,AACE,GAAI,6CAAA,7CAACE,mGAASF;AAAd,kDAAA,uIAAA,gDAAA,xIACM,6CAAKD,GAAE,AAACI,0BAAeF;;AAD7B,kDAAA,uIAAA,gDAAA,xIAGM,6CAAKF,GAAE,AAACK,0BAAeH;;;AAG/B,2CAAA,3CAAMI,8FAAqBN,EAAEO;AAA7B,AACE,cAAA,2CAAA,+CAAA,GAAA,vGAAMC,uJAAkB,sCAAA,sDAAA,1EAAID;AAA5B,AACE,OAAA,6EAAI,AAACE,+CAAOV,8CAAyBS,QAAQR;;AAGjD,qCAAA,rCAAMU,kFAAeV;AAArB,AACE,IAAMpB,QAAM,qDAAA,rDAACC,mDAAUmB;AAAvB,AACE,sDAAA,WAAAW,iBAAAC,3EAACH;AAAD,AAAS,oDAAAE,kBAAQ,0BAAAC,1BAACC;GAAlB,GAAyCjC;;AAE7C,mCAAA,nCAAMkC,8EAAad;AAAnB,AACE,OAACe,kDACA,AAACC,4CAAI,WAAKf;AAAL,AAAQ,GAAM,EAAA,CAAA,gCAAA,sBAAA,9CAAO,aAAA,YAAA,aAAA,tCAAaA,yBAAAA;AAAU,OAACI,0BAAeJ;;AAApD,GACK,EAAA,CAAA,gCAAA,sBAAA,9CAAO,aAAA,YAAA,aAAA,tCAAaA,yBAAAA;AAAU,OAACG,0BAAeH;;AADnD,AAEWA;;;;GAAID;;AAG/B","names":["exfn.utilities.logic/text-stats","text","words","clojure.string.split","chars","lines","vowels","consonants","digits","punctuation","word-freqs","cljs.core/frequencies","cljs.core.sort_by","cljs.core/val","cljs.core/reverse","char-freqs","cljs.core/count","p__16028","map__16029","cljs.core/--destructure-map","cljs.core.get","exfn.utilities.logic/alternating-case-reducer","s","c","st","cljs.core._EQ_","clojure.string/upper-case","clojure.string/lower-case","exfn.utilities.logic/to-alternating-case","start-upper?","initial","cljs.core.reduce","exfn.utilities.logic/to-camel-case","p1__16030#","p2__16031#","clojure.string/capitalize","exfn.utilities.logic/invert-case","clojure.string.join","cljs.core.map"],"sourcesContent":["(ns exfn.utilities.logic\n  (:require [clojure.string :as str]))\n\n(defn text-stats [text]\n  (when text\n    (let [words       (str/split text #\"\\s+\")\n          chars       (str/split text #\"\\s*\")\n          lines       (str/split text #\"\\n\")\n          vowels      (str/split text #\"[aeiou]\")\n          consonants  (str/split text #\"[^aeiou]\")\n          digits      (str/split text #\"\\d\")\n          punctuation (str/split text #\"[^\\w\\s]\")\n          word-freqs  (->> words frequencies (sort-by val) reverse)\n          char-freqs  (->> chars frequencies (sort-by val) reverse)]\n      {:chars           (count chars)\n       :chars-no-spaces (count text)\n       :words           (count words)\n       :lines           (count lines)\n       :vowels          (count vowels)\n       :consonants      (count consonants)\n       :digits          (count digits)\n       :punctuation     (count punctuation)\n       :word-freqs      word-freqs\n       :char-freqs      char-freqs})))\n\n(defn alternating-case-reducer [{:keys [s c]} st]\n  (if (= :upper c)\n    {:s (str s (str/upper-case st))\n     :c :lower}\n    {:s (str s (str/lower-case st))\n     :c :upper}))\n\n(defn to-alternating-case [s start-upper?]\n  (let [initial {:s \"\" :c (if start-upper? :upper :lower)}]\n    (-> (reduce alternating-case-reducer initial s)\n        :s)))\n\n(defn to-camel-case [s]\n  (let [words (str/split s #\"[\\s|\\-|\\_]+\")]\n    (reduce #(str %1 (str/capitalize %2)) \"\" words)))\n\n(defn invert-case [s]\n  (str/join\n   (map (fn [c] (cond (<= 65 (.charCodeAt c 0) 90)  (str/lower-case c)\n                     (<= 97 (.charCodeAt c 0) 122) (str/upper-case c)\n                     :else c)) s)))\n\n\n(comment\n  \n  )"]}