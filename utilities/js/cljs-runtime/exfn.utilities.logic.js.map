{"version":3,"sources":["exfn/utilities/logic.cljs"],"mappings":"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","names":["exfn.utilities.logic/text-stats","text","words","clojure.string.split","chars","lines","vowels","consonants","digits","punctuation","word-freqs","cljs.core/frequencies","cljs.core.sort_by","cljs.core/val","cljs.core/reverse","char-freqs","cljs.core/count","p__15638","map__15639","cljs.core/--destructure-map","cljs.core.get","exfn.utilities.logic/alternating-case-reducer","s","c","st","cljs.core._EQ_","clojure.string/upper-case","clojure.string/lower-case","exfn.utilities.logic/to-alternating-case","start-upper?","initial","cljs.core.reduce","exfn.utilities.logic/words-to-camel-case","p1__15640#","p2__15641#","clojure.string/capitalize","exfn.utilities.logic/to-camel-case","clojure.string/split-lines","cljs.core.map","line","clojure.string.join","exfn.utilities.logic/invert-case","exfn.utilities.logic/to-lower-case","exfn.utilities.logic/to-upper-case","exfn.utilities.logic/words-to-snake-case","p1__15642#","p2__15643#","exfn.utilities.logic/word-to-snake-case","exfn.utilities.logic/to-snake-case","exfn.utilities.logic/csv-breakdown","csv","comma-counts","p1__15644#","cljs.core.filter","grid-lines","p1__15645#","cljs.core.mapv","l","cljs.core.concat","exfn.utilities.logic/to-kebab-case","exfn.utilities.logic/lines-to-kebab-case","exfn.utilities.logic/alphabetise","cljs.core.sort"],"sourcesContent":["(ns exfn.utilities.logic\n  (:require [clojure.string :as str]))\n\n(defn text-stats [text]\n  (when text\n    (let [words       (str/split text #\"\\s+\")\n          chars       (str/split text #\"\\s*\")\n          lines       (str/split text #\"\\n\")\n          vowels      (str/split text #\"[aeiou]\")\n          consonants  (str/split text #\"[^aeiou]\")\n          digits      (str/split text #\"\\d\")\n          punctuation (str/split text #\"[^\\w\\s]\")\n          word-freqs  (->> words frequencies (sort-by val) reverse)\n          char-freqs  (->> chars frequencies (sort-by val) reverse)]\n      {:chars           (count chars)\n       :chars-no-spaces (count text)\n       :words           (count words)\n       :lines           (count lines)\n       :vowels          (count vowels)\n       :consonants      (count consonants)\n       :digits          (count digits)\n       :punctuation     (count punctuation)\n       :word-freqs      word-freqs\n       :char-freqs      char-freqs})))\n\n(defn alternating-case-reducer [{:keys [s c]} st]\n  (if (= :upper c)\n    {:s (str s (str/upper-case st))\n     :c :lower}\n    {:s (str s (str/lower-case st))\n     :c :upper}))\n\n(defn to-alternating-case [s start-upper?]\n  (let [initial {:s \"\" :c (if start-upper? :upper :lower)}]\n    (-> (reduce alternating-case-reducer initial s)\n        :s)))\n\n(defn words-to-camel-case [s]\n  (let [words (str/split s #\"[\\s|\\-|\\_]+\")]\n    (reduce #(str %1 (str/capitalize %2)) \"\" words)))\n\n(defn to-camel-case [s]\n  (let [lines (str/split-lines s)]\n    (->> \n     lines\n     (map (fn [line] (words-to-camel-case line)))\n     (str/join \"\\n\"))))\n\n(defn invert-case [s]\n  (str/join\n   (map (fn [c] (cond (<= 65 (.charCodeAt c 0) 90)  (str/lower-case c)\n                     (<= 97 (.charCodeAt c 0) 122) (str/upper-case c)\n                     :else c)) s)))\n\n(defn to-lower-case [s]\n  (str/lower-case s))\n\n(defn to-upper-case [s]\n  (str/upper-case s))\n\n(defn words-to-snake-case [s]\n  (let [words (str/split s #\"[\\s|\\-|\\_|A-Z]+\")]\n    (reduce #(str %1 \"_\" %2) \"\" words)))\n\n(defn word-to-snake-case [s]\n  (->>\n   (clojure.string/split s #\"(?<=.)(?=[A-Z])|\\s|-\")\n   (map str/lower-case)\n   (str/join \"_\")))\n\n(defn to-snake-case [s]\n  (->> (str/split-lines s)\n       (map word-to-snake-case)\n       (str/join \"\\n\")))\n\n(defn csv-breakdown [csv]\n  (let [lines        (str/split-lines csv)\n        comma-counts (map (fn [line] (->> line\n                                          (filter #(= % \\,))\n                                          count)) lines)\n        grid-lines   (map #(str/split % #\",\") lines)]\n    (mapv (fn [c l] (concat [c] l)) comma-counts grid-lines)))\n\n(defn to-kebab-case [s]\n  (->>\n   (clojure.string/split s #\"(?<=.)(?=[A-Z])|\\s|_\")\n   (map str/lower-case)\n   (str/join \"-\")))\n\n(defn lines-to-kebab-case [s]\n  (->> (str/split-lines s)\n       (map to-kebab-case)\n       (str/join \"\\n\")))\n\n(defn alphabetise [s]\n  (->> (str/split-lines s)\n       (sort)\n       (str/join \"\\n\")))\n\n(comment\n\n\n  \n\n  \n  )"]}