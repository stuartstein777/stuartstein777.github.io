{"version":3,"sources":["exfn/utilities/logic.cljs"],"mappings":";AAIA,qCAAA,rCAAMA,kFAAeC;AAArB,AAAA,kDAAA,mWAAA,8WAAA,0WAAA,wUAAA,70CACsB,AAACC,sCAAwB,AAAA,oFAAA,AAAA,+EAAA,AAAA,6FAAID,sFAC7B,AAAA,6GAAA,AAAA,+EAAA,AAAA,6FAAIA,mFACJ,AAAA,2GAAA,AAAA,+EAAA,AAAA,6FAAIA,kEACJ,AAAA,0FAAA,AAAA,+EAAA,AAAA,6FAAIA,sEACJ,AAAA,8FAAA,AAAA,+EAAA,AAAA,6FAAIA;;AAE1B,0CAAA,1CAAME,4FAAoBC,EAAEC;AAA5B,AACE,oDAAA,7CAACC,gFAEU,AAACC,+CAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAC,4CAAAF,WAAA,IAAA;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAOE;QAAP,AAAAD,4CAAAD,WAAA,IAAA,/DAASG;YAAT,AAAAF,4CAAAF,WAAA,IAAA,nEAAYI;AAAZ,AACE,OAACC,6CAAEF,EAAEP;GAFfD;;AAIb,6BAAA,7BAAMW,kEAAOC,EAAEC;AAAf,AACE,AAACC,qGAAIF,EAAEC;;AACPA;;AAEF,iCAAA,jCAAME,0EAAWC,KAAKf,MAAMgB,QAAQC;AAApC,AACE,qGAAA,kBAAA,vHAACJ,iHAAgBb;;kRACZ,AAACF,wCAAmBiB,KAAKf,5DACzB,AAACkB,5CACD,2BAAA,3BAACR,9GACD,AAACS,4CAAI,AAACC,6CAAKH,YAAYD,vIACvB,2BAAA,3BAACN,vEACD,OAACW,+CAAOC;;AAEf,uCAAA,vCAAMC,sFAAiBR,KAAKf,MAAMgB,QAAQC;AAA1C,AACE,GAAI,qDAAA,rDAACR,6CAAEO;AACL,QAAG,0CAAA,1CAACF,+BAAUC,KAAKf,yEAAmBiB,eACnC,0CAAA,1CAACH,+BAAUC,KAAKf,yDAAWiB;;AAC9B,OAACH,+BAAUC,KAAKf,MAAMgB,QAAQC;;;AAElC,2CAAA,3CAAMO,8FAAeC,IAAIzB,MAAM0B;AAA/B,AACE,QAAID,OAAI,AAACE,eAAK,AAACC,mCAAyBF,KAAK1B;;AAE/C,gCAAA,hCAAM6B,wEAAU9B,EAAE0B;AAAlB,AACE,oDAAA,7CAACxB,gFAEW,AAACC,+CAAO,WAAA4B;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAA1B,4CAAAyB,WAAA,IAAA;QAAA,AAAAzB,4CAAA0B,WAAA,IAAA,/DAAOxB;QAAP,AAAAF,4CAAA0B,WAAA,IAAA,/DAASpB;YAAT,AAAAN,4CAAAyB,WAAA,IAAA,nEAAYvB;AAAZ,AACE,OAACC,6CAAEG,EAAEa;GAFf1B","names":["exfn.utilities.logic/build-reading","db","exfn.dividends.logic/get-request-date","exfn.utilities.logic/get-days-for-month","u","month","cljs.core.into","cljs.core.filter","p__20145","vec__20146","vec__20149","cljs.core.nth","m","_","cljs.core._EQ_","exfn.utilities.logic/debug","n","d","cljs.core.prn","exfn.utilities.logic/get-total","data","utility","cost-or-kwh","cljs.core/vals","cljs.core.map","cljs.core.comp","cljs.core.reduce","cljs.core/+","exfn.utilities.logic/total-for-month","exfn.utilities.logic/day-in-month?","day","year","cljs.core/last","exfn.month.logic/get-days-of-month","exfn.utilities.logic/get-days","p__20152","vec__20153","vec__20156"],"sourcesContent":["(ns exfn.utilities.logic\n  (:require [exfn.dividends.logic :as dlogic]\n            [exfn.month.logic :as mlogic]))\n\n(defn build-reading [db]\n  {:date              (dlogic/get-request-date (-> db :utilities :ui :date))\n   :electricity-usage (-> db :utilities :ui :electricity-usage)\n   :electricity-cost  (-> db :utilities :ui :electricity-cost)\n   :gas-cost          (-> db :utilities :ui :gas-cost)\n   :gas-usage         (-> db :utilities :ui :gas-usage)})\n\n(defn get-days-for-month [u month]\n  (into {}\n        (->> u\n             (filter (fn [[[m _] _]]\n                       (= m month))))))\n\n(defn debug [n d]\n  (prn n d)\n  d)\n\n(defn get-total [data month utility cost-or-kwh]\n  (prn \"******** \" month \" *******\")\n  (->> (get-days-for-month data month)\n       (vals)\n       (debug \"days for month\")\n       (map (comp cost-or-kwh utility))\n       (debug \"cost\")\n       (reduce +)))\n\n(defn total-for-month [data month utility cost-or-kwh]\n  (if (= utility :both)\n    (+ (get-total data month :electricity cost-or-kwh)\n       (get-total data month :gas cost-or-kwh))\n    (get-total data month utility cost-or-kwh)))\n\n(defn day-in-month? [day month year]\n  (<= day (last (mlogic/get-days-of-month year month))))\n\n(defn get-days [u day]\n  (into {}\n         (->> u\n              (filter (fn [[[_ d] _]]\n                        (= d day))))))\n\n"]}