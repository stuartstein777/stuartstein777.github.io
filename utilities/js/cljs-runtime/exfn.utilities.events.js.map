{"version":3,"sources":["exfn/utilities/events.cljs"],"mappings":"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","names":["exfn.utilities.events/map-dates","utilities","cljs.core.apply","cljs.core/merge","cljs.core.map","u","vec__17220","cljs.core.nth","day","month","_","cljs.core/parse-long","clojure.string.split","re_frame.core.reg_event_db","p__17223","vec__17224","db","cljs.core.assoc","cljs.core/assoc-in","exfn.utilities.events/api","year","exfn.shared.logic/base-and-port","ajax.core/json-request-format","ajax.core/json-response-format","p__17228","vec__17229","date","p__17239","vec__17240","selector","p__17243","vec__17244","selected","p__17249","vec__17251","cost","p__17267","vec__17268","usage","p__17271","vec__17272","p__17275","vec__17276","re_frame.core.reg_event_fx","p__17279","map__17280","cljs.core/--destructure-map","cljs.core.get","p__17285","map__17286","exfn.utilities.logic/build-reading"],"sourcesContent":["(ns exfn.utilities.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [exfn.shared.logic :as lgc]\n            [exfn.utilities.logic :as ulgc]\n            [clojure.string :as str]))\n\n(defn map-dates [utilities]\n  (apply merge\n         (map (fn [u]\n                (let [[day month _] (map parse-long (str/split (u :date) #\"\\-\"))]\n                  {[month day] {:electricity {:cost  (u :electricity-cost)\n                                              :usage (u :electricity-usage)}\n                                :gas         {:cost  (u :gas-cost)\n                                              :usage (u :gas-usage)}}})) utilities)))\n\n(rf/reg-event-db\n :process-utilities\n (fn [db [_ utilities]]\n   (-> db\n       (assoc :erorr nil)\n       (assoc-in [:utilities :grid] (map-dates utilities))\n       (assoc-in [:utilities :ui :electricity-cost] \"\")\n       (assoc-in [:utilities :ui :electricity-usage] \"\")\n       (assoc-in [:utilities :ui :gas-cost] \"\")\n       (assoc-in [:utilities :ui :gas-usage] \"\")\n       (assoc :loading? false))))\n\n(defn api [year]\n  {:method          :get\n   :uri             (str lgc/base-and-port \"/utilities/\" year)\n   :format          (ajax/json-request-format)\n   :response-format (ajax/json-response-format {:keywords? true})\n   :on-success      [:process-utilities]\n   :on-failure      [:fail]})\n\n(rf/reg-event-db\n :utilities/set-date\n (fn [db [_ date]]\n   (assoc-in db [:utilities :ui :date] date)))\n\n(rf/reg-event-db\n :utilities/set-gas-electricity-selector\n (fn [db [_ selector]]\n   (assoc-in db [:utilities :ui :selected-energy] selector)))\n\n(rf/reg-event-db\n :utilities/set-cost-or-kwh\n (fn [db [_ selected]]\n   (assoc-in db [:utilities :ui :cost-kwh-selector] selected)))\n\n(rf/reg-event-db\n :utilities/set-electricity-cost\n (fn [db [_ cost]]\n   (assoc-in db [:utilities :ui :electricity-cost] cost)))\n\n(rf/reg-event-db\n :utilities/set-electricity-usage\n (fn [db [_ usage]]\n   (assoc-in db [:utilities :ui :electricity-usage] usage)))\n\n(rf/reg-event-db\n :utilities/set-gas-usage\n (fn [db [_ usage]]\n   (assoc-in db [:utilities :ui :gas-usage] usage)))\n\n(rf/reg-event-db\n :utilities/set-gas-cost\n (fn [db [_ cost]]\n   (assoc-in db [:utilities :ui :gas-cost] cost)))\n\n(rf/reg-event-fx\n :utilities/reload\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio (api (-> db :settings :year))}))\n\n(rf/reg-event-fx\n :utilities/save-reading\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio {:method          :post\n                 :uri             (str lgc/base-and-port \"/Utilities\")\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format)\n                 :params          (ulgc/build-reading db)\n                 :on-success      [:utilities/reload]\n                 :on-failure      [:fail]}}))\n\n"]}