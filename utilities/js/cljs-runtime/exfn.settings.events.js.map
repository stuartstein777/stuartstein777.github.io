{"version":3,"sources":["exfn/settings/events.cljs"],"mappings":";AAKA,oCAAA,2CAAA,uDAAA,mDAAA,0GAAA,0FAAA,iOAAA,iEAAA,mFAAA,oFAAA,gEAAA,mFAAA,z9BAAKA,4OAEe,iCAAA,hCAAKC,gHACL,AAACC,2GACD,+BAAA,2CAAA,8DAAA,xIAACC;AAIrB,yDAAA,zDAACC,qIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;eAAT,AAAAF,4CAAAD,WAAA,IAAA,tEAAWI;AAAX,iJACMF,9CACA,iDAAA,2DAAA,5GAACG,9CACD,iKAAA,uDAAA,xNAACA,rDACD,mRAAA,5QAACA,yUAAgBD;;AAExB,yDAAA,zDAACE,gIAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaP;IAAbU,aAAAJ;QAAA,AAAAP,4CAAAW,WAAA,IAAA,/DAAmBT;eAAnB,AAAAF,4CAAAW,WAAA,IAAA,tEAAqBR;AAArB,AAAA,kDAAA,mDAAA,iEAAA,2CAAA,uDAAA,mDAAA,0GAAA,0FAAA,iEAAA,4GAAA,iEAAA,mFAAA,6FAAA,gEAAA,mFAAA,98BACOF,4QAE0B,iCAAA,hCAAKP,gHACL,AAACC,wFACDQ,oFACA,AAACP,iQACiBO;;AAGpD,yDAAA,zDAACN,qIAEA,cAAAe,HAAKX;AAAL,AAAA,IAAAY,aAAAD;QAAA,AAAAZ,4CAAAa,WAAA,IAAA,/DAASX;IAATY,aAAA,AAAAd,4CAAAa,WAAA,IAAA;IAAAC,iBAAA,AAAAL,4BAAAK;WAAA,AAAAJ,4CAAAI,eAAA,lEAAmBC;oBAAnB,AAAAL,4CAAAI,eAAA,3EAAwBE;AAAxB,uLACMf,9CACA,iDAAA,6DAAA,9GAACG,nBACD,wIAAA,mFAAA,6DAAA,xRAACa,oVAA2BF,vWAC5B,6WAAA,mFAAA,mEAAA,sFAAA,zlBAACE,9CACD,2oBAAA,3oBAACb,ktBAAqBY,vwBACtB,sxBAAA,uDAAA,t0BAACZ;;AAER,yDAAA,zDAACC,8HAEA,WAAAa,SAAkBhB;AAAlB,AAAA,IAAAiB,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;SAAA,AAAAT,4CAAAS,eAAA,hEAAalB;AAAb,AAAA,kDAAA,mDAAA,HACOA,oEACQR;;AAEhB,yDAAA,zDAACY,uIAEA,WAAAe,SAAkBlB;AAAlB,AAAA,IAAAmB,aAAAD;IAAAC,iBAAA,AAAAZ,4BAAAY;SAAA,AAAAX,4CAAAW,eAAA,hEAAapB;AAAb,AAAA,kDAAA,mDAAA,iEAAA,2CAAA,uDAAA,oDAAA,8GAAA,0FAAA,wDAAA,2CAAA,8RAAA,4GAAA,iEAAA,mFAAA,6EAAA,gEAAA,mFAAA,nwCACOA,6QAE0B,iCAAA,hCAAKP,oHACL,AAACC,uMACc,AAAA,4GAAA,AAAA,iGAAIM,wFACnB,AAACL;;AAInC,yDAAA,zDAACS,6IAEA,WAAAiB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAf,4BAAAe;SAAA,AAAAd,4CAAAc,eAAA,hEAAavB;IAAbwB,aAAAF;QAAA,AAAAvB,4CAAAyB,WAAA,IAAA,/DAAmBvB;mBAAnB,AAAAF,4CAAAyB,WAAA,IAAA,1EAAqBC;AAArB,AAAA,kDAAA,mDAAA,iEAAA,2CAAA,uDAAA,0DAAA,8GAAA,0FAAA,qEAAA,4GAAA,iEAAA,mFAAA,6EAAA,gEAAA,mFAAA,78BACOzB,mRAE0B,iCAAA,hCAAKP,oHACL,AAACC,wFACD+B,wFACA,AAAC9B;;AAInC,yDAAA,zDAACC,uJAEA,cAAA8B,HAAK1B;AAAL,AAAA,IAAA2B,aAAAD;QAAA,AAAA3B,4CAAA4B,WAAA,IAAA,/DAAS1B;mBAAT,AAAAF,4CAAA4B,WAAA,IAAA,1EAAWF;AAAX,AACE,6BAAA,mFAAA,mEAAA,5KAACT,mBAAShB,+OAAoCyB","names":["exfn.settings.events/settings-api","exfn.shared.logic/base-and-port","ajax.core/json-request-format","ajax.core/json-response-format","re_frame.core.reg_event_db","p__17040","vec__17041","cljs.core.nth","db","_","settings","cljs.core.assoc","re_frame.core.reg_event_fx","p__17052","p__17053","map__17055","cljs.core/--destructure-map","cljs.core.get","vec__17056","p__17070","vec__17072","map__17075","year","account-types","cljs.core/assoc-in","p__17082","map__17089","p__17102","map__17103","p__17110","p__17111","map__17112","vec__17113","account-type","p__17124","vec__17126"],"sourcesContent":["(ns exfn.settings.events\n  (:require [ajax.core :as ajax]\n            [exfn.shared.logic :as slgc]\n            [re-frame.core :as rf]))\n\n(def settings-api\n  {:method          :get\n   :uri             (str slgc/base-and-port \"/Settings\")\n   :format          (ajax/json-request-format)\n   :response-format (ajax/json-response-format {:keywords? true})\n   :on-success      [:process-settings]\n   :on-failure      [:fail]})\n\n(rf/reg-event-db\n :update-settings\n (fn [db [_ settings]]\n   (-> db\n       (assoc :loading false)\n       (assoc :error nil)\n       (assoc :settings settings))))\n\n(rf/reg-event-fx\n :save-settings\n (fn [{:keys [db]} [_ settings]]\n   {:db db\n    :http-xhrio {:method          :put\n                 :uri             (str slgc/base-and-port \"/Settings\")\n                 :format          (ajax/json-request-format)\n                 :params          settings\n                 :response-format (ajax/json-response-format)\n                 :on-success      [:update-settings settings]\n                 :on-failure      [:fail]}}))\n\n(rf/reg-event-db\n :process-settings\n (fn [db [_ {:keys [year account-types]}]]\n   (-> db\n       (assoc :loading? false)\n       (assoc-in [:settings :year] year)\n       (assoc-in [:ui-settings :new-account-type] \"\")\n       (assoc :account-types account-types)\n       (assoc :error nil))))\n\n(rf/reg-event-fx\n :get-settings\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio settings-api}))\n\n(rf/reg-event-fx\n :add-account-type\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio {:method          :post\n                 :uri             (str slgc/base-and-port \"/AccountTypes\")\n                 :format          (ajax/json-request-format)\n                 :params          {:account-type (-> db :ui-settings :new-account-type)}\n                 :response-format (ajax/json-response-format)\n                 :on-success      [:get-settings]\n                 :on-failure      [:fail]}}))\n\n(rf/reg-event-fx\n :delete-account-type\n (fn [{:keys [db]} [_ account-type]]\n   {:db db\n    :http-xhrio {:method          :delete\n                 :uri             (str slgc/base-and-port \"/AccountTypes\")\n                 :format          (ajax/json-request-format)\n                 :params          account-type\n                 :response-format (ajax/json-response-format)\n                 :on-success      [:get-settings]\n                 :on-failure      [:fail]}}))\n\n(rf/reg-event-db\n :update-account-type-input\n (fn [db [_ account-type]]\n   (assoc-in db [:ui-settings :new-account-type] account-type)))\n"]}