{"version":3,"sources":["exfn/month/logic.cljs"],"mappings":"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","names":["exfn.month.logic/custom-formatter","cljs_time.format.formatter","exfn.month.logic/month-no->string","month","pred__19896","expr__19897","js/Error","cljs.core/=","exfn.month.logic/format-date-for-request","year","day","exfn.month.logic/format-date","date","or__5045__auto__","cljs.core/re-matches","cljs-time.format/unparse","cljs_time.format.parse","cljs.core.subs","exfn.month.logic/calculate-totals","transactions","field","p1__19899#","cljs.core.remove","cljs.core.map","cljs.core.reduce","cljs.core/+","exfn.month.logic/is-leap-year","cljs.core/mod","cljs.core.not_EQ_","exfn.month.logic/get-days-of-month","pred__19900","expr__19901","cljs.core.range"],"sourcesContent":["(ns exfn.month.logic\n  (:require [cljs-time.core :refer [date-time]]\n            [clojure.string :as str]\n            [cljs-time.format :refer [unparse formatter parse parse-local]]))\n\n(def custom-formatter (formatter \"dd-MM-yyyy\"))\n\n(defn month-no->string [month]\n  (condp = month\n    1 \"January\"\n    2 \"February\"\n    3 \"March\"\n    4 \"April\"\n    5 \"May\"\n    6 \"June\"\n    7 \"July\"\n    8 \"August\"\n    9 \"September\"\n    10 \"October\"\n    11 \"November\"\n    12 \"December\"))\n\n(defn format-date-for-request [year month day]\n  (str (if (< day 10)\n         (str \"0\" day)\n         day)\n       \"-\"\n       (if (< month 10)\n         (str \"0\" month)\n         month)\n       \"-\"\n       year))\n\n(defn format-date [date]\n  (if (nil? date)\n    \"-\"\n    (if (or (re-matches #\"^\\d{4}-\\d{2}-\\d{2}$\" date)\n            (re-matches #\"^\\d{4}-\\d{2}-\\d{2}T00:00:00\" date))\n      (unparse  custom-formatter\n                (parse (formatter \"yyyy-MM-dd\") (subs date 0 10)))\n      date)))\n\n(defn calculate-totals [transactions field]\n  (->> transactions\n       (remove #(nil? (field %)))\n       (map field)\n       (reduce +)))\n\n(defn is-leap-year [year]\n  (or (zero? (mod year 400))\n      (and (not= 0 (mod year 100))\n           (zero? (mod year 4)))))\n\n(defn get-days-of-month [year month]\n  (condp = month\n    1 (range 1 32)\n    2 (if (is-leap-year year) (range 1 30) (range 1 29))\n    3 (range 1 32)\n    4 (range 1 31)\n    5 (range 1 32)\n    6 (range 1 31)\n    7 (range 1 32)\n    8 (range 1 32)\n    9 (range 1 31)\n    10 (range 1 32)\n    11 (range 1 31)\n    12 (range 1 32)))\n\n"]}