{"version":3,"sources":["exfn/accounts/events.cljs"],"mappings":";AAKA,yDAAA,zDAACA,oIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;WAAT,AAAAF,4CAAAD,WAAA,IAAA,lEAAWI;AAAX,mGACMF,9CACA,iDAAA,jDAACG,iIAAyB,yEAAA,+EAAA,vJAACD,qCAAAA,mGAAAA,/TAC3B,8YAAA,vYAACC,8cAAyB,yEAAA,yFAAA,jKAACD,qCAAAA,6GAAAA;;AAElC,oCAAA,2CAAA,uDAAA,mDAAA,8GAAA,0FAAA,iOAAA,iEAAA,mFAAA,mFAAA,gEAAA,mFAAA,59BAAKE,4OAEe,iCAAA,hCAAKC,oHACL,AAACC,2GACD,+BAAA,2CAAA,8DAAA,xIAACC;AAIrB,yDAAA,zDAACC,mJAEA,WAAAC,SAAkBR;AAAlB,AAAA,IAAAS,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaV;AAAb,AAAA,kDAAA,mDAAA,HACOA,oEACQ,CAACI,kEAAAA,oEAAAA;;AAEjB,yDAAA,zDAACI,kIAEA,WAAAK,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAJ,4BAAAI;SAAA,AAAAH,4CAAAG,eAAA,hEAAaf;IAAbgB,aAAAF;QAAA,AAAAf,4CAAAiB,WAAA,IAAA,/DAAmBf;cAAnB,AAAAF,4CAAAiB,WAAA,IAAA,rEAAqBC;AAArB,AAAA,kDAAA,mDAAA,iEAAA,2CAAA,uDAAA,mDAAA,0GAAA,0FAAA,iOAAA,gEAAA,iEAAA,mFAAA,kGAAA,gEAAA,mFAAA,vkCACOjB,4QAE0B,iCAAA,hCAAKK,gHACL,AAACC,2GACD,+BAAA,2CAAA,8DAAA,xIAACC,8MACDU;;AAIlC,yDAAA,zDAACT,4HAEA,WAAAU,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAT,4BAAAS;SAAA,AAAAR,4CAAAQ,eAAA,hEAAapB;IAAbqB,aAAAF;QAAA,AAAApB,4CAAAsB,WAAA,IAAA,/DAAmBpB;cAAnB,AAAAF,4CAAAsB,WAAA,IAAA,rEAAqBJ;AAArB,AAAA,kDAAA,mDAAA,iEAAA,2CAAA,uDAAA,oDAAA,0GAAA,0FAAA,iOAAA,gEAAA,iEAAA,mFAAA,kGAAA,gEAAA,mFAAA,xkCACOjB,6QAE0B,iCAAA,hCAAKK,gHACL,AAACC,2GACD,+BAAA,2CAAA,8DAAA,xIAACC,8MACDU","names":["re_frame.core.reg_event_db","p__17188","vec__17189","cljs.core.nth","db","_","data","cljs.core.assoc","exfn.accounts.events/accounts-api","exfn.shared.logic/base-and-port","ajax.core/json-request-format","ajax.core/json-response-format","re_frame.core.reg_event_fx","p__17192","map__17193","cljs.core/--destructure-map","cljs.core.get","p__17194","p__17195","map__17196","vec__17197","account","p__17200","p__17201","map__17202","vec__17203"],"sourcesContent":["(ns exfn.accounts.events\n  (:require [ajax.core :as ajax]\n            [exfn.shared.logic :as slgc]\n            [re-frame.core :as rf]))\n\n(rf/reg-event-db\n :process-accounts\n (fn [db [_ data]]\n   (-> db\n       (assoc :account-summaries (data :accounts))\n       (assoc :account-types     (data :account-types)))))\n\n(def accounts-api\n  {:method          :get\n   :uri             (str slgc/base-and-port \"/Accounts/all\")\n   :format          (ajax/json-request-format)\n   :response-format (ajax/json-response-format {:keywords? true})\n   :on-success      [:process-accounts]\n   :on-failure      [:fail]})\n\n(rf/reg-event-fx\n :process-account-update\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio (accounts-api)}))\n\n(rf/reg-event-fx\n :update-account\n (fn [{:keys [db]} [_ account]]\n   {:db db\n    :http-xhrio {:method          :put\n                 :uri             (str slgc/base-and-port \"/Accounts\")\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :params          account\n                 :on-success      [:process-account-update]\n                 :on-failure      [:fail]}}))\n \n(rf/reg-event-fx\n :add-account\n (fn [{:keys [db]} [_ account]]\n   {:db db\n    :http-xhrio {:method          :post\n                 :uri             (str slgc/base-and-port \"/Accounts\")\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :params          account\n                 :on-success      [:process-account-update]\n                 :on-failure      [:fail]}}))"]}