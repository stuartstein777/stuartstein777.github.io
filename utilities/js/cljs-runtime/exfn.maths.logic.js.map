{"version":3,"sources":["exfn/maths/logic.cljs"],"mappings":"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","names":["exfn.maths.logic/gcd","a","b","cljs.core/mod","exfn.maths.logic/greatest-common-divisor","xs","cljs.core.reduce","exfn.maths.logic/lcm","g","exfn.maths.logic/least-common-multiple","exfn.maths.logic/is-prime?","n","i","Math/sqrt","exfn.maths.logic/is-pentagonal?","cljs.core/rem","exfn.maths.logic/is-generalised-pentagonal?","js/Number","exfn.maths.logic/median","cljs.core/seq","sorted","cljs.core.sort","count","cljs.core/count","cljs.core/odd?","cljs.core.nth","exfn.maths.logic/get-range","cljs.core/last","cljs.core/first","exfn.maths.logic/average","sum","cljs.core/+","exfn.maths.logic/standard-deviation","cnt","\u03bc","squared-diffs","p1__16176#","cljs.core.map","Math/pow","variance","exfn.maths.logic/mode","counts","cljs.core/frequencies","max-count","cljs.core.apply","cljs.core/max","cljs.core/vals","modes","p1__16177#","cljs.core.filter","cljs.core._EQ_","cljs.core/val","cljs.core/keys","exfn.maths.logic/interquartile-range","q1","cljs.core.take","q3","cljs.core.drop","exfn.maths.logic/product","cljs.core/*","exfn.maths.logic/count_within_percentile","p","sorted-xs","total-count","percentile-index","Math/round","exfn.maths.logic/calculate-stats","exfn.maths.logic/add-matrices","matrix1","matrix2","cljs.core.mapv","exfn.maths.logic/subtract-matrices","cljs.core/-"],"sourcesContent":["(ns exfn.maths.logic)\n\n(defn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))\n\n(defn greatest-common-divisor [xs]\n  (reduce gcd xs))\n\n(defn lcm [a b]\n  (if (zero? a) 0\n      (let [g (gcd a b)]\n        (/ (* a b) g))))\n\n(defn least-common-multiple [xs]\n  (reduce lcm xs))\n\n(defn is-prime? [n]\n  (if (<= n 1)\n    false\n    (loop [i 2]\n      (if (>= i (Math/sqrt n))\n        true\n        (if (zero? (mod n i))\n          false\n          (recur (inc i)))))))\n\n(defn is-pentagonal? [n]\n  (-> n\n      (* 24)\n      inc\n      Math/sqrt\n      inc\n      (/ 6)\n      (rem 1)\n      zero?))\n\n(defn is-generalised-pentagonal? [n]\n  (if (or (nil? n) (zero? (js/Number n)))\n    false\n    (-> n (* 24) inc Math/sqrt inc (/ 6) (rem 1) zero?)))\n\n(defn median [xs]\n  (when (seq xs)\n    (let [sorted (sort xs)\n          count (count sorted)]\n      (if (odd? count)\n        (nth sorted (int (/ count 2)))\n        (/ (+ (nth sorted (int (/ count 2)))\n              (nth sorted (dec (int (/ count 2)))))\n           2)))))\n\n(defn get-range [xs]\n  (let [sorted (sort xs)]\n    (dec (- (inc (last sorted)) (first sorted)))))  \n\n(defn average [xs]\n  (when (seq xs)\n    (let [sum (reduce + xs)\n          count (count xs)]\n      (/ sum count))))\n\n(defn standard-deviation [xs]\n  (when (seq xs)\n    (let [cnt           (count xs)\n          \u03bc             (/ (reduce + xs) cnt)\n          squared-diffs (map #(Math/pow (- % \u03bc) 2) xs)\n          variance      (/ (reduce + squared-diffs) cnt)]\n      (Math/sqrt variance))))\n\n(defn mode [xs]\n  (when (seq xs)\n    (let [counts (frequencies xs)\n          max-count (apply max (vals counts))\n          modes (filter #(= (val %) max-count) counts)]\n      (keys modes))))\n\n(defn interquartile-range [xs]\n  (when (> (count xs) 2)\n    (let [sorted (sort xs)\n          count (count sorted)\n          q1 (median (take (/ count 2) sorted))\n          q3 (median (drop (/ count 2) sorted))]\n      (- q3 q1))))\n\n(defn product [xs]\n  (when (seq xs)\n    (reduce * 1 xs)))\n\n(defn count_within_percentile [xs p]\n  (let [sorted-xs (sort xs)\n        total-count (count xs)\n        percentile-index (Math/round (* (/ p 100) total-count))]\n    (count (take percentile-index sorted-xs))))\n\n(defn calculate-stats [xs]\n  {:average       (average xs)\n   :median        (median xs)\n   :range         (get-range xs)\n   :std-deviation (standard-deviation xs)\n   :mode          (mode xs)\n   :sum           (reduce + xs)\n   :product       (product xs)\n   :iqr           (interquartile-range xs)\n   :count         (count xs)\n   :percentiles   {:10 (count_within_percentile xs 10)\n                   :25 (count_within_percentile xs 25)\n                   :50 (count_within_percentile xs 50)\n                   :75 (count_within_percentile xs 75)\n                   :90 (count_within_percentile xs 90)}})\n\n(defn add-matrices [matrix1 matrix2]\n  (mapv + matrix1 matrix2))\n\n(defn subtract-matrices [matrix1 matrix2]\n  (mapv - matrix1 matrix2))\n\n"]}