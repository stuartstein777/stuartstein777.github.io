{"version":3,"sources":["shadow/remote/runtime/obj_support.cljc"],"mappings":"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","names":["this__5343__auto__","k__5344__auto__","this__5345__auto__","k28493","else__5346__auto__","G__28508","cljs.core/Keyword","obj","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__28516","vec__28517","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__28492","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this28494","other28495","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__28553","this__5351__auto__","k__5352__auto__","pred__28556","cljs.core/keyword-identical?","expr__28557","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.remote.runtime.obj-support/Reference","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__28498","extmap__5385__auto__","G__28577","cljs.core/record?","shadow.remote.runtime.obj-support/->Reference","shadow.remote.runtime.obj-support/map->Reference","shadow.remote.runtime.obj-support/obj-ref","shadow.remote.runtime.obj-support/obj-ref?","result","shadow.remote.runtime.obj-support/now","js/Date.now","shadow.remote.runtime.obj-support/next-oid","cljs.core/random-uuid","shadow.remote.runtime.obj-support/register*","state","oid","obj-info","ts","entry","clojure.datafy/datafy","cljs.core/assoc-in","shadow.remote.runtime.obj-support/obj-type-string","cljs.core.pr_str","cljs.core/type","shadow.remote.runtime.obj-support/default-max-print-size","p__28609","p__28610","map__28612","cljs.core/--destructure-map","map__28614","shadow.remote.runtime.obj-support/request-edn","data","limit","msg","lw","shadow.remote.runtime.writer/limit-writer","cljs.core/pr-writer","cljs.core/pr-opts","shadow.remote.runtime.writer/get-string","p__28617","p__28618","map__28620","map__28621","shadow.remote.runtime.obj-support/request-pprint","cljs.pprint.pprint","p__28624","p__28625","map__28627","map__28628","shadow.remote.runtime.obj-support/request-edn-limit","shadow.remote.runtime.writer/pr-str-limit","p__28632","map__28634","shadow.remote.runtime.obj-support/request-str","p__28635","map__28636","shadow.remote.runtime.obj-support/request-ex-str","ex","js/Error","cljs.repl/error->str","cljs.core/second","shadow.remote.runtime.obj-support/exception?","x","shadow.remote.runtime.obj-support/simple-value?","val","cljs.core/boolean?","cljs.core/Symbol","cljs.core/meta","cljs.core/coll?","cljs.core/empty?","shadow.remote.runtime.obj-support/rank-predicates","cljs.core/nil?","cljs.core/number?","cljs.core/string?","cljs.core/keyword?","cljs.core/symbol?","cljs.core/map?","cljs.core/list?","shadow.remote.runtime.obj-support/rank-val","cljs.core/reduce-kv","res","idx","pred","cljs.core/reduced","shadow.remote.runtime.obj-support/smart-comp","a","b","e28670","cljs.core/compare","e","ar","br","shadow.remote.runtime.obj-support/attempt-to-sort","coll","cljs.core/vec","e28678","cljs.core.sort","p__28682","map__28683","shadow.remote.runtime.obj-support/cache-view-order","state-ref","view-order","or__5045__auto__","cljs.core.swap_BANG_","p__28688","p__28689","map__28690","map__28691","shadow.remote.runtime.obj-support/request-nav","nav","clojure.datafy/nav","cljs.core/keys","key","cljs.core/set?","cljs.core.ex_info","p__28705","p__28706","map__28707","map__28708","shadow.remote.runtime.obj-support/request-fragment","start","num","val-limit","map__28710","key-limit","end","x__5133__auto__","y__5134__auto__","idxs","cljs.core.range","fragment","m","e28711","e28713","p__28715","map__28716","shadow.remote.runtime.obj-support/get-data-type","summary","e28717","cljs.core/seq?","p__28718","map__28719","shadow.remote.runtime.obj-support/merge-source-info","cljs.core.merge","cljs.core/select-keys","p__28720","p__28721","map__28722","map__28723","shadow.remote.runtime.obj-support/inspect-entry!","this","added-at","$","p__28727","map__28728","handler-id","inspect-fn","handler-config","cljs.core/deref","p__28729","map__28730","shadow.remote.runtime.obj-support/obj-describe*","temp__5808__auto__","cljs.core.get_in","p__28731","p__28732","map__28733","map__28734","shadow.remote.runtime.obj-support/obj-describe","runtime","temp__5802__auto__","shadow.remote.runtime.shared/reply","p__28751","p__28752","map__28756","map__28757","shadow.remote.runtime.obj-support/obj-request","request-op","request-fn","cljs.core/not","e28781","new-oid","G__28817","G__28818","G__28819","shadow.remote.runtime.obj-support/register","reply-msg","G__28828","js/console.warn","G__28788","G__28789","G__28790","p__28848","p__28849","map__28853","map__28855","shadow.remote.runtime.obj-support/obj-forget","svc","cljs.core/update","cljs.core/dissoc","p__28884","map__28886","shadow.remote.runtime.obj-support/obj-forget-all","cljs.core/assoc","shadow.remote.runtime.obj-support/basic-gc!","objs-to-drop","cljs.core/vals","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop","cljs.core.map","cljs.core.update","p__28891","p__28892","map__28894","map__28896","shadow.remote.runtime.obj-support/add-handler","cljs.core/fn?","shadow.remote.runtime.obj-support/start","cljs.core.atom","p__28916","map__28917","cljs.core/conj","p__28920","map__28921","p__28926","map__28928","p__28931","map__28932","p1__28901#","p2__28902#","p__28936","map__28937","p1__28906#","p2__28907#","p__28941","map__28942","p1__28908#","p1__28909#","p1__28910#","p1__28911#","shadow.remote.runtime.api/add-extension","p__28951","map__28952","shadow.remote.runtime.obj-support/get-tap-history","p1__28950#","cljs.core.filter","cljs.core.take","p__28959","map__28961","cljs.core/first","p__28965","map__28967","shadow.remote.runtime.obj-support/get-ref","obj-id","p__28969","map__28971","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.obj-support\n  (:require\n    [clojure.datafy :as d]\n    [clojure.pprint :refer (pprint)]\n    [clojure.spec.alpha :as spec]\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.writer :as lw]\n    ;; FIXME: I do not like importing these here\n    ;; need to extract shadow-cljs functions if I ever move shadow.remote out\n    ;; cljs.repl has way too much other stuff on the CLJ side not error related we don't really need here\n    ;; should just have one namespace only concerned with formatting errors\n    ;; maybe even as separate plugin\n    #?@(:clj [[shadow.cljs.devtools.errors :refer (error-format)]\n              [shadow.jvm-log]]\n        :cljs [[cljs.repl :refer (error->str)]]))\n  #?(:clj (:import [java.util UUID])))\n\n(defrecord Reference [obj])\n\n(defn obj-ref [obj]\n  (when (some? obj)\n    (Reference. obj)))\n\n(defn obj-ref? [result]\n  (instance? Reference result))\n\n(defn now []\n  #?(:clj\n     (System/currentTimeMillis)\n     :cljs\n     (js/Date.now)))\n\n(defn next-oid []\n  #?(:clj\n     (str (UUID/randomUUID))\n     :cljs\n     (str (random-uuid))))\n\n(defn register*\n  [state oid obj obj-info]\n\n  (let [ts\n        (now)\n\n        entry\n        {:obj obj\n         :data (d/datafy obj)\n         :obj-info obj-info\n         :added-at ts\n         :access-at ts ;; tracking that for GC purposes\n         :oid oid}]\n\n    (assoc-in state [:objects oid] entry)))\n\n(declare register)\n\n(defn obj-type-string [obj]\n  (if (nil? obj)\n    \"nil\"\n    #?(:clj\n       (str (when (fn? obj) \"function: \") (-> (class obj) (.getName)))\n       :cljs\n       (pr-str (type obj)))))\n\n;; 1meg?\n(def default-max-print-size (* 1 1024 1024))\n\n(defn request-edn\n  [{:keys [data] :as entry} {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  (let [lw (lw/limit-writer limit)]\n    #?(:clj\n       (print-method data lw)\n       :cljs\n       (pr-writer data lw (pr-opts)))\n    (lw/get-string lw)))\n\n(defn request-pprint\n  [{:keys [data] :as entry} {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  ;; CLJ pprint for some reason doesn't run out of memory when printing circular stuff\n  ;; but it never finishes either\n  (let [lw (lw/limit-writer limit)]\n    (pprint data lw)\n    (lw/get-string lw)))\n\n(defn request-edn-limit\n  [{:keys [data] :as entry} {:keys [limit] :as msg}]\n  (lw/pr-str-limit data limit))\n\n;; FIXME: should likely support limit options\n(defn request-str\n  [{:keys [obj] :as entry} msg]\n  (str obj))\n\n(defn request-ex-str [{ex :obj :as entry} msg]\n  #?(:cljs\n     (if (instance? js/Error ex)\n       (error->str ex)\n       (str \"Execution error:\\n\"\n            ;; can be any object, really no hope in making this any kind of readable\n            ;; capping it so throwing something large doesn't blow up the REPL\n            \"  \" (second (lw/pr-str-limit ex 200)) \"\\n\"\n            \"\\n\"))\n\n     :clj\n     (error-format ex)))\n\n(defn exception? [x]\n  #?(:clj (instance? java.lang.Throwable x)\n     ;; everything can be thrown in JS\n     ;; (throw \"x\")\n     ;; (throw (js/Promise.resolved \"x\"))\n     :cljs true ;; (instance? js/Error x)\n     ))\n\n(defn simple-value? [val]\n  ;; anything that serializes to less than 32 bytes (ref-id is md5 hex string)\n  ;; should just be sent as is, bypassing all the ref logic\n  (or (nil? val)\n      (boolean? val)\n      (number? val)\n      (keyword? val)\n      ;; symbols only without meta\n      (and (symbol? val) (nil? (meta val)))\n      ;; small strings only\n      (and (string? val) (> 64 (count val)))\n      ;; empty cols with no meta\n      (and (coll? val) (empty? val) (nil? (meta val)))))\n\n(def rank-predicates\n  [nil?\n   boolean?\n   number?\n   string?\n   keyword?\n   symbol?\n   vector?\n   map?\n   list?])\n\n(defn rank-val [val]\n  (reduce-kv\n    (fn [res idx pred]\n      (if (pred val)\n        (reduced idx)\n        res))\n    -1\n    rank-predicates))\n\n(defn smart-comp [a b]\n  (try\n    (compare a b)\n    (catch #?(:clj Exception :cljs js/Error) e\n      (let [ar (rank-val a)\n            br (rank-val b)]\n        (compare ar br)))))\n\n(defn attempt-to-sort [coll]\n  (vec\n    (try\n      (sort smart-comp coll)\n      (catch #?(:clj Exception :cljs :default) e\n        coll))))\n\n(defn cache-view-order [state-ref {:keys [oid view-order]} coll]\n  (or view-order\n      (let [view-order (attempt-to-sort coll)]\n        (swap! state-ref assoc-in [:objects oid :view-order] view-order)\n        view-order\n        )))\n\n(defn request-nav [{:keys [data] :as entry} {:keys [idx] :as msg} state-ref]\n  (cond\n    (or (vector? data) (list? data))\n    (let [val (nth data idx)\n          nav (d/nav data idx val)]\n      (obj-ref nav))\n\n    (map? data)\n    (let [view-order (cache-view-order state-ref entry (keys data))\n          key (nth view-order idx)\n          val (get data key)\n          nav (d/nav data key val)]\n      (obj-ref nav))\n\n    (set? data)\n    (let [view-order (cache-view-order state-ref entry data)\n          val (nth view-order idx)\n          nav (d/nav data idx val)]\n      (obj-ref nav))\n\n    :else\n    (throw (ex-info \"nav not supported?\" entry))))\n\n(defn request-fragment\n  [{:keys [data] :as entry}\n   {:keys [start num val-limit]\n    :or {val-limit 100}\n    :as msg}\n   state-ref]\n  (cond\n    (map? data)\n    (let [{:keys [key-limit] :or {key-limit 100}} msg\n          view-order (cache-view-order state-ref entry (keys data))\n          end (min (count view-order) (+ start num))\n          idxs (range start end)\n          fragment\n          (reduce\n            (fn [m idx]\n              (let [key (nth view-order idx)\n                    val (get data key)]\n                (assoc m idx {:key (try\n                                     (lw/pr-str-limit key key-limit)\n                                     (catch #?(:clj Exception :cljs :default) e\n                                       [true \"... print failed ...\"]))\n                              :val (try\n                                     (lw/pr-str-limit val val-limit)\n                                     (catch #?(:clj Exception :cljs :default) e\n                                       [true \"... print failed ...\"]))})))\n            {}\n            idxs)]\n\n      fragment)\n\n    (vector? data)\n    (let [end (min (count data) (+ start num))\n          idxs (range start end)\n          fragment\n          (reduce\n            (fn [m idx]\n              (let [val (nth data idx)]\n                (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n            {}\n            idxs)]\n      fragment)\n\n    (list? data)\n    (let [end (min (count data) (+ start num))\n          idxs (range start end)\n          fragment\n          (reduce\n            (fn [m idx]\n              (let [val (nth data idx)]\n                (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n            {}\n            idxs)]\n\n      fragment)\n\n    (set? data)\n    (let [view-order (cache-view-order state-ref entry data)\n          end (min (count view-order) (+ start num))\n          idxs (range start end)\n          fragment\n          (reduce\n            (fn [m idx]\n              (let [val (nth view-order idx)]\n                (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n            {}\n            idxs)]\n\n      fragment)))\n\n(comment\n  (defn pageable-seq [{:keys [data] :as desc}]\n    ;; data is always beginning of seq\n    (let [seq-state-ref\n          (atom {:tail data ;; track where we are at\n                 :realized []})]\n      (-> desc\n          (assoc :seq-state-ref seq-state-ref)\n          (assoc-in [:handlers :nav]\n            (fn [{:keys [idx]}]\n              ;; FIXME: should validate that idx is actually realized\n              (let [val (nth (:realized @seq-state-ref) idx)\n                    ;; FIXME: not sure there are many cases where lazy seqs actually have nav?\n                    nav (d/nav data idx val)]\n                (obj-ref nav))))\n          (assoc-in [:handlers :chunk]\n            (fn [{:keys [start num val-limit]\n                  :or {val-limit 100}\n                  :as msg}]\n\n              ;; need locking otherwise threads may realize more than once\n              ;; shouldn't be much of an issue but better be safe\n              (locking seq-state-ref\n                (let [{:keys [tail realized] :as seq-state} @seq-state-ref\n\n                      end (+ start num)\n                      missing (- end (count realized))\n\n                      [tail realized]\n                      (loop [tail tail\n                             realized realized\n                             missing missing]\n                        (if-not (pos? missing)\n                          [tail realized]\n                          (let [next (first tail)]\n                            (if (nil? next)\n                              [nil realized]\n                              (recur (rest tail) (conj realized next) (dec missing))))))\n\n                      idxs (range start (min end (count realized)))\n                      fragment\n                      (reduce\n                        (fn [m idx]\n                          (let [val (nth realized idx)]\n                            (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                        {}\n                        idxs)]\n\n                  (swap! seq-state-ref assoc :tail tail :realized realized)\n\n                  {:start start\n                   :realized (count realized)\n                   :fragment fragment\n                   :more? (or (> (count realized) end) (some? tail))})))))))\n\n  (def x (pageable-seq {:data (map (fn [x] (prn [:realize x]) x) (range 10))}))\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 0 :num 5})\n    )\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 5 :num 10})\n    ))\n\n(defn get-data-type [summary {:keys [data] :as entry}]\n  (try\n    (cond\n      (nil? data)\n      (assoc summary :data-type :nil)\n\n      (string? data)\n      (assoc summary :data-type :string :data-count (count data))\n\n      (boolean? data)\n      (assoc summary :data-type :boolean)\n\n      (number? data)\n      (assoc summary :data-type :number)\n\n      (keyword? data)\n      (assoc summary :data-type :keyword)\n\n      (symbol? data)\n      (assoc summary :data-type :symbol)\n\n      (map? data)\n      (assoc summary :data-type :map :data-count (count data))\n\n      (vector? data)\n      (assoc summary :data-type :vec :data-count (count data))\n\n      (set? data)\n      (assoc summary :data-type :set :data-count (count data))\n\n      (list? data)\n      (assoc summary :data-type :list :data-count (count data))\n\n      ;; lazy seqs\n      (seq? data)\n      (assoc summary :data-type :seq)\n\n      :else\n      (assoc summary :data-type :unsupported))\n\n    (catch #?(:cljs :default :clj Exception) e\n      ;; just in case any of the above fail, leaving marker for debugging later\n      ;; intentionally dropping exception, since handling it breaks flow\n      #?(:clj (shadow.jvm-log/warn-ex e ::get-data-type-fail))\n\n      (assoc summary :data-type :unsupported :data-type-fail true))))\n\n(defn merge-source-info [summary {:keys [obj-info]}]\n  (merge summary (select-keys obj-info [:ns :line :column :label])))\n\n(defn inspect-entry!\n  [{:keys [state-ref] :as this}\n   {:keys [obj data added-at] :as entry}]\n\n  (-> {:added-at added-at\n       :datafied (not (identical? data obj))\n       :obj-type (obj-type-string obj)\n       :supports #{}}\n      (get-data-type entry)\n      (merge-source-info entry)\n      (as-> $\n        (reduce-kv\n          (fn [summary handler-id {:keys [inspect-fn] :as handler-config}]\n            (inspect-fn summary entry))\n          $\n          (:handlers @state-ref)))))\n\n(defn obj-describe*\n  [{:keys [state-ref] :as this}\n   oid]\n  (when-some [entry (get-in @state-ref [:objects oid])]\n    (swap! state-ref assoc-in [:objects oid :access-at] (now))\n    (inspect-entry! this entry)))\n\n(defn obj-describe\n  [{:keys [runtime] :as this}\n   {:keys [oid] :as msg}]\n  (if-let [summary (obj-describe* this oid)]\n    (shared/reply runtime msg {:op :obj-summary :oid oid :summary summary})\n    (shared/reply runtime msg {:op :obj-not-found :oid oid})))\n\n(defn obj-request\n  [{:keys [state-ref runtime] :as this}\n   {:keys [oid request-op] :as msg}]\n  (if-not (contains? (:objects @state-ref) oid)\n    (shared/reply runtime msg {:op :obj-not-found :oid oid})\n    (do (swap! state-ref assoc-in [:objects oid :access-at] (now))\n        (let [entry (get-in @state-ref [:objects oid])\n              request-fn (get-in @state-ref [:handlers request-op :request-fn])]\n          (if-not request-fn\n            (shared/reply runtime msg {:op :obj-request-not-supported\n                                       :oid oid\n                                       :request-op request-op})\n            (try\n              (let [result (request-fn entry msg)]\n\n                ;; FIXME: add support for generic async results\n                ;; all handlers should already be sync but allow async results\n                (if-not (obj-ref? result)\n                  (shared/reply runtime msg\n                    {:op :obj-result\n                     :oid oid\n                     :result result})\n\n                  (let [new-oid\n                        (register this (:obj result) {})\n\n                        reply-msg\n                        (-> {:op :obj-result-ref\n                             :oid oid\n                             :ref-oid new-oid}\n                            (cond->\n                              ;; only send new-obj :summary when requested\n                              (:summary msg)\n                              (assoc :summary (obj-describe* this new-oid))))]\n                    (shared/reply runtime msg reply-msg))))\n\n              (catch #?(:clj Exception :cljs :default) e\n                #?(:cljs (js/console.warn \"action-request-action failed\" (:obj entry) e)\n                   :clj (shadow.jvm-log/warn-ex e ::obj-request-failed msg))\n                (shared/reply runtime msg\n                  {:op :obj-request-failed\n                   :oid oid\n                   :msg msg\n                   :ex-oid (register this e {:msg msg})})))))\n        )))\n\n(defn obj-forget\n  [{:keys [state-ref] :as svc}\n   {:keys [oid] :as msg}]\n  (swap! state-ref update :objects dissoc oid))\n\n(defn obj-forget-all\n  [{:keys [state-ref] :as svc}\n   msg]\n  (swap! state-ref assoc :objects {}))\n\n(defn basic-gc! [state]\n  (let [objs-to-drop\n        (->> (:objects state)\n             (vals)\n             (sort-by :access-at)\n             (reverse)\n             (drop 100) ;; FIXME: make configurable\n             (map :oid))]\n\n    (reduce\n      (fn [state oid]\n        (update state :objects dissoc oid))\n      state\n      objs-to-drop)))\n\n(defn add-handler\n  [{:keys [state-ref] :as this} handler-id {:keys [inspect-fn request-fn] :as handler-config}]\n  {:pre [(map? handler-config)\n         (fn? inspect-fn)\n         (fn? request-fn)]}\n  (swap! state-ref assoc-in [:handlers handler-id] handler-config)\n  this)\n\n(defn start [runtime]\n  (let [state-ref\n        (atom {:objects {}\n               :handlers {}\n               :id-seq-ref 0})\n\n        svc\n        (-> {:runtime runtime\n             :state-ref state-ref}\n\n            (add-handler :get-value\n              {:inspect-fn\n               (fn [summary {:keys [obj] :as entry}]\n                 (if-not (simple-value? obj)\n                   summary\n                   (update summary :supports conj :get-value)))\n               :request-fn\n               (fn [{:keys [obj]} msg]\n                 obj)})\n\n            (add-handler :str\n              {:inspect-fn\n               (fn [summary entry]\n                 (update summary :supports conj :str))\n               :request-fn request-str})\n\n            (add-handler :ex-str\n              {:inspect-fn\n               (fn [summary {:keys [obj] :as entry}]\n                 (if (exception? obj)\n                   (update summary :supports conj :ex-str)\n                   summary))\n               :request-fn request-edn-limit})\n\n            ;; FIXME: maybe only support these for clojure types?\n            (add-handler :edn\n              {:inspect-fn\n               (fn [summary entry]\n                 (update summary :supports conj :edn))\n               :request-fn request-edn})\n\n            (add-handler :edn-limit\n              {:inspect-fn\n               (fn [summary entry]\n                 (update summary :supports conj :edn-limit))\n               :request-fn request-edn-limit})\n\n            (add-handler :pprint\n              {:inspect-fn\n               (fn [summary {:keys [data] :as entry}]\n                 (if (or (coll? data) (seq? data))\n                   (update summary :supports conj :pprint)\n                   summary))\n               :request-fn request-pprint})\n\n            (add-handler :nav\n              {:inspect-fn\n               (fn [summary {:keys [data] :as entry}]\n                 (if (and (or (map? data) (vector? data) (set? data) (list? data))\n                          (seq data))\n                   (update summary :supports conj :nav)\n                   summary))\n               :request-fn\n               #(request-nav %1 %2 state-ref)})\n\n            (add-handler :fragment\n              {:inspect-fn\n               (fn [summary {:keys [data] :as entry}]\n                 (if (and (or (map? data) (vector? data) (set? data) (list? data))\n                          (seq data))\n                   (update summary :supports conj :fragment)\n                   summary))\n               :request-fn\n               #(request-fragment %1 %2 state-ref)})\n            )]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops {:obj-describe #(obj-describe svc %)\n             :obj-request #(obj-request svc %)\n             :obj-forget #(obj-forget svc %)\n             :obj-forget-all #(obj-forget-all svc %)}\n       :on-idle #(swap! state-ref basic-gc!)})\n\n    svc))\n\n(defn get-tap-history [{:keys [state-ref] :as svc} num]\n  (->> (:objects @state-ref)\n       (vals)\n       (filter #(= :tap (get-in % [:obj-info :from])))\n       (sort-by :added-at)\n       (reverse)\n       (take num)\n       (map :oid)\n       (into [])))\n\n(defn register [{:keys [state-ref] :as svc} obj obj-info]\n  (let [oid (next-oid)]\n    (if-not (and (vector? obj) (= :shadow.remote/wrap (first obj)) (= (count obj) 3))\n      (swap! state-ref register* oid obj obj-info)\n      (swap! state-ref register* oid (nth obj 1) (merge obj-info (nth obj 2))))\n    oid))\n\n(defn get-ref [{:keys [state-ref]} obj-id]\n  (get-in @state-ref [:objects obj-id]))\n\n(defn stop [{:keys [runtime]}]\n  (p/del-extension runtime ::ext))\n\n(comment\n  (def obj-support (:clj-runtime-obj-support (shadow.cljs.devtools.server.runtime/get-instance)))\n  (swap! (:state-ref obj-support) assoc :objects {})\n  )"]}