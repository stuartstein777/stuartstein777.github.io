{"version":3,"sources":["exfn/purchases/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","p__17048","vec__17049","cljs.core.nth","db","_","purchases","cljs.core.assoc","cljs.core/assoc-in","exfn.purchases.events/purchases-api","year","show-full-year?","exfn.shared.logic/base-and-port","ajax.core/json-request-format","ajax.core/json-response-format","exfn.purchases.events/current-sort-col","exfn.purchases.events/current-sort-asc?","p__17095","vec__17099","sort-col","new-sort-asc?","cljs.core._EQ_","cljs.core/not","or__5045__auto__","sort-dir","cljs.core/<","cljs.core/>","sort-col-comp","cljs.core.comp","clojure.string/lower-case","cljs.core.update_in","cljs.core.sort_by","p__17116","vec__17117","store-summary","re_frame.core.reg_event_fx","p__17135","p__17136","map__17137","cljs.core/--destructure-map","cljs.core.get","vec__17138","store","clojure.string/replace","p__17145","map__17146"],"sourcesContent":["(ns exfn.purchases.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [exfn.shared.logic :as lgc]\n            [clojure.string :as str]))\n\n(rf/reg-event-db\n :process-purchases\n (fn [db [_ purchases]]\n   (-> db\n       (assoc :loading? false)\n       (assoc-in [:purchases :grid] purchases)\n       (assoc-in [:purchases :breakdown-grid] [])\n       (assoc :error nil))))\n\n(defn purchases-api [year show-full-year?]\n  {:method          :post\n   :uri             (str lgc/base-and-port \"/Purchases\")\n   :format          (ajax/json-request-format)\n   :params          {:show-full-year show-full-year?\n                     :year  year}\n   :response-format (ajax/json-response-format {:keywords? true})\n   :on-success      [:process-purchases]\n   :on-failure      [:fail]})\n\n(defn current-sort-col [db]\n  (-> db :purchases :ui :purchases-sort :sort-col))\n\n(defn current-sort-asc? [db]\n  (-> db :purchases :ui :purchases-sort :sort-asc?))\n\n(rf/reg-event-db\n :purchases-sort\n (fn [db [_ sort-col]]\n   (let [new-sort-asc? (if (= sort-col (current-sort-col db))\n                         (not (or (current-sort-asc? db) false))\n                         true)\n         sort-dir (if new-sort-asc? < >)\n         sort-col-comp (if (= sort-col :store) (comp str/lower-case :store) :total)]\n     (-> db\n         (assoc-in [:purchases :ui :purchases-sort :sort-col] sort-col)\n         (assoc-in [:purchases :ui :purchases-sort :sort-asc?] new-sort-asc?)\n         (update-in [:purchases :grid] #(sort-by sort-col-comp\n                                                 sort-dir\n                                                 (-> db :purchases :grid)))))))\n\n(rf/reg-event-db\n :process-store-summary\n (fn [db [_ store-summary]]\n   (-> db\n       (assoc :error nil)\n       (assoc-in [:purchases :breakdown-grid] store-summary))))\n\n(rf/reg-event-fx\n :get-store-summary\n (fn [{:keys [db]} [_ store]]\n   {:db         (assoc-in db [:purchases :ui :selected-store] store)\n    :http-xhrio {:method          :get\n                 :uri             (str lgc/base-and-port \"/Purchases/\" (str/replace store #\" \" \"%20\"))\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:process-store-summary]\n                 :on-failure      [:fail]}}))\n\n(rf/reg-event-fx\n :toggle-full-year\n (fn [{:keys [db]} _]\n   (let [show-full-year? (-> db :purchases :ui :show-full-year-purchases?)]\n     {:db         (assoc-in db [:purchases :ui :show-full-year-purchases?] (not show-full-year?))\n      :http-xhrio (purchases-api (-> db :settings :year) (not show-full-year?))})))\n"]}