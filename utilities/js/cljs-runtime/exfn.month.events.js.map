{"version":3,"sources":["exfn/month/events.cljs"],"mappings":"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","names":["exfn.month.events/get-accounts","data","cljs.core.map","d","re_frame.core.reg_event_db","p__17062","vec__17063","cljs.core.nth","db","_","cljs.core.assoc","exfn.month.events/month-api","year","month","exfn.shared.logic/base-and-port","ajax.core/json-request-format","ajax.core/json-response-format","re_frame.core.reg_event_fx","p__17078","map__17079","cljs.core/--destructure-map","cljs.core.get","p__17083","p__17084","map__17090","vec__17091","transactionId","p__17104","p__17105","map__17106","vec__17107","transaction","p__17125","vec__17129","vec__17132","account-id","cljs.core.get_in","cljs.core.update_in","xs","clojure.set.difference","cljs.core.conj","p__17149","vec__17150","vec__17153"],"sourcesContent":["(ns exfn.month.events\n  (:require [re-frame.core :as rf]\n            [exfn.shared.logic :as lgc]\n            [clojure.set :as set]\n            [exfn.shared.shared-events]\n            [ajax.core :as ajax]))\n\n(defn get-accounts [data]\n  (map (fn [d]\n         {:id (d :id)\n          :name (d :name)}) data))\n\n(rf/reg-event-db\n :process-month\n (fn [db [_ data]]\n   (-> db\n       (assoc :error nil)\n       (assoc :month data)\n       (assoc :accounts (get-accounts data))\n       (assoc :loading? false))))\n\n(defn month-api [year month]\n  {:method          :post\n   :uri             (str lgc/base-and-port \"/Month\")\n   :format          (ajax/json-request-format)\n   :params          {:month month\n                     :year  year}\n   :response-format (ajax/json-response-format {:keywords? true})\n   :on-success      [:process-month]\n   :on-failure      [:fail]})\n\n(rf/reg-event-fx\n :load-current-month\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio (month-api (-> db :settings :year) (db :current-month))}))\n\n(rf/reg-event-fx\n :delete-transaction\n  (fn [{:keys [db]} [_ transactionId]]\n    {:db db\n     :http-xhrio {:method          :delete\n                  :uri             (str lgc/base-and-port \"/Transaction?transactionId=\" transactionId)\n                  :format          (ajax/json-request-format)\n                  :params          {:transactionId transactionId}\n                  :response-format (ajax/json-response-format)\n                  :on-success      [:set-current-month (db :current-month)]\n                  :on-failure      [:fail]}}))\n\n(rf/reg-event-fx\n :save-transaction\n (fn [{:keys [db]} [_ transaction]]\n   {:db db\n    :http-xhrio {:method          :post\n                 :uri             (str lgc/base-and-port \"/Transaction\")\n                 :format          (ajax/json-request-format)\n                 :params          transaction\n                 :response-format (ajax/json-response-format)\n                 :on-success      [:set-current-month (db :current-month)]\n                 :on-failure      [:fail]}}))\n\n(rf/reg-event-db\n :toggle-editor\n (fn [db [_ [month account-id]]]\n   (if (get-in db [:ui-settings :months month :expanded-editors account-id])\n     (update-in db [:ui-settings :months month :expanded-editors]\n                (fn [xs]\n                  (set/difference xs #{account-id})))\n     (update-in db [:ui-settings :months month :expanded-editors]\n                (fn [xs] (conj xs account-id))))))\n\n(rf/reg-event-db\n :toggle-account\n (fn [db [_ [month account-id]]]\n   (if (get-in db [:ui-settings :months month :expanded-accounts account-id])\n     (update-in db [:ui-settings :months month :expanded-accounts]\n                (fn [xs]\n                  (set/difference xs #{account-id})))\n     (update-in db [:ui-settings :months month :expanded-accounts]\n                (fn [xs] (conj xs account-id))))))\n\n(comment\n  \n  )"]}