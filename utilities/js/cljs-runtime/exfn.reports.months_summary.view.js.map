{"version":3,"sources":["exfn/reports/months_summary/view.cljs"],"mappings":"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","names":["exfn.reports.months-summary.view/months","exfn.reports.months-summary.view/view","cljs.core/deref","summary","re_frame.core.subscribe","error","loading?","exfn.shared.error/error-indicator","exfn.shared.loading/loading","iter__5523__auto__","s__17428","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__17430","cljs.core/chunk-buffer","i__17429","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__17427","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","month","in","cljs.core.get","out","net","gross-in","bg","G__17433","G__17434","cljs.core._EQ_","exfn.shared.logic/format-number","total-in","cljs.core.reduce","cljs.core/+","cljs.core.map","total-out","total-net","total-gross","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.reports.months-summary.view\n  (:require [exfn.shared.error :as err]\n            [re-frame.core :as rf]\n            [exfn.reports.months-summary.subscriptions]\n            [reagent.core :as r]\n            [goog.string :as gstring]\n            [exfn.shared.logic :as slogic]\n            [goog.string.format]\n            [exfn.shared.loading :as loading]))\n\n(def months \n  {1 \"January\"\n   2 \"February\"\n   3 \"March\"\n   4 \"April\"\n   5 \"May\"\n   6 \"June\"\n   7 \"July\"\n   8 \"August\"\n   9 \"September\"\n   10 \"October\"\n   11 \"November\"\n   12 \"December\"})\n\n(defn view []\n  (let [summary   @(rf/subscribe [:months-summary])\n        error     @(rf/subscribe [:error])\n        loading?  @(rf/subscribe [:loading?])]\n    [:main.col-md-9.ms-sm-auto.col-lg-10.px-md-4\n     [:div\n      [:div.d-flex.justify-content-between.flex-md-nowrap.align-items-center.pt-3.pb-2.mb-3.border-bottom\n       [:h1.h2 \"Month by Month Summary\"]]]\n      [:div.row\n      [:div.col.col-lg-8\n       (cond\n         error [err/error-indicator error :purchase]\n         loading? [loading/loading loading?]\n         :else\n         [:div.row\n          {:style {:width 550}}\n            [:div.table-responsive\n             [:table.table.table-sm.table-hover\n               [:thead\n                [:tr\n                 [:th \"Month\"]\n                 [:th.amount-col \"Income\"]\n                 [:th.amount-col \"Expenses\"]\n                 [:th.amount-col \"Net\"]\n                 [:th.amount-col \"Income (Gross)\"]]]\n              [:tbody\n               (for [month summary]\n                 (let [in  (get month :total-in 0)\n                       out (get month :total-out 0)\n                       net (- in out)\n                       gross-in (get month :gross-in 0)\n                       bg  (if (pos? net) \"#d4edda\" \"#f8d7da\")]\n                 [:tr\n                  [:td (months (month :month))]\n                  [:td.amount-col \n                   (if (= 0 in)\n                     \"-\"\n                   (slogic/format-number in))]\n                  [:td.amount-col \n                   (slogic/format-number out)]\n                  [:td.amount-col \n                   {:style {:background-color bg}}\n                   (slogic/format-number net)]\n                  [:td.amount-col\n                   (if (= 0 gross-in)\n                     \"-\"\n                     (slogic/format-number gross-in))]]))\n               ( let [total-in (reduce + (map :total-in summary))\n                      total-out (reduce + (map :total-out summary))\n                      total-net (- total-in total-out)\n                      total-gross (reduce + (map :gross-in summary))]\n               [:tr.total-row\n                [:td \"Total\"]\n                [:td.amount-col \n                 (slogic/format-number total-in)]\n                [:td.amount-col \n                 (slogic/format-number total-out)]\n                [:td.amount-col \n                 (slogic/format-number total-net)]\n                [:td.amount-col\n                 (slogic/format-number total-gross)]])]]]])]]]))\n\n"]}