{"version":3,"sources":["exfn/dividends/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","p__17054","vec__17059","cljs.core.nth","db","_","date","cljs.core/assoc-in","p__17066","vec__17067","c","p__17077","vec__17156","amount","p__17159","vec__17160","currency","p__17163","vec__17164","dividends","cljs.core.assoc","exfn.dividends.events/dividends-api","year","exfn.shared.logic/base-and-port","ajax.core/json-request-format","ajax.core/json-response-format","p__17167","vec__17168","exch-rate","ex-rate","js/Number","re_frame.core.reg_event_fx","p__17178","p__17179","map__17180","cljs.core/--destructure-map","cljs.core.get","vec__17181","exfn.dividends.logic/get-query-date","p__17184","map__17185","exfn.dividends.events/build-dividend","exfn.dividends.logic/get-request-date","p__17186","map__17187"],"sourcesContent":["(ns exfn.dividends.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [exfn.shared.logic :as lgc]\n            [exfn.dividends.logic :as dlogic]\n            [clojure.string :as str]))\n\n(rf/reg-event-db\n :dividends/date\n (fn [db [_ date]]\n   (assoc-in db [:dividends :ui :date] date)))\n\n(rf/reg-event-db\n :dividends/company\n (fn [db [_ c]]\n   (assoc-in db [:dividends :ui :company] c)))\n\n(rf/reg-event-db\n :dividends/amount\n (fn [db [_ amount]]\n   (assoc-in db [:dividends :ui :amount] amount)))\n\n(rf/reg-event-db\n :dividends/currency\n (fn [db [_ currency]]\n   (assoc-in db [:dividends :ui :currency] currency)))\n\n(rf/reg-event-db\n :process-dividends\n (fn [db [_ dividends]]\n   (-> db\n       (assoc :loading? false)\n       (assoc-in [:dividends :grid] dividends)\n       (assoc-in [:dividends :ui] {:company \"\"\n                                   :amount \"\"\n                                   :amount-gbp \"\"\n                                   :currency \"USD\"\n                                   :exchange-rate \"\"})\n       (assoc :error nil))))\n\n(defn dividends-api [year]\n  {:method          :get\n   :uri             (str lgc/base-and-port \"/dividends/\" year)\n   :format          (ajax/json-request-format)\n   :response-format (ajax/json-response-format {:keywords? true})\n   :on-success      [:process-dividends]\n   :on-failure      [:fail]})\n\n(rf/reg-event-db\n :process-exchange-rate\n (fn [db [_ exch-rate]]\n   (let [ex-rate (-> exch-rate :rates :GBP)\n         amount (if (-> db :dividends :ui :amount)\n                  (* ex-rate (js/Number (-> db :dividends :ui :amount)))\n                  0)]\n     \n     (-> db\n         (assoc :loading? false)\n         (assoc :error nil)\n         (assoc-in [:dividends :ui :exchange-rate] ex-rate)\n         (assoc-in [:dividends :ui :amount-gbp] amount)))))\n\n(rf/reg-event-fx\n :dividends/:get-exchange-rate\n (fn [{:keys [db]} [_ date]]\n   {:db (-> db\n            (assoc :loading? true)\n            (assoc :error nil))\n    :http-xhrio \n    {:method          :get\n     :uri             (str \"https://openexchangerates.org/api/historical/\" (dlogic/get-query-date date) \".json?app_id=370ad878565d4f04ae57500c7143ed65&symbols=GBP\")\n     :format          (ajax/json-request-format)\n     :response-format (ajax/json-response-format {:keywords? true})\n     :on-success      [:process-exchange-rate]\n     :on-failure      [:fail]}}))\n\n(rf/reg-event-db\n :dividends/calculate-amount-gbp\n (fn [db _]\n   (assoc-in db [:dividends :ui :amount-gbp]\n             (* (-> db :dividends :ui :exchange-rate)\n                (-> db :dividends :ui :amount)))))\n\n(rf/reg-event-fx\n :dividends/reload\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio (dividends-api (-> db :settings :year))}))\n\n(defn build-dividend [db]\n  {:date          (dlogic/get-request-date (-> db :dividends :ui :date))\n   :company       (-> db :dividends :ui :company)\n   :amount        (-> db :dividends :ui :amount)\n   :currency      (-> db :dividends :ui :currency)\n   :exchange-rate (-> db :dividends :ui :exchange-rate)\n   :amount-gbp    (-> db :dividends :ui :amount-gbp)})\n\n(rf/reg-event-fx\n :dividends/save-dividend\n (fn [{:keys [db]} _]\n   {:db db\n    :http-xhrio\n    {:method :post\n     :uri             (str lgc/base-and-port \"/dividends\")\n     :params          (build-dividend db)\n     :format          (ajax/json-request-format)\n     :response-format (ajax/json-response-format {:keywords? true})\n     :on-success      [:dividends/reload]\n     :on-failure      [:fail]}}))\n"]}