{"version":3,"sources":["exfn/maths/events.cljs"],"mappings":";AAKA,yDAAA,zDAACA,kIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;iBAAT,AAAAF,4CAAAD,WAAA,IAAA,xEAAWI;AAAX,AACE,wDAAA,jDAACC,8CAAMH,oEAAeE;;AAEzB,yDAAA,zDAACN,gIAEA,WAAKI,GAAGC;AAAR,AACE,IAAMG,SAAO,qBAAM,qEAAA,iFAAA,rJAACJ,mCAAAA,qGAAAA,7IAAgBK;IAAAA,QACnB,qDAAA,rDAACC,mDAAUD;AADf,AAEI,OAACE,4CAAIC,qBAAWH;;AAFjC,AAGA,wDAAA,jDAACF,8CAAMH,4EAAoB,AAACS,yCAA8BL","names":["re_frame.core.reg_event_db","p__16741","vec__16742","cljs.core.nth","db","_","gcd-values","cljs.core.assoc","values","o","clojure.string.split","cljs.core.map","cljs.core/parse-long","exfn.maths.logic/greatest-common-divisor"],"sourcesContent":["(ns exfn.maths.events\n  (:require [re-frame.core :as rf]\n            [clojure.string :as str]\n            [exfn.maths.logic :as logic]))\n\n(rf/reg-event-db\n :set-gcd-values\n (fn [db [_ gcd-values]]\n   (assoc db :gcd-values gcd-values)))\n\n(rf/reg-event-db\n :calculate-gcd\n (fn [db _]\n   (let [values (as-> (db :gcd-values) o\n                    (str/split o #\" \")\n                    (map parse-long o))]\n   (assoc db :math/gcd-result (logic/greatest-common-divisor values)))))"]}