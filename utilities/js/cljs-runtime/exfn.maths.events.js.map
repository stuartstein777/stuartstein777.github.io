{"version":3,"sources":["exfn/maths/events.cljs"],"mappings":";AAKA,yDAAA,zDAACA,kIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;iBAAT,AAAAF,4CAAAD,WAAA,IAAA,xEAAWI;AAAX,AACE,wDAAA,jDAACC,8CAAMH,2EAAoBE;;AAE9B,yDAAA,zDAACN,gIAEA,WAAKI,GAAGC;AAAR,AACE,IAAMG,SAAO,qBAAM,qEAAA,wFAAA,5JAACJ,mCAAAA,4GAAAA,pJAAqBK;IAAAA,QACxB,qDAAA,rDAACC,mDAAUD;AADf,AAEI,OAACE,4CAAIC,qBAAWH;;AAFjC,AAGA,wDAAA,jDAACF,8CAAMH,4EAAoB,AAACS,yCAA8BL;;AAE7D,yDAAA,zDAACR,kIAEA,cAAAc,HAAKV;AAAL,AAAA,IAAAW,aAAAD;QAAA,AAAAX,4CAAAY,WAAA,IAAA,/DAASV;iBAAT,AAAAF,4CAAAY,WAAA,IAAA,xEAAWT;AAAX,AACE,wDAAA,jDAACC,8CAAMH,4EAAoBE;;AAE9B,yDAAA,zDAACN,gIAEA,WAAKI,GAAGC;AAAR,AACE,IAAMG,SAAO,qBAAM,qEAAA,yFAAA,7JAACJ,mCAAAA,6GAAAA,rJAAqBK;IAAAA,QAC1B,qDAAA,rDAACC,mDAAUD;AADb,AAEE,OAACE,4CAAIC,qBAAWH;;AAF/B,AAGE,wDAAA,jDAACF,8CAAMH,4EAAoB,AAACY,uCAA4BR;;AAE7D,yDAAA,zDAACR,wIAEA,cAAAiB,HAAKb;AAAL,AAAA,IAAAc,aAAAD;QAAA,AAAAd,4CAAAe,WAAA,IAAA,/DAASb;QAAT,AAAAF,4CAAAe,WAAA,IAAA,/DAAWC;AAAX,AACE,wDAAA,jDAACZ,8CAAMH,mFAAwBe;;AAElC,yDAAA,zDAACnB,kIAEA,WAAKI,GAAGC;AAAR,AACE,wDAAA,jDAACE,8CAAMH,sFAAyB,AAACgB,iCAAgB,qEAAA,gGAAA,pKAAChB,mCAAAA,oHAAAA","names":["re_frame.core.reg_event_db","p__15395","vec__15396","cljs.core.nth","db","_","gcd-values","cljs.core.assoc","values","o","clojure.string.split","cljs.core.map","cljs.core/parse-long","exfn.maths.logic/greatest-common-divisor","p__15399","vec__15400","exfn.maths.logic/least-common-multiple","p__15403","vec__15404","v","exfn.maths.logic/is-prime?"],"sourcesContent":["(ns exfn.maths.events\n  (:require [re-frame.core :as rf]\n            [clojure.string :as str]\n            [exfn.maths.logic :as logic]))\n\n(rf/reg-event-db\n :set-gcd-values\n (fn [db [_ gcd-values]]\n   (assoc db :math/gcd-values gcd-values)))\n\n(rf/reg-event-db\n :calculate-gcd\n (fn [db _]\n   (let [values (as-> (db :math/gcd-values) o\n                    (str/split o #\" \")\n                    (map parse-long o))]\n   (assoc db :math/gcd-result (logic/greatest-common-divisor values)))))\n\n(rf/reg-event-db\n :set-lcm-values\n (fn [db [_ gcd-values]]\n   (assoc db :math/lcm-values gcd-values)))\n\n(rf/reg-event-db\n :calculate-lcm\n (fn [db _]\n   (let [values (as-> (db :math/lcm-values) o\n                  (str/split o #\" \")\n                  (map parse-long o))]\n     (assoc db :math/lcm-result (logic/least-common-multiple values)))))\n\n(rf/reg-event-db\n :set-is-prime-value\n (fn [db [_ v]]\n   (assoc db :math/is-prime-value v)))\n\n(rf/reg-event-db\n :check-is-prime\n (fn [db _]\n   (assoc db :math/is-prime-result (logic/is-prime? (db :math/is-prime-value)))))\n"]}