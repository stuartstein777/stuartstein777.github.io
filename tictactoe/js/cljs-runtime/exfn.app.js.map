{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/get-square-icon","p","pred__8962","expr__8963","js/Error","cljs.core/=","exfn.app/winner","cljs.core/deref","winner","re_frame.core.subscribe","game-over?","or__4126__auto__","re-frame.core/dispatch","exfn.app/to-play","player","exfn.app/board","board","iter__4529__auto__","s__8966","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__8968","cljs.core/chunk-buffer","i__8967","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__8965","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","r","cljs.core.range","s__8970","b__8972","i__8971","iter__8969","s__8974","b__8976","i__8975","iter__8973","c","cljs.core.get_in","exfn.app/app","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","re-frame.core/dispatch-sync","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\n  (:require [reagent.dom :as dom]\n            [re-frame.core :as rf]\n            [exfn.subscriptions]\n            [exfn.events]))\n\n(defn get-square-icon [p]\n  (condp = p\n    :_ \"\"\n    :x [:i.fas.fa-times]\n    :o [:i.far.fa-circle]))\n\n(defn winner []\n  (let [winner @(rf/subscribe [:winner])\n        game-over? @(rf/subscribe [:game-over?])]\n    [:div.winner\n     {:style {:visibility (if (or winner game-over?) :visible :hidden)}}\n     [:div\n      (if winner\n        [:span [:div \"The winner is \" (get-square-icon winner)]]\n        \"The game is a draw.\")]\n     [:div\n      [:button.btn.btn-success\n       {:on-click #(rf/dispatch [:initialize])}\n       \"reset\"]]]))\n\n(defn to-play []\n  (let [player @(rf/subscribe [:player])]\n    [:span.player (get-square-icon player) \" to play\"]))\n\n(defn board []\n  (let [board @(rf/subscribe [:board])]\n    [:div.board\n     (for [r (range 3)]\n       [:div.row.game-row {:key (str \"row-\" r)}\n        (for [c (range 3)]\n          [:div.col-4.game-square\n           {:key (str \"(\" r \",\" c \")\")\n            :on-click #(rf/dispatch [:update-board [r c]])}\n           [:div.board-marker\n            (get-square-icon (get-in board [r c]))]])])]))\n\n;; -- App -------------------------------------------------------------------------\n(defn app [] \n  [:div.container\n   [:h1 \"Tic Tac Toe\"]\n   [to-play]\n   [board]\n   [winner]])\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n\n(defn ^:export init []\n  (start))\n\n; dispatch the event which will create the initial state. \n(defonce initialize (rf/dispatch-sync [:initialize]))\n\n"]}