{"version":3,"sources":["exfn/logic.cljs"],"mappings":"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","names":["exfn.logic/cell-to-coord","exfn.logic/rotate-board","board","cljs.core.apply","cljs.core/map","cljs.core/vector","exfn.logic/pad-left","n","v","cljs.core/vec","cljs.core.concat","cljs.core.repeat","cljs.core/count","exfn.logic/slide-left","row","cljs.core.remove","cljs.core/zero?","exfn.logic/score-row","new-row","original","cljs.core/frequencies","cljs.core/flatten","updated","higher","p1__34067#","cljs.core.filter","cljs.core/second","cljs.core.get","cljs.core/first","p1__34068#","cljs.core.reduce","p__34069","vec__34070","cljs.core.nth","acc","k","cljs.core.prn","ov","exfn.logic/score","new-board","cljs.core/+","cljs.core.map","exfn.logic/merge-vector","i","res","cljs.core._EQ_","cljs.core.conj","exfn.logic/update-2d-vector","coord","value","cljs.core/assoc-in","exfn.logic/get-empty-cells","xs","cljs.core.range","cells","p1__34073#","cljs.core.get_in","exfn.logic/add-random-value","possibilities","number","cljs.core/shuffle","empty-cells","random-cell","cljs.core/empty?","exfn.logic/add-random-if-moved","exfn.logic/debug","d","exfn.logic/collapse-left","cljs.core.mapv","cljs.core.partial","exfn.logic/collapse-right","cljs.core/reverse","cljs.core.comp","exfn.logic/collapse-down","exfn.logic/collapse-up","exfn.logic/generate-board","exfn.logic/any-moves?","cljs.core.not_EQ_","cljs.core.partition_by","cljs.core/identity","exfn.logic/game-over?","cljs.core/every?","cljs.core/false?"],"sourcesContent":["(ns exfn.logic \n  (:require [re-frame.core :as rf]))\n\n(def cell-to-coord\n  {1  [0 0]\n   2  [0 1]\n   3  [0 2]\n   4  [0 3]\n   5  [1 0]\n   6  [1 1]\n   7  [1 2]\n   8  [1 3]\n   9  [2 0]\n   10 [2 1]\n   11 [2 2]\n   12 [2 3]\n   13 [3 0]\n   14 [3 1]\n   15 [3 2]\n   16 [3 3]})\n   \n(defn rotate-board [board]\n  (apply map vector board))\n\n(defn pad-left [n v]\n  (vec (concat v (repeat (- n (count v)) 0))))\n\n(defn slide-left [row]\n  (vec (remove zero? row)))\n\n(defn score-row [row new-row]\n  (let [original (frequencies (flatten row))\n        updated  (frequencies (flatten new-row))\n        higher   (->> updated\n                      (filter #(> (second %) (get original (first %))))\n                      (filter #(> (first %) 1)))]\n    (reduce (fn [acc [k v]] \n              (prn \"k: \" k \", v: \" v)\n              (let [ov (get original k 0)]\n                (+ acc (* k (- v ov)))))\n            0 higher)))\n\n(defn score [board new-board]\n  (reduce + (map (fn [row new-row] (score-row row new-row)) board new-board)))\n\n(defn merge-vector [row]\n  (loop [i 0\n         res []]\n    (if (>= i (count row))\n      (vec res)\n      (if (= (dec (count row)) i)\n        (recur (inc i) (conj res (nth row i)))\n        (if (= (nth row i) (nth row (inc i)))\n          (recur (+ 2 i) (conj res (* 2 (nth row i))))\n          (recur (inc i) (conj res (nth row i))))))))\n\n(defn update-2d-vector [v coord value]\n  (assoc-in v coord value))\n\n(defn get-empty-cells [board]\n  (let [xs (range 1 17)\n        cells (map cell-to-coord xs)]\n    (filter #(= 0 (get-in board %)) cells)))\n\n(defn add-random-value [possibilities board]\n  (let [number        (first (shuffle possibilities))\n        empty-cells   (get-empty-cells board)\n        random-cell   (first (shuffle empty-cells))]\n    (if (empty? empty-cells)\n      board\n      (update-2d-vector board random-cell number))))\n\n(defn add-random-if-moved [board new-board]\n  (if (= new-board board)\n    board\n    (->> new-board\n         (add-random-value [2 2 2 2 2 2 2 2 4])\n         (add-random-value [2 2 2 2 2 2 2 2 4]))))\n\n(defn debug [d]\n  (prn d)\n  d)\n\n(defn collapse-left [board]\n  (->> board\n       (mapv slide-left)\n       (mapv merge-vector)\n       (mapv (partial pad-left 4))))\n\n(defn collapse-right [board]\n  (->> board\n       (mapv reverse)\n       (mapv slide-left)\n       (mapv merge-vector)\n       (mapv (partial pad-left 4))\n       (mapv (comp vec reverse))))\n\n(defn collapse-down [board]\n  (->> board\n       (rotate-board)\n       (collapse-right)\n       (rotate-board)\n       (rotate-board)\n       (rotate-board)\n       (vec)))\n  \n(defn collapse-up [board]\n  (->> board\n       (rotate-board)\n       (collapse-left)\n       (rotate-board)\n       (rotate-board)\n       (rotate-board)\n       (vec)))\n\n(defn generate-board []\n  (let [board [[0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0]]]\n    (->> board\n         (add-random-value [2])\n         (add-random-value [2]))))\n\n(defn any-moves? [row]\n  (not= 4 (count (partition-by identity row))))\n\n(defn game-over? [board]\n  (and\n   (every? false? (map any-moves? board))\n   (every? false? (map any-moves? (rotate-board board)))))\n  \n(comment\n  \n  (let [board [[32  64   8   4]\n               [ 2   4  16   8]\n               [ 4   8  64   4]\n               [16   2  32  16]]]\n    (->> board\n         #_collapse-left\n         #_collapse-right\n         #_collapse-down\n         #_collapse-up\n         (add-random-value [2 2 2 2 2 2 2 2 4])\n         (add-random-value [2 2 2 2 2 2 2 2 4]))\n    \n\n    )\n  \n  [[0 4 0 4]   ;; 8\n   [0 4 0 0]   ;; 4\n   [4 2 2 2]   ;; 10\n   [0 2 4 4]]  ;; 10 = 32\n  \n  ;; slide down\n  \n  [[0 0 0 4]  ;; 4\n   [0 0 0 4]  ;; 4\n   [0 8 2 2]  ;; 12\n   [4 4 4 4]] ;; 16 = 36\n  \n  ;; score 8 + 4 = 12\n\n  ;; left\n  ;; [8 0 0 0]\n  ;; [4 0 0 0]\n  ;; [4 4 2 0]\n  ;; [2 8 0 0]\n\n  ;; right\n  ;; [0 0 0 8]\n  ;; [0 0 0 4]\n  ;; [0 4 2 4]\n  ;; [0 0 2 8]\n\n  ;; down\n  ;; [0 0 0 0]\n  ;; [0 0 0 4]\n  ;; [0 8 2 2]\n  ;; [4 4 4 4]\n\n  ;; up\n  ;; [4 8 2 4]\n  ;; [0 4 4 2]\n  ;; [0 0 0 4]\n  ;; [0 0 0 0]\n\n  [[2  0  0  0]\n   [2  0  0  2]\n   [8  2  4  0]\n   [16 8  4  0]]    ;; 86\n  \n  ;; slide down\n  [[0  0  0  0]\n   [4  0  0  0]\n   [8  2  0  0]\n   [16 8  8  2]]    ;; 98\n  \n    )\n  \n  "]}