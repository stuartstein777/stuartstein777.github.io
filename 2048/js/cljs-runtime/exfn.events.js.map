{"version":3,"sources":["exfn/events.cljs"],"mappings":";AAIA,AAAA,AAACA,AAEA,AAAKC,AAAEA;AAAP,AAAA,AAAA,AAAA,AAAA,AACe,AAACC;;AAGjB,AAAA,AAACF,AAEA,AAAKG,AAAGF;AAAR,AACME,AACA,AAAA,AAACC,AAAa,AAACF,AACf,AAAA,AAAA,AAACE,AACD,AAAA,AAAA,AAACA;;AAER,AAAA,AAAMC,AAAUC,AAAEC;AAAlB,AACOA,AAAAA,AACA,AAACD,AAAAA,AAAAA;;AAER,AAAA,AAACN,AAEA,AAAKG,AAAGF;AAAR,AACE,AAAMO,AAAU,AAACH,AAASI,AAAkB,AAAA,AAAQN;AAC9CO,AAAW,AAACC,AAAU,AAAA,AAAQR,AAAIK;AAClCI,AAAkB,AAACC,AAAwB,AAAA,AAAQV,AAAIK;AAF7D,AAGML,AACA,AAAA,AAACC,AAAaQ,AACd,AAAA,AAACR,AAAkB,AAACU,AAAeN,AACnC,AAAA,AAACO,AAAcC,AAAEN;;AAE1B,AAAA,AAACV,AAEA,AAAKG,AAAGF;AAAR,AACE,AAAMO,AAAU,AAACH,AAASY,AAAmB,AAAA,AAAQd;AAC/CO,AAAW,AAACC,AAAU,AAAA,AAAQR,AAAIK;AAClCI,AAAkB,AAACC,AAAwB,AAAA,AAAQV,AAAIK;AAF7D,AAGML,AACA,AAAA,AAACC,AAAaQ,AACd,AAAA,AAACR,AAAkB,AAACU,AAAeN,AACnC,AAAA,AAACO,AAAcC,AAAEN;;AAE1B,AAAA,AAACV,AAEA,AAAKG,AAAGF;AAAR,AACE,AAAMO,AAAU,AAACH,AAASa,AAAkB,AAAA,AAAQf;AAC9CO,AAAW,AAACC,AAAU,AAAA,AAAQR,AAAIK;AAClCI,AAAkB,AAACC,AAAwB,AAAA,AAAQV,AAAIK;AAF7D,AAGML,AACA,AAAA,AAACC,AAAaQ,AACd,AAAA,AAACR,AAAkB,AAACU,AAAeN,AACnC,AAAA,AAACO,AAAcC,AAAEN;;AAE1B,AAAA,AAACV,AAEA,AAAKG,AAAGF;AAAR,AACE,AAAMO,AAAU,AAACH,AAASc,AAAgB,AAAA,AAAQhB;AAC5CO,AAAW,AAACC,AAAU,AAAA,AAAQR,AAAIK;AAClCI,AAAkB,AAACC,AAAwB,AAAA,AAAQV,AAAIK;AAF7D,AAGML,AACA,AAAA,AAACC,AAAaQ,AACd,AAAA,AAACR,AAAkB,AAACU,AAAeN,AACnC,AAAA,AAACO,AAAcC,AAAEN","names":["re_frame.core.reg_event_db","_","exfn.logic/generate-board","db","cljs.core.assoc","exfn.events/collapse","f","board","new-board","exfn.logic/collapse-left","turn-score","exfn.logic/score","board-with-random","exfn.logic/add-random-if-moved","exfn.logic/game-over?","cljs.core.update","cljs.core/+","exfn.logic/collapse-right","exfn.logic/collapse-down","exfn.logic/collapse-up"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as lgc]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:board      (lgc/generate-board)\n    :game-over? false}))\n\n(rf/reg-event-db\n :restart\n (fn [db _]\n   (-> db\n       (assoc :board (lgc/generate-board))\n       (assoc :game-over? false)\n       (assoc :score 0))))\n\n(defn collapse [f board]\n  (->> board\n       (f)))\n\n(rf/reg-event-db\n :slide-up\n (fn [db _]\n   (let [new-board (collapse lgc/collapse-left (:board db))\n         turn-score (lgc/score (:board db) new-board)\n         board-with-random (lgc/add-random-if-moved (:board db) new-board)]\n     (-> db\n         (assoc :board board-with-random)\n         (assoc :game-over? (lgc/game-over? new-board))\n         (update :score + turn-score)))))\n\n(rf/reg-event-db\n :slide-down\n (fn [db _]\n   (let [new-board (collapse lgc/collapse-right (:board db))\n         turn-score (lgc/score (:board db) new-board)\n         board-with-random (lgc/add-random-if-moved (:board db) new-board)]\n     (-> db\n         (assoc :board board-with-random)\n         (assoc :game-over? (lgc/game-over? new-board))\n         (update :score + turn-score)))))\n\n(rf/reg-event-db\n :slide-right\n (fn [db _]\n   (let [new-board (collapse lgc/collapse-down (:board db))\n         turn-score (lgc/score (:board db) new-board)\n         board-with-random (lgc/add-random-if-moved (:board db) new-board)]\n     (-> db\n         (assoc :board board-with-random)\n         (assoc :game-over? (lgc/game-over? new-board))\n         (update :score + turn-score)))))\n\n(rf/reg-event-db\n :slide-left\n (fn [db _]\n   (let [new-board (collapse lgc/collapse-up (:board db))\n         turn-score (lgc/score (:board db) new-board)\n         board-with-random (lgc/add-random-if-moved (:board db) new-board)]\n     (-> db\n         (assoc :board board-with-random)\n         (assoc :game-over? (lgc/game-over? new-board))\n         (update :score + turn-score)))))\n\n"]}