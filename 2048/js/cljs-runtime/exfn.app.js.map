{"version":3,"sources":["exfn/app.cljs"],"mappings":";AAYA,AAAA,AAAMA;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAIH,AAAA,AAAMC,AAAgBC;AAAtB,AACE,AACE,AAAA,AAACC,AAAID;AADP;;AAAA,AAEE,AAAA,AAACC,AAAID;AAFP;;AAAA,AAGE,AAAA,AAACC,AAAID;AAHP;;AAAA,AAIE,AAAA,AAACC,AAAKD;AAJR;;AAAA,AAKE,AAAA,AAACC,AAAKD;AALR;;AAAA,AAME,AAAA,AAACC,AAAKD;AANR;;AAAA,AAOE,AAAA,AAACC,AAAMD;AAPT;;AAAA,AAQE,AAAA,AAACC,AAAMD;AART;;AAAA,AASE,AAAA,AAACC,AAAMD;AATT;;AAAA,AAUE,AAAA,AAACC,AAAOD;AAVV;;AAAA,AAWE,AAAA,AAACC,AAAOD;AAXV;;AAAA,AAAA;;;;;;;;;;;;;;AAgBF,AAAA,AAAME;AAAN,AACE,AAAA,AAAAC,AAAMC,AAAO,AAAA,AAAA,AAACC;AAAd,AAAAF,AACMG,AAAY,AAAA,AAAA,AAACD;AADnB,AAAAF,AAEMI,AAAO,AAAA,AAAA,AAACF;AAFd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAmBY,AAAA,AAAcE,AAGnB,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA44E0C,AAAA+C,AAAApD;AA54E1CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAOY;AAAP,AAAAV,AAAAF,AAAA,AAAA,AAAWa;AAAX,AAAA,AAAA,AAAAV,AAAAN,AAAA,AAAA,AAAA,AAAA,AAES,AAAA,AAAYgB,AAClB,AAAAzB,AAAA;AAAA6B;AAAA,AAAA,AAAA3B,AAAA,AAAA;;AAAA,AAAA,AAAA2B,AAAAA;;AAAA,AAAA,AAAA1B,AAAA,AAAAC,AAAAyB;AAAA,AAAA,AAAA1B;AAAA,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA,AAAAE,AAAAwB;AAAA,AAAAvB,AAy4EuC,AAAA+C,AAAAxB;AAz4EvCtB,AAAA,AAAAC,AAAAF;AAAAwB,AAAA,AAAApB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAwB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAxB;AAAA,AAAAyB,AAAA,AAAAnB,AAAAP,AAAAyB;AAAA,AAAAjB,AAAAkB,AAAA,AAAA,AAAOS;AAAP,AAAA3B,AAAAkB,AAAA,AAAA,AAAYU;AAAZ,AAAA,AAAA,AAAA3B,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAAA,AAAaW,AACd,AAAA,AAAA,AAAgBhB,AAAaiB,AACE,AAACnD,AAAekD,AAEpC,AAAA,AAAA,AAAiBjB,AAAaiB,AAC/C,AAAA,AAAA,AAAM,AAAA,AAACE,AAAOF,AACZA;;AARN,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAf,AAAA,AAAAC,AAAAa,AAAA,AAAAG,AAAA,AAAAd,AAAAU;;AAAA,AAAAb,AAAA,AAAAC,AAAAa,AAAA;;;AAAA,AAAAI,AAAA,AAAAb,AAAAQ;AAAA,AAAAf,AAAAoB,AAAA,AAAA,AAAOO;AAAP,AAAA3B,AAAAoB,AAAA,AAAA,AAAYQ;AAAZ,AAAA,AAAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAW,AAAA,AAAAV,AAAAM,AAEW,AAAA,AAAaY,AACd,AAAA,AAAA,AAAgBhB,AAAaiB,AACE,AAACnD,AAAekD,AAEpC,AAAA,AAAA,AAAiBjB,AAAaiB,AAC/C,AAAA,AAAA,AAAM,AAAA,AAACE,AAAOF,AACZA;;;AARN;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAzC,AAAkB,AAAC0B,AAAIC,AAAOH,AAAI,AAACI;;;AAHtC,AAAA,AAAAjB,AAAA;;;;AAAA;;;;;AAAA,AAAAK,AAAA,AAAAC,AAAAR,AAAA,AAAAS,AAAA,AAAAC,AAAAlB;;AAAA,AAAAe,AAAA,AAAAC,AAAAR,AAAA;;;AAAA,AAAAW,AAAA,AAAAC,AAAApB;AAAA,AAAAa,AAAAM,AAAA,AAAA,AAAOI;AAAP,AAAAV,AAAAM,AAAA,AAAA,AAAWK;AAAX,AAAA,AAAAH,AAAA,AAAA,AAAA,AAAA,AAES,AAAA,AAAYG,AAClB,AAAAzB,AAAA;AAAAmC;AAAA,AAAA,AAAAjC,AAAA,AAAA;AAAA,AAAA,AAAAiC,AAAAA;;AAAA,AAAA,AAAAhC,AAAA,AAAAC,AAAA+B;AAAA,AAAA,AAAAhC;AAAA,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAA,AAAAE,AAAA8B;AAAA,AAAA7B,AAy4EuC,AAAA+C,AAAAlB;AAz4EvC5B,AAAA,AAAAC,AAAAF;AAAA8B,AAAA,AAAA1B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA8B,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA9B;AAAA,AAAA+B,AAAA,AAAAzB,AAAAP,AAAA+B;AAAA,AAAAvB,AAAAwB,AAAA,AAAA,AAAOG;AAAP,AAAA3B,AAAAwB,AAAA,AAAA,AAAYI;AAAZ,AAAA,AAAA,AAAA3B,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAAA,AAAaK,AACd,AAAA,AAAA,AAAgBhB,AAAaiB,AACE,AAACnD,AAAekD,AAEpC,AAAA,AAAA,AAAiBjB,AAAaiB,AAC/C,AAAA,AAAA,AAAM,AAAA,AAACE,AAAOF,AACZA;;AARN,AAAA,AAAAJ,AAAA;;;;AAAA;;;;;AAAA,AAAArB,AAAA,AAAAC,AAAAmB,AAAA,AAAAG,AAAA,AAAApB,AAAAgB;;AAAA,AAAAnB,AAAA,AAAAC,AAAAmB,AAAA;;;AAAA,AAAAI,AAAA,AAAAnB,AAAAc;AAAA,AAAArB,AAAA0B,AAAA,AAAA,AAAOC;AAAP,AAAA3B,AAAA0B,AAAA,AAAA,AAAYE;AAAZ,AAAA,AAAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAiB,AAAA,AAAAhB,AAAAY,AAEW,AAAA,AAAaM,AACd,AAAA,AAAA,AAAgBhB,AAAaiB,AACE,AAACnD,AAAekD,AAEpC,AAAA,AAAA,AAAiBjB,AAAaiB,AAC/C,AAAA,AAAA,AAAM,AAAA,AAACE,AAAOF,AACZA;;;AARN;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAzC,AAAkB,AAAC0B,AAAIC,AAAOH,AAAI,AAACI;AAHtC,AAAAV,AAAA,AAAAK,AAAAtB;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAgB,AAAC0B,AAAIC,AAAO/B,AAAM,AAACgC;AAtB1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAqCoB,AAAA,AAAA,AAACgB;AArCrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA0CyB,AAAA,AAAA,AAAI9C;;AAS/B,AAAA,AAAuB+C;AAAvB,AAEE,AAAA,AAACC,AAAYpD,AACD,AAAA,AAAiBqD;;AAE/B,AAAA,AAAeC;AAAf,AACE,AAACH;;AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD;;AA0BD,AAACvD;;;AAGH,AAAA,AAAA4D,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAAA,AAAC9D;;AAErB","names":["exfn.app/setup-key-capture","re-frame.core/dispatch-sync","exfn.app/get-cell-color","v","cljs.core._EQ_","exfn.app/app","cljs.core/deref","board","re_frame.core.subscribe","game-over?","score","iter__4529__auto__","s__33996","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__33998","cljs.core/chunk-buffer","i__33997","vec__33999","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33995","cljs.core/chunk-rest","vec__34012","cljs.core/first","cljs.core/cons","cljs.core/rest","row","key","cljs.core.map","cljs.core/vector","cljs.core.range","s__34003","b__34005","i__34004","vec__34006","iter__34002","vec__34009","s__34016","b__34018","i__34017","vec__34019","iter__34015","vec__34022","cell","keyc","cljs.core.not_EQ_","re-frame.core/dispatch","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\n  (:import goog.History)\n  (:require [reagent.dom :as dom]\n            [reagent.core :as rcore]\n            [re-frame.core :as rf]\n            [exfn.subscriptions]\n            [exfn.events]\n            [re-pressed.core :as rp]\n            [goog.events :as gevents]\n            [goog.history.EventType :as EventType]\n            [goog.string.format]))\n\n(defn setup-key-capture []\n  (rf/dispatch-sync [::rp/add-keyboard-event-listener \"keyup\" :clear-on-success-event-match true]))\n\n;; -- UI Logic --------------------------------------------------------------------\n\n(defn get-cell-color [v]\n  (cond\n    (= 2 v) \"#EEE4DA\"\n    (= 4 v) \"#EDE0C8\"\n    (= 8 v) \"#F2B178\"\n    (= 16 v) \"#F59563\"\n    (= 32 v) \"#F67C5F\"\n    (= 64 v) \"#F65E3B\"\n    (= 128 v) \"#EDCF72\"\n    (= 256 v) \"#EDCC61\"\n    (= 512 v) \"#EDC850\"\n    (= 1024 v) \"#EDC53F\"\n    (= 2048 v) \"#EDC22E\"\n    :else \"rgba(238,228,218,.35)\"))\n\n;; -- App -------------------------------------------------------------------------\n\n(defn app []\n  (let [board @(rf/subscribe [:board])\n        game-over? @(rf/subscribe [:game-over?])\n        score @(rf/subscribe [:score])]\n      [:div.container\n       [:div.row\n        [:div.col.col-lg-8\n         [:h1 \"2048\"]]\n        [:div.col.col-lg-4 {:style {:text-align    :right\n                                    :padding-right 50}}\n         [:i.fab.fa-github]\n         [:a {:href  \"https://github.com/stuartstein777/sudoku\"\n              :style {:text-decoration :none}}\n          \" (repo) \"]\n         \"|\"\n         [:a {:href  \"https://stuartstein777.github.io/\"\n              :style {:text-decoration :none}}\n          \" other projects\"]]]\n       [:div.row\n        [:div.col.col-lg-4\n         [:h3 (str \"Score \" score)]]]\n       [:div.row\n        [:div.board\n         (for [[row key] (map vector board (range))]\n           [:div.row\n            {:key (str \"row-\" key)}\n            (for [[cell keyc] (map vector row (range))]\n              [:div\n               {:class (str \"cell-\" cell)\n                :key  (str \"div-row-\" key \"-cell-\" keyc)}\n               [:div.cell {:style {:background-color (get-cell-color cell)\n                                   :font-size \"50px\"}\n                           :key  (str \"cell-row-\" row \"-cell-\" cell)}\n                (when (not= 0 cell)\n                  cell)]])])]]\n       [:div.row\n        [:div.col.col-lg-4\n         [:btn.btn.btn-primary\n          {:on-click #(rf/dispatch [:restart])\n           :style {:margin-top 20\n                   :width    100}}\n          \"Restart\"]]\n        [:div.col.col-lg-8\n         {:style {:display (if game-over? :block :none)}}\n         #_{:style {:display (if game-over?\n                             :block\n                             :none)}}\n         [:h1 \"Game Over\"]]]]))\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (start)\n  (rf/dispatch\n   [::rp/set-keyup-rules\n    {:event-keys [[[:slide-left] ;; left arrow or a\n                   [{:keyCode 37}]]\n  \n                  [[:slide-right] ;; right arrow or d\n                   [{:keyCode 39}]]\n  \n                  [[:slide-down] ;; down arrow or s\n                   [{:keyCode 40}]]\n  \n                  [[:slide-up] ;; up arrow or w\n                   [{:keyCode 38}]]]\n  \n     :clear-keys [;; escape\n                  [{:keyCode 27}]\n                          ;; ctrl+g\n                  [{:keyCode 71\n                    :ctrlKey true}]]\n  \n     :prevent-default-keys [;; ctrl+g\n                            {:keyCode 71\n                             :ctrlKey true}]\n  \n     :always-listen-keys [;; enter\n                          {:keyCode 13}]}])\n  (setup-key-capture))\n\n; dispatch the event which will create the initial state. \n(defonce initialize (rf/dispatch-sync [:initialize]))\n\n(comment\n  (rf/dispatch-sync [:slide-right])\n\n\n\n\n\n\n\n  )"]}