{"version":3,"sources":["re_pressed/impl.cljs"],"mappings":"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","names":["re-pressed.impl/ns-root","re-pressed.impl/max-record","re-pressed.impl/modifier-keys","re-pressed.impl/->ns-keyword","event-type","re_pressed$impl$__GT_ns_keyword_$_ns_keyword","suffix","cljs.core.keyword","re-pressed.impl/is-key?","recent-key","key-map","cljs.core/every?","p__29803","vec__29804","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core.get","re-pressed.impl/register-subs","ns-keyword","re_frame.core.reg_sub","db","_","cljs.core.get_in","re-pressed.impl/->set-key!","p__29807","p__29808","map__29809","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","vec__29810","cljs.core.update_in","key-maps","keys","cljs.core.conj","or__4126__auto__","cljs.core.into","cljs.core/take-last","re-pressed.impl/->clear-keys!","p__29814","p__29815","map__29816","vec__29817","cljs.core/assoc-in","p__29821","vec__29822","re-pressed.impl/prevent-default-keys!","e","re-pressed.impl/register-events","re_frame.core.reg_event_fx","re-pressed.impl/register-effects","re-frame.core/reg-fx","p__29830","map__29831","arguments","map__29833","clear-on-success-event-match","goog.events/listen","js/document","cljs.core/deref","e-key","modifier-key?","tag-name","entering-input?","cljs.core/contains?","hit-key","always-listen-keys","re_frame.core.subscribe","always-listen?","p1__29825#","cljs.core/some","cljs.core/not","re-frame.core/dispatch-sync","vec__29835","recent-keys","event-keys","clear-keys","cljs.core/last","is-key-sequence?","cljs.core/true?","p1__29826#","p2__29827#","cljs.core.mapv","cljs.core.concat","cljs.core/reverse","cljs.core.repeat","check-events","cljs.core.doall","iter__4529__auto__","s__29839","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__29841","cljs.core/chunk-buffer","i__29840","vec__29842","cljs.core/-nth","seq__29843","first__29844","cljs.core/first","cljs.core/next","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29838","cljs.core/chunk-rest","vec__29845","seq__29846","first__29847","cljs.core/cons","cljs.core/rest","trigger-event","ks","triggered?","cljs.core/PersistentVector","triggered-event","event?","G__29848","p1__29828#","cljs.core.filter","cljs.core/second","clear?","prevent-default-keys","prevent-default?","p1__29829#","cljs.core/chunk-first"],"sourcesContent":["(ns re-pressed.impl\n  (:require\n   [re-frame.core :as rf]\n   [goog.events :as ev]\n   ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Vars\n\n(def ns-root \"re-pressed.core/\")\n\n(def max-record 25)\n\n(def modifier-keys #{16 ;; shift\n                     17 ;; ctrl\n                     18 ;; alt\n                     91 ;; windows (i.e. meta) ... TODO: apple key?\n                     })\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Util\n\n(defn ->ns-keyword [event-type]\n  (fn ns-keyword\n    ([]\n     (ns-keyword nil))\n    ([suffix]\n     (keyword\n      (str ns-root\n           event-type\n           suffix)))))\n\n\n(defn is-key?\n  [recent-key key-map]\n  (every? (fn [[k v]]\n            (= (get recent-key k)\n               v))\n          key-map))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Subs\n\n(defn register-subs [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (rf/reg-sub\n     (ns-keyword \"-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-event-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :event-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-clear-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :clear-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-always-listen-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :always-listen-keys])))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-sub\n       (ns-keyword \"-prevent-default-keys\")\n       (fn [db _]\n         (get-in db [(ns-keyword) :prevent-default-keys]))))\n    ))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Events\n\n(defn- ->set-key! [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn set-key!\n      [{:keys [db]} [_ key-map]]\n      {:db (update-in db [(ns-keyword) :keys]\n                      (fn [key-maps]\n                        (let [keys (if key-map\n                                     (conj (or key-maps\n                                               [])\n                                           key-map)\n                                     key-maps)]\n                          keys\n                          (into []\n                                (take-last max-record keys)))))})))\n\n(defn- ->clear-keys! [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn clear-keys!\n      [{:keys [db]} [_ key-map]]\n      {:db (assoc-in db [(ns-keyword)\n                         :keys] [])})))\n\n\n(defn prevent-default-keys!\n  [_ [_ e]]\n  (let [k (keyword\n           (str ns-root \"prevent-default\"))]\n    {k e}))\n\n\n(defn register-events [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n\n    (rf/reg-event-fx  (ns-keyword \"-set-key\")\n                      (->set-key! event-type))\n\n    (rf/reg-event-fx (ns-keyword \"-clear-keys\")\n                     (->clear-keys! event-type))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-event-fx (ns-keyword \"-prevent-default-keys\")\n                       prevent-default-keys!))))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Effects\n\n(defn register-effects [event-type]\n  (when (= \"keydown\" event-type)\n    (rf/reg-fx\n     (keyword\n      (str ns-root \"prevent-default\"))\n     (fn [e]\n       (.preventDefault e)))))\n\n\n(rf/reg-fx\n (keyword\n  (str ns-root \"keyboard-event\"))\n\n (fn [{:keys [event-type arguments]}]\n   (register-subs event-type)\n   (register-events event-type)\n   (register-effects event-type)\n\n   (let [{:keys [clear-on-success-event-match]} arguments]\n     (ev/listen\n      js/document\n      event-type\n      (fn [e]\n        (let [ns-keyword (->ns-keyword event-type)\n\n              e-key         (.-keyCode e)\n              modifier-key? (modifier-keys e-key)\n\n              ;; --\n              ;; thanks re-frame-10x for this snippet\n              tag-name        (.-tagName (.-target e))\n              entering-input? (contains?\n                               #{\"INPUT\"\n                                 \"SELECT\"\n                                 \"TEXTAREA\"} tag-name)\n              ;; --\n\n              hit-key {:altKey   (.-altKey e)\n                       :ctrlKey  (.-ctrlKey e)\n                       :metaKey  (.-metaKey e)\n                       :shiftKey (.-shiftKey e)\n                       :keyCode  (.-keyCode e)}\n\n              always-listen-keys @(rf/subscribe [(ns-keyword \"-always-listen-keys\")])\n              always-listen?     (some #(is-key? hit-key %) always-listen-keys)]\n\n          (when (or (and (not modifier-key?)\n                         (not entering-input?))\n                    always-listen?)\n            (rf/dispatch-sync [(ns-keyword \"-set-key\") hit-key])\n            (let [recent-keys @(rf/subscribe [(ns-keyword \"-keys\")])\n                  event-keys  @(rf/subscribe [(ns-keyword \"-event-keys\")])\n                  clear-keys  @(rf/subscribe [(ns-keyword \"-clear-keys\")])\n\n                  recent-key (last recent-keys)\n\n                  is-key-sequence? (fn [key-maps]\n                                     (every? true?\n                                             (mapv\n                                              #(is-key? %1 %2)\n                                              (concat (reverse recent-keys)\n                                                      (repeat max-record {}))\n                                              (reverse key-maps))))\n\n                  check-events (doall\n                                (for [[trigger-event\n                                       & ks] event-keys]\n                                  (let [triggered? (some is-key-sequence? ks)]\n                                    (vector trigger-event triggered?))))\n\n                  [triggered-event\n                   event?] (some->> check-events\n                                    (filter #(true? (second %)))\n                                    first)\n\n                  clear? (some is-key-sequence? clear-keys)]\n              (when (= \"keydown\" event-type)\n                (let [prevent-default-keys @(rf/subscribe [(ns-keyword \"-prevent-default-keys\")])\n                      prevent-default?     (some #(is-key? recent-key %) prevent-default-keys)]\n                  (when prevent-default?\n                    (rf/dispatch-sync [(ns-keyword \"-prevent-default-keys\")\n                                       e]))))\n\n              (cond\n                clear?\n                (rf/dispatch-sync [(ns-keyword \"-clear-keys\")])\n\n                event?\n                (do\n                  (when clear-on-success-event-match\n                    (rf/dispatch-sync [(ns-keyword \"-clear-keys\")]))\n                  (rf/dispatch-sync (conj triggered-event\n                                          e\n                                          recent-keys)))\n\n                :else nil)))))))))\n"]}