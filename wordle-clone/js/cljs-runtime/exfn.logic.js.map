{"version":3,"sources":["exfn/logic.cljs"],"mappings":";;;AAGA,AAAA,AAAMA,AAA8BC;AAApC,AACE,AAAMC,AAASD,AAAQE,AAAK,AAAA,AAACC,AAAMC;AAAnC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACK,AAAA,AAAK,AAAA,AAAO,AAAG,AAAA,AAAA,AAACJ,AAAAA,AAAAA,AAAWC,AAC3B,AAAA,AAAK,AAAA,AAAO,AAAG,AAAA,AAAA,AAACD,AAAAA,AAAAA,AAAWC,AAC3B,AAAA,AAAK,AAAA,AAAO,AAAG,AAAA,AAAA,AAACD,AAAAA,AAAAA,AAAWC,AAC3B,AAAA,AAAK,AAAA,AAAO,AAAG,AAAA,AAAA,AAACD,AAAAA,AAAAA,AAAWC,AAC3B,AAAA,AAAK,AAAA,AAAO,AAAG,AAAA,AAAA,AAACD,AAAAA,AAAAA,AAAWC,AAC3B,AAAA,AAAK,AAAA,AAAO,AAAG,AAAA,AAAA,AAACD,AAAAA,AAAAA,AAAWC;;AAElC,AAAA,AAAMI,AAAiBC;AAAvB,AACE,AAAA,AAAgB,AAACH,AAAMI,AAAI,AAACL,AAAK,AAAAM,AAAC,AAAA,AAAKF;AAAN,AAAA,AAAAE,AAAAA,AAAA,AAAAA,AAAA;AAAjC,AAAA,AACgB,AAACL,AAAMI,AAAI,AAACL,AAAK,AAAAO,AAAC,AAAA,AAAKH;AAAN,AAAA,AAAAG,AAAAA,AAAA,AAAAA,AAAA;AADjC,AAAA,AAEgB,AAACN,AAAMI,AAAI,AAACL,AAAK,AAAAQ,AAAC,AAAA,AAAKJ;AAAN,AAAA,AAAAI,AAAAA,AAAA,AAAAA,AAAA;AAFjC,AAAA,AAGgB,AAACP,AAAMI,AAAI,AAACL,AAAK,AAAAS,AAAC,AAAA,AAAKL;AAAN,AAAA,AAAAK,AAAAA,AAAA,AAAAA,AAAA;AAHjC,AAAA,AAIgB,AAACR,AAAMI,AAAI,AAACL,AAAK,AAAAU,AAAC,AAAA,AAAKN;AAAN,AAAA,AAAAM,AAAAA,AAAA,AAAAA,AAAA;AAJjC,AAAA,AAKgB,AAACT,AAAMI,AAAI,AAACL,AAAK,AAAAW,AAAC,AAAA,AAAKP;AAAN,AAAA,AAAAO,AAAAA,AAAA,AAAAA,AAAA;AALjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMuB,AAAA,AAAA,AAAA,AAAIP,AACR,AAAA,AAAA,AAAA,AAAIA,AACV,AAAA,AAAA,AAAA,AAAIA,AACF,AAAA,AAAA,AAAA,AAAIA,AACJ,AAAA,AAACQ,AAAa,AAAA,AAAA,AAAA,AAAA,AAAIR,AAAiCJ","names":["exfn.logic/guess-distribution-histogram","guesses","max","cljs.core/vals","cljs.core.apply","cljs.core/max","exfn.logic/generate-cookie","stats-and-guesses","cljs.core/str","fexpr__29978","fexpr__29979","fexpr__29980","fexpr__29981","fexpr__29982","fexpr__29983","str/join"],"sourcesContent":["(ns exfn.logic\n  (:require [clojure.set :as set]))\n\n(defn guess-distribution-histogram [guesses]\n  (let [max (->> guesses vals (apply max))]\n    {1 (int (* 250 (/ (guesses 1) max)))\n     2 (int (* 250 (/ (guesses 2) max)))\n     3 (int (* 250 (/ (guesses 3) max)))\n     4 (int (* 250 (/ (guesses 4) max)))\n     5 (int (* 250 (/ (guesses 5) max)))\n     6 (int (* 250 (/ (guesses 6) max)))}))\n\n(defn generate-cookie [stats-and-guesses]\n  (str \"guess-1=\" (apply str (vals ((->> stats-and-guesses :guesses) 1))) \";\"\n       \"guess-2=\" (apply str (vals ((->> stats-and-guesses :guesses) 2))) \";\"\n       \"guess-3=\" (apply str (vals ((->> stats-and-guesses :guesses) 3))) \";\"\n       \"guess-4=\" (apply str (vals ((->> stats-and-guesses :guesses) 4))) \";\"\n       \"guess-5=\" (apply str (vals ((->> stats-and-guesses :guesses) 5))) \";\"\n       \"guess-6=\" (apply str (vals ((->> stats-and-guesses :guesses) 6))) \";\"\n       \"current-streak=\" (-> stats-and-guesses :stats :current-streak)\n       \"max-streak=\" (-> stats-and-guesses :stats :max-streak)\n       \"wins=\" (-> stats-and-guesses :stats :wins)\n       \"played=\" (-> stats-and-guesses :stats :wins)\n       \"solves=\" (str/join \",\" (-> stats-and-guesses :stats :solves vals))\n       \"expires=Fri, 31 Dec 2100 12:00:00 UTC; path=/\"))"]}