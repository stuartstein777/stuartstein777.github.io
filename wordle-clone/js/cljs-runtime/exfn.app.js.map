{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/display-message","cljs.core/deref","error","re_frame.core.subscribe","game-state","current-row","num-of-guesses","word","cljs.core._EQ_","exfn.app/guess-background","col","row","guesses","row-guess","and__4115__auto__","G__29372","fexpr__29371","cljs.core/set","cljs.core.nth","exfn.app/guess-row","current-col","rows","row-no","iter__4529__auto__","s__29374","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__29376","cljs.core/chunk-buffer","i__29375","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29373","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","n","cljs.core.range","cljs.core.not_EQ_","cljs.core.get_in","cljs.core.keyword","exfn.app/get-key-bg","guessed-letters","key","exfn.app/keyboard-row","keys","s__29378","b__29380","i__29379","iter__29377","letter","clojure.string.split","re-frame.core/dispatch","exfn.app/app","s__29382","b__29384","i__29383","iter__29381","exfn.app/start","re-frame.core/clear-subscription-cache!","reagent.dom.render","js/document","exfn.app/init","js/window","gfg","re-frame.core/dispatch-sync","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\n  (:require [reagent.dom :as dom]\n            [re-frame.core :as rf]\n            [exfn.subscriptions]\n            [clojure.string :as str]\n            [exfn.events]\n            [exfn.logic :as ms]\n            [goog.string.format]\n            [re-pressed.core :as rp]))\n\n(defn display-message []\n  (let [error @(rf/subscribe [:error])\n        game-state @(rf/subscribe [:game-state])\n        current-row @(rf/subscribe [:current-row])\n        num-of-guesses (dec current-row)\n        word @(rf/subscribe [:word])]\n    [:div.invalid-word-error\n     (cond\n       error\n       {:data-error error}\n\n       (= game-state :won)\n       {:data-win (= game-state :won)}\n\n       (= game-state :lost)\n       {:data-lost (= game-state :lost)})\n     (cond\n       error\n       \"Not in word list!\"\n\n       (= game-state :lost)\n       word\n       \n       (and (= game-state :won) (= num-of-guesses 1))\n       \"Genuis!\"\n\n       (and (= game-state :won) (= num-of-guesses 2))\n       \"Magnificient!\"\n\n       (and (= game-state :won) (= num-of-guesses 3))\n       \"Impressive!\"\n\n       (and (= game-state :won) (= num-of-guesses 4))\n       \"Splendid!\"\n\n       (and (= game-state :won) (= num-of-guesses 5))\n       \"Great!\"\n\n       (and (= game-state :won) (= num-of-guesses 6))\n       \"Phew!\")]))\n\n(defn guess-background [col row]\n  (let [word        @(rf/subscribe [:word])\n        current-row @(rf/subscribe [:current-row])\n        guesses     @(rf/subscribe [:guesses])\n        row-guess   (guesses row)]\n    (if (> current-row row)\n      (if (and row-guess ((set word) (row-guess col)))\n        (if (= (nth word (dec col)) (row-guess col))\n          \"#538d4e\"\n          \"#b59f3b\")\n        \"#3a3a3c\")\n      \"#121213\")))\n\n(defn guess-row [current-row current-col rows error row-no game-state]\n  [:div.row {:style {:justify-content :center}}\n   (for [n (range 1 6)]\n     [:div.letter-cell\n      {:data-filled (and (= n current-col)\n                         (= row-no current-row)\n                         (not= \"\" (get-in rows [row-no n])))\n       :data-error (and error (= current-row row-no))\n       :data-guessed (= 1 (- current-row row-no))\n       \n       (keyword (str \"data-won\" n))\n       (and (= 1 (- current-row row-no)) (= game-state :won))\n       \n       :style {:background-color (guess-background n row-no)}\n       :key (str row-no \"-\" n)}\n      (get-in rows [row-no n])])])\n\n(defn get-key-bg [guessed-letters key]\n  (if (guessed-letters key)\n    \"#3a3a3c\"\n    \"#818384\"))\n\n(defn keyboard-row [keys]\n  (let [guessed-letters @(rf/subscribe [:guessed-letters])]\n    [:div.keyboard-row\n     (for [letter (str/split keys #\"-\")]\n       [:div.keyboard-key {:on-click #(rf/dispatch [:clicked letter])\n                           :style {:background-color (get-key-bg guessed-letters letter)}\n                           :key letter} letter])]))\n\n;; -- App -------------------------------------------------------------------------\n(defn app []\n  (let [rows  @(rf/subscribe [:guesses])\n        error @(rf/subscribe [:error])\n        current-row @(rf/subscribe [:current-row])\n        current-col @(rf/subscribe [:current-col])\n        game-state @(rf/subscribe [:game-state])]\n    [:div.container\n     [:div.game\n      [display-message]\n      [:div.row\n       [:div.col.col-lg-8\n        [:h1 \"Wordle\"]]\n       [:div.col.col-lg-4\n        #_[:i.fas.fa-cubes.stats]]]\n      [:div.row.guesses\n       (for [n (range 1 7)]\n         [guess-row current-row current-col rows error n game-state])]\n      [:div.keyboard\n       [keyboard-row \"Q-W-E-R-T-Y-U-I-O-P\"]\n       [keyboard-row \"A-S-D-F-G-H-J-K-L\"]\n       [keyboard-row \"ENTER-Z-X-C-V-B-N-M-DEL\"]]]]))\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (rf/clear-subscription-cache!)\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (set! (.-onkeydown js/window)\n        (fn [gfg]\n          (rf/dispatch-sync [:key-pressed (.-keyCode gfg)])))\n  (start))\n\n; dispatch the event which will create the initial state. \n(defonce initialize (rf/dispatch-sync [:initialize]))"]}