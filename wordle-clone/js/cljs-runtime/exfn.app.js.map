{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/display-message","cljs.core/deref","error","re_frame.core.subscribe","game-state","current-row","num-of-guesses","word","cljs.core._EQ_","exfn.app/histogram-row","n","solves","stats","cljs.core.get","exfn.app/stats-view","stats-visible","re-frame.core/dispatch-sync","exfn.logic/guess-distribution-histogram","iter__4529__auto__","s__31382","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__31384","cljs.core/chunk-buffer","i__31383","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31381","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","exfn.app/guess-background","col","row","guesses","row-guess","and__4115__auto__","G__31386","fexpr__31385","cljs.core/set","cljs.core.nth","exfn.app/guess-row","current-col","rows","row-no","s__31388","b__31390","i__31389","iter__31387","cljs.core.not_EQ_","cljs.core.get_in","cljs.core.keyword","exfn.app/get-key-bg","guessed-letters","correct-letters","key","fexpr__31391","fexpr__31392","exfn.app/keyboard-row","keys","s__31394","b__31396","i__31395","iter__31393","letter","clojure.string.split","re-frame.core/dispatch","exfn.app/new-game-row","pred__31397","expr__31398","js/Error","cljs.core/=","exfn.app/app","s__31401","b__31403","i__31402","iter__31400","exfn.app/start","re-frame.core/clear-subscription-cache!","reagent.dom.render","js/document","exfn.app/init","js/window","gfg","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\n  (:require [reagent.dom :as dom]\n            [re-frame.core :as rf]\n            [exfn.subscriptions]\n            [clojure.string :as str]\n            [exfn.events]\n            [exfn.logic :as lgc]\n            [goog.string.format]))\n\n(defn display-message []\n  (let [error @(rf/subscribe [:error])\n        game-state @(rf/subscribe [:game-state])\n        current-row @(rf/subscribe [:current-row])\n        num-of-guesses (dec current-row)\n        word @(rf/subscribe [:word])]\n    [:div.invalid-word-error\n     (cond\n       error\n       {:data-error error}\n\n       (= game-state :won)\n       {:data-win (= game-state :won)}\n\n       (= game-state :lost)\n       {:data-lost (= game-state :lost)})\n     (cond\n       error\n       \"Not in word list!\"\n\n       (= game-state :lost)\n       word\n       \n       (and (= game-state :won) (= num-of-guesses 1))\n       \"Genuis!\"\n\n       (and (= game-state :won) (= num-of-guesses 2))\n       \"Magnificient!\"\n\n       (and (= game-state :won) (= num-of-guesses 3))\n       \"Impressive!\"\n\n       (and (= game-state :won) (= num-of-guesses 4))\n       \"Splendid!\"\n\n       (and (= game-state :won) (= num-of-guesses 5))\n       \"Great!\"\n\n       (and (= game-state :won) (= num-of-guesses 6))\n       \"Phew!\")]))\n\n(defn histogram-row [n solves stats]\n  [:div.row {:style {:width \"100%\"}}\n   [:div.col.col-lg-2 n]\n   [:div.col.col-lg-10\n    [:div.histogram-bar\n     {:style {:width (solves n)\n              :background-color (if (> (solves n) 0) \"#538d4e\" \"#3a3a3c\")}}\n     (get (stats :solves) n)]]])\n\n(defn stats-view []\n  (let [stats @(rf/subscribe [:stats])\n        stats-visible @(rf/subscribe [:stats-visible])]\n    [:div.stats-view\n     {:style {:visibility (if stats-visible :visible :hidden)}}\n     [:div.row.closex {:on-click #(rf/dispatch-sync [:toggle-stats])}\n      \"X\"]\n     [:div.row {:style {:width \"100%\"}}\n      [:h4 \"Stats for session\"]]\n     [:div.row.streak-summary {:style {:width \"100%\"}}\n      [:div.col.streak-value\n       (stats :played)]\n      [:div.col.streak-value\n       (if (> (stats :played) 0)\n         (* (/ (stats :wins) (stats :played)) 100.0)\n         \"-\")]\n      [:div.col.streak-value\n       (stats :current-streak)]\n      [:div.col.streak-value\n       (stats :max-streak)]]\n     [:div.row.streak-summary {:style {:width \"100%\"}}\n      [:div.col.streak-header\n       \"Played\"]\n      [:div.col.streak-header\n       \"Win %\"]\n      [:div.col.streak-header\n       \"Current streak\"]\n      [:div.col.streak-header\n       \"Max streak\"]]\n     [:div.row \n      {:style {:padding-top \"20px\"\n               :width \"100%\"}}\n      [:h4 \"GUESS DISTRIBUTION\"]]\n     (let [solves (lgc/guess-distribution-histogram (stats :solves))]\n       [:div.row {:style {:display :grid}}\n        (for [n (range 1 7)]\n          [histogram-row n solves stats])])]))\n\n(defn guess-background [col row]\n  (let [word        @(rf/subscribe [:word])\n        current-row @(rf/subscribe [:current-row])\n        guesses     @(rf/subscribe [:guesses])\n        row-guess   (guesses row)]\n    (if (> current-row row)\n      (if (and row-guess ((set word) (row-guess col)))\n        (if (= (nth word (dec col)) (row-guess col))\n          \"#538d4e\"\n          \"#b59f3b\")\n        \"#3a3a3c\")\n      \"#121213\")))\n\n(defn guess-row [current-row current-col rows error row-no game-state]\n  [:div.row {:style {:justify-content :center}}\n   (for [n (range 1 6)]\n     [:div.letter-cell\n      {:data-filled (and (= n current-col)\n                         (= row-no current-row)\n                         (not= \"\" (get-in rows [row-no n])))\n       :data-error (and error (= current-row row-no))\n       :data-guessed (= 1 (- current-row row-no))\n       \n       (keyword (str \"data-won\" n))\n       (and (= 1 (- current-row row-no)) (= game-state :won))\n       \n       :style {:background-color (guess-background n row-no)}\n       :key (str row-no \"-\" n)}\n      (get-in rows [row-no n])])])\n\n(defn get-key-bg [guessed-letters correct-letters key word]\n  (cond\n    (and (guessed-letters key) ((-> correct-letters :green) key))\n    \"#538d4e\"\n    \n    (and (guessed-letters key) ((-> correct-letters :yellow) key))\n    \"#b59f3b\"\n    \n    (guessed-letters key)\n    \"#3a3a3c\"\n    \n    :else\n    \"#818384\"))\n\n(defn keyboard-row [keys]\n  (let [guessed-letters @(rf/subscribe [:guessed-letters])\n        correct-letters @(rf/subscribe [:correct-letters])\n        word @(rf/subscribe [:word])]\n    [:div.keyboard-row\n     (for [letter (str/split keys #\"-\")]\n       [:div.keyboard-key \n        {:on-click #(rf/dispatch [:clicked letter])\n         :style    {:background-color (get-key-bg guessed-letters correct-letters letter word)}\n         :key      letter} letter])]))\n\n(defn new-game-row []\n  (let [game-state @(rf/subscribe [:game-state])]\n    [:div.keyboard-row\n     [:div.keyboard-key\n      {:style {:width \"100%\"\n               :visibility (condp = game-state\n                             :won :visible\n                             :lost :visible\n                             :playing :hidden)}\n       :on-click #(rf/dispatch [:new-game])}\n      \"New Game\"]]))\n\n;; -- App -------------------------------------------------------------------------\n(defn app []\n  (let [rows  @(rf/subscribe [:guesses])\n        error @(rf/subscribe [:error])\n        current-row @(rf/subscribe [:current-row])\n        current-col @(rf/subscribe [:current-col])\n        game-state @(rf/subscribe [:game-state])]\n    [:div.container\n     [:div.game\n      [display-message]\n      [stats-view]\n      [:div.row\n       [:div.col.col-lg-8\n        [:h1 \"Wordle\"]]\n       [:div.col.col-lg-4\n        [:i.fas.fa-cubes.stats {:on-click #(rf/dispatch-sync [:toggle-stats])}]]]\n      [:div.row.guesses\n       (for [n (range 1 7)]\n         [guess-row current-row current-col rows error n game-state])]\n      [:div.keyboard\n       [keyboard-row \"Q-W-E-R-T-Y-U-I-O-P\"]\n       [keyboard-row \"A-S-D-F-G-H-J-K-L\"]\n       [keyboard-row \"ENTER-Z-X-C-V-B-N-M-DEL\"]\n       [new-game-row]]]]))\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (rf/clear-subscription-cache!)\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (set! (.-onkeydown js/window)\n        (fn [gfg]\n          (rf/dispatch-sync [:key-pressed (.-keyCode gfg)])))\n  (start))\n\n; dispatch the event which will create the initial state. \n(defonce initialize (rf/dispatch-sync [:initialize]))\n\n"]}