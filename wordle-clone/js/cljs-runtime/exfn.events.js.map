{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["exfn.events/reset-guesses","exfn.events/get-word","exfn.words/words","cljs.core/shuffle","cljs.core/first","clojure.string/upper-case","re-frame.core/reg-fx","stats-and-guesses","js/document","re_frame.core.reg_event_db","_","p__30039","map__30040","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","stats","exfn.events/clamp","n","x__4217__auto__","y__4218__auto__","x__4214__auto__","y__4215__auto__","exfn.events/valid-key?","key","fexpr__30042","cljs.core/set","exfn.events/get-correct-letters","word","guess","green","cljs.core.map","w","g","cljs.core._EQ_","cljs.core.remove","cljs.core/nil?","yellow","clojure.set.difference","cljs.core.filter","fexpr__30043","p__30044","map__30045","exfn.events/set-game-over","current-row","db","cljs.core.assoc","cljs.core.update_in","cljs.core/inc","cs","cljs.core/assoc-in","p__30049","map__30050","guessed-letters","exfn.events/process-key","guesses","current-col","game-state","pred__30052","expr__30053","cljs.core/=","cljs.core.update","p1__30047#","cljs.core.get_in","cljs.core/vals","cljs.core/str","G__30055","clojure.string/lower-case","clojure.set.union","and__4115__auto__","cljs.core.not_EQ_","p1__30048#","p__30056","vec__30057","cljs.core.nth","p__30060","vec__30061","G__30065","G__30066","fexpr__30064","cljs.core/char","cljs.core/not"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as bf]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [exfn.words :as w]))\n\n(def reset-guesses\n  {1 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   2 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   3 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   4 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   5 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   6 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}})\n\n(defn get-word []\n  (-> w/words\n      shuffle\n      first\n      str/upper-case))\n\n(rf/reg-fx\n :save-to-cookie\n (fn [stats-and-guesses]\n   (.cookie js/document )))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:word    (get-word)\n    :guesses reset-guesses\n    :guessed-letters #{}\n    :correct-letters {:green  #{}\n                      :yellow #{}}\n    :current-row 1\n    :current-col 0\n    :error false\n    :stats {:current-streak 0\n            :max-streak 0\n            :wins 0\n            :solves {1 0, 2 0, 3 0, 4 0, 5 0, 6 0}\n            :played 0}\n    :stats-visible true\n    :game-state :playing}))\n\n(rf/reg-event-db \n :new-game\n (fn [{:keys [stats]} _]\n   {:stats stats\n    :word (get-word)\n    :guesses reset-guesses\n    :guessed-letters #{}\n    :correct-letters {:green  #{}\n                      :yellow #{}}\n    :stats-visible false\n    :current-row 1\n    :current-col 0\n    :error false\n    :game-state :playing}))\n\n(defn clamp [n]\n  (min (max n 0) 5))\n\n(defn valid-key? [key]\n  ((set \"ABCDEFGHJIKLMNOPQRSTUVWXYZ\") key))\n\n(defn get-correct-letters [word guess]\n  (let [green (->> (map (fn [w g] (if (= w g) g nil)) word guess)\n                   (remove nil?)\n                   set)\n\n        yellow (set/difference (set (filter (fn [g] ((set word) g)) guess)) green)]\n    {:green green\n     :yellow yellow}))\n\n(defn set-game-over [{:keys [word current-row] :as db} guess]\n  (cond \n    (= word guess)\n    (-> db\n        (assoc :game-state :won)\n        (update-in [:stats :current-streak] inc)\n        (update-in [:stats :max-streak]\n                   (fn [cs] (max cs (inc (-> db :stats :current-streak)))))\n        (update-in [:stats :solves (dec current-row)] inc)\n        (update-in [:stats :played] inc)\n        (update-in [:stats :wins] inc))\n    \n    (= current-row 7)\n    (-> db\n        (assoc :game-state :lost)\n        (assoc-in [:stats :current-streak] 0)\n        (update-in [:stats :played] inc))\n    \n    :else\n    (assoc db :game-state :playing)))\n\n(defn process-key\n  [{:keys [guesses current-row current-col :guessed-letters game-state word] :as db} key]\n  (condp = key\n    \"DEL\" (if (>= current-col 1)\n            (-> db\n                (update :guesses assoc-in [current-row current-col] \"\")\n                (update :current-col #(clamp (dec %)))\n                (assoc :error false))\n            db)\n\n    \"ENTER\" (if (= 5 current-col)\n              (let [guess (->> (get-in guesses [current-row])\n                               vals\n                               (apply str))]\n                (if (w/words (str/lower-case guess))\n                  (-> db\n                      (assoc :error false)\n                      (update :current-row inc)\n                      (assoc :correct-letters (get-correct-letters word guess))\n                      (assoc :guessed-letters (set/union guessed-letters (set guess)))\n                      (assoc :current-col 0)\n                      (set-game-over guess))\n                  (assoc db :error true)))\n              db)\n\n    (if (and (= game-state :playing) (valid-key? key) (not= current-col 5))\n      (-> db\n          (update :guesses assoc-in [current-row (inc current-col)] key)\n          (update :current-col #(clamp (inc %)))\n          (assoc :error false))\n      db)))\n\n(rf/reg-event-db\n :clicked\n (fn [db [_ key]]\n   (process-key db key)))\n\n(rf/reg-event-db\n :key-pressed\n (fn [db [_ key]]\n   (process-key db ({13 \"ENTER\", 8 \"DEL\"} key (char key)))))\n\n(rf/reg-event-db\n :toggle-stats\n (fn [db _]\n   (update db :stats-visible not)))\n"]}