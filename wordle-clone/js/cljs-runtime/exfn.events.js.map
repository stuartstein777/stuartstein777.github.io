{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","exfn.words/words","cljs.core/shuffle","cljs.core/first","clojure.string/upper-case","exfn.events/clamp","n","x__4217__auto__","y__4218__auto__","x__4214__auto__","y__4215__auto__","exfn.events/valid-key?","key","fexpr__30672","cljs.core/set","exfn.events/get-correct-letters","word","guess","green","cljs.core.map","w","g","cljs.core._EQ_","cljs.core.remove","cljs.core/nil?","yellow","clojure.set.difference","cljs.core.filter","fexpr__30673","p__30674","map__30675","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","exfn.events/set-game-over","current-row","db","cljs.core.assoc","p__30679","map__30680","guessed-letters","exfn.events/process-key","guesses","current-col","game-state","pred__30682","expr__30683","cljs.core/=","cljs.core.update","cljs.core/assoc-in","p1__30677#","cljs.core.get_in","cljs.core/vals","cljs.core/str","G__30685","clojure.string/lower-case","cljs.core/inc","clojure.set.union","and__4115__auto__","cljs.core.not_EQ_","p1__30678#","p__30686","vec__30687","cljs.core.nth","p__30690","vec__30691","G__30695","G__30696","fexpr__30694","cljs.core/char"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as bf]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [exfn.words :as w]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:word    (-> w/words\n                 shuffle\n                 first\n                 str/upper-case)\n    \n    :guesses {1 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n              2 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n              3 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n              4 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n              5 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n              6 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}}\n    \n    :guessed-letters #{}\n    :correct-letters {:green  #{}\n                      :yellow #{}}\n    :current-row 1\n    :current-col 0\n    :error false\n    :game-state :playing}))\n\n(defn clamp [n]\n  (min (max n 0) 5))\n\n(defn valid-key? [key]\n  ((set \"ABCDEFGHJIKLMNOPQRSTUVWXYZ\") key))\n\n(defn get-correct-letters [word guess]\n  (let [green (->> (map (fn [w g] (if (= w g) g nil)) word guess)\n                   (remove nil?)\n                   set)\n\n        yellow (set/difference (set (filter (fn [g] ((set word) g)) guess)) green)]\n    {:green green\n     :yellow yellow}))\n\n(defn set-game-over [{:keys [word current-row] :as db} guess]\n  (cond \n    (= word guess)\n    (assoc db :game-state :won)\n    \n    (= current-row 7)\n    (assoc db :game-state :lost)\n    \n    :else\n    (assoc db :game-state :playing)))\n\n(defn process-key\n  [{:keys [guesses current-row current-col :guessed-letters game-state word] :as db} key]\n  (condp = key\n    \"DEL\" (if (>= current-col 1)\n            (-> db\n                (update :guesses assoc-in [current-row current-col] \"\")\n                (update :current-col #(clamp (dec %)))\n                (assoc :error false))\n            db)\n\n    \"ENTER\" (if (= 5 current-col)\n              (let [guess (->> (get-in guesses [current-row])\n                               vals\n                               (apply str))]\n                (if (w/words (str/lower-case guess))\n                  (-> db\n                      (assoc :error false)\n                      (update :current-row inc)\n                      (assoc :correct-letters (get-correct-letters word guess))\n                      (assoc :guessed-letters (set/union guessed-letters (set guess)))\n                      (assoc :current-col 0)\n                      (set-game-over guess))\n                  (assoc db :error true)))\n              db)\n\n    (if (and (= game-state :playing) (valid-key? key) (not= current-col 5))\n      (-> db\n          (update :guesses assoc-in [current-row (inc current-col)] key)\n          (update :current-col #(clamp (inc %)))\n          (assoc :error false))\n      db)))\n\n(rf/reg-event-db\n :clicked\n (fn [db [_ key]]\n   (process-key db key)))\n\n(rf/reg-event-db\n :key-pressed\n (fn [db [_ key]]\n   (process-key db ({13 \"ENTER\", 8 \"DEL\"} key (char key)))))\n"]}