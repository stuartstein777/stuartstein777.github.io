{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["exfn.events/reset-guesses","exfn.events/get-word","exfn.words/words","cljs.core/shuffle","cljs.core/first","clojure.string/upper-case","re-frame.core/reg-fx","db","js/document","cljs.core.pr_str","re_frame.core.reg_event_db","_","cookie","cljs.reader.read_string","cljs.core._EQ_","p__29549","map__29550","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","stats","exfn.events/clamp","n","x__4217__auto__","y__4218__auto__","x__4214__auto__","y__4215__auto__","exfn.events/valid-key?","key","fexpr__29552","cljs.core/set","exfn.events/get-correct-letters","word","guess","green","cljs.core.map","w","g","cljs.core.remove","cljs.core/nil?","yellow","clojure.set.difference","cljs.core.filter","fexpr__29553","p__29554","map__29555","exfn.events/set-game-over","current-row","cljs.core.assoc","cljs.core.update_in","cljs.core/inc","cs","cljs.core/assoc-in","p__29559","map__29560","guessed-letters","exfn.events/process-key","guesses","current-col","game-state","pred__29562","expr__29563","cljs.core/=","cljs.core.update","p1__29557#","cljs.core.get_in","cljs.core/vals","cljs.core/str","G__29565","clojure.string/lower-case","clojure.set.union","and__4115__auto__","cljs.core.not_EQ_","p1__29558#","p__29566","vec__29567","cljs.core.nth","re_frame.core.reg_event_fx","p__29570","p__29571","map__29572","vec__29573","updated-db","G__29578","G__29579","fexpr__29577","cljs.core/char","cljs.core/not"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as bf]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [exfn.words :as w]\n            [cljs.reader :as rdr]))\n\n(def reset-guesses\n  {1 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   2 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   3 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   4 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   5 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}\n   6 {1 \"\", 2 \"\", 3 \"\", 4 \"\", 5 \"\"}})\n\n(defn get-word []\n  (-> w/words\n      shuffle\n      first\n      str/upper-case))\n\n(rf/reg-fx\n :save-to-cookie\n (fn [db]\n   (set! (.-cookie js/document)\n         (pr-str db))))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   (let [cookie (rdr/read-string (.-cookie js/document))]\n     (if (or (= cookie {}) (nil? cookie))\n       {:word    (get-word)\n        :guesses reset-guesses\n        :guessed-letters #{}\n        :correct-letters {:green  #{}\n                          :yellow #{}}\n        :current-row 1\n        :current-col 0\n        :error false\n        :stats {:current-streak 0\n                :max-streak 0\n                :wins 0\n                :solves {1 0, 2 0, 3 0, 4 0, 5 0, 6 0}\n                :played 0}\n        :stats-visible false\n        :game-state :playing}\n       cookie))))\n\n(rf/reg-event-db \n :new-game\n (fn [{:keys [stats]} _]\n   {:stats stats\n    :word (get-word)\n    :guesses reset-guesses\n    :guessed-letters #{}\n    :correct-letters {:green  #{}\n                      :yellow #{}}\n    :stats-visible false\n    :current-row 1\n    :current-col 0\n    :error false\n    :game-state :playing}))\n\n(defn clamp [n]\n  (min (max n 0) 5))\n\n(defn valid-key? [key]\n  ((set \"ABCDEFGHJIKLMNOPQRSTUVWXYZ\") key))\n\n(defn get-correct-letters [word guess]\n  (let [green (->> (map (fn [w g] (if (= w g) g nil)) word guess)\n                   (remove nil?)\n                   set)\n\n        yellow (set/difference (set (filter (fn [g] ((set word) g)) guess)) green)]\n    {:green green\n     :yellow yellow}))\n\n(defn set-game-over [{:keys [word current-row] :as db} guess]\n  (cond \n    (= word guess)\n    (-> db\n        (assoc :game-state :won)\n        (update-in [:stats :current-streak] inc)\n        (update-in [:stats :max-streak]\n                   (fn [cs] (max cs (inc (-> db :stats :current-streak)))))\n        (update-in [:stats :solves (dec current-row)] inc)\n        (update-in [:stats :played] inc)\n        (update-in [:stats :wins] inc))\n    \n    (= current-row 7)\n    (-> db\n        (assoc :game-state :lost)\n        (assoc-in [:stats :current-streak] 0)\n        (update-in [:stats :played] inc))\n    \n    :else\n    (assoc db :game-state :playing)))\n\n(defn process-key\n  [{:keys [guesses current-row current-col :guessed-letters game-state word] :as db} key]\n  (condp = key\n    \"DEL\" (if (>= current-col 1)\n            (-> db\n                (update :guesses assoc-in [current-row current-col] \"\")\n                (update :current-col #(clamp (dec %)))\n                (assoc :error false))\n            db)\n\n    \"ENTER\" (if (= 5 current-col)\n              (let [guess (->> (get-in guesses [current-row])\n                               vals\n                               (apply str))]\n                (if (w/words (str/lower-case guess))\n                  (-> db\n                      (assoc :error false)\n                      (update :current-row inc)\n                      (assoc :correct-letters (get-correct-letters word guess))\n                      (assoc :guessed-letters (set/union guessed-letters (set guess)))\n                      (assoc :current-col 0)\n                      (set-game-over guess))\n                  (assoc db :error true)))\n              db)\n\n    (if (and (= game-state :playing) (valid-key? key) (not= current-col 5))\n      (-> db\n          (update :guesses assoc-in [current-row (inc current-col)] key)\n          (update :current-col #(clamp (inc %)))\n          (assoc :error false))\n      db)))\n\n(rf/reg-event-db\n :clicked\n (fn [db [_ key]]\n   (process-key db key)))\n\n(rf/reg-event-fx\n :key-pressed\n (fn [{:keys [db]} [_ key]]\n   (let [updated-db (process-key db ({13 \"ENTER\", 8 \"DEL\"} key (char key)))]\n     {:db updated-db\n      :save-to-cookie updated-db})))\n\n(rf/reg-event-db\n :toggle-stats\n (fn [db _]\n   (update db :stats-visible not)))\n"]}