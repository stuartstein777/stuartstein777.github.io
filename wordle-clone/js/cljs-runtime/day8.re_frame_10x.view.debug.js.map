{"version":3,"sources":["day8/re_frame_10x/view/debug.cljs"],"mappings":";;;;;;AAMA,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGE,AAKEC,AAAgB,AAAA,AAAyB,AAAA,AAAAH,AAACI,AAAS,AAAA,AAAA,AAACC,AACpDF,AAAgB,AAAA,AAAwB,AAAA,AAAAH,AAACI,AAAS,AAAA,AAAA,AAACC,AACnDF,AAAgB,AAAA,AAAe,AAAA,AAAAH,AAACI,AAAS,AAAA,AAAA,AAACC,AAC1CF,AAAgB,AAAA,AAAyB,AAAA,AAAAH,AAACI,AAAS,AAAA,AAAA,AAACC,AAGpDC,AAA0B,AAAA,AAAA,AAACD,AAE3BC,AAA0B,AAAA,AAAA,AAACD,AAE3BC,AAA0B,AAAA,AAAA,AAACD,AAG3BF,AACD,AAAA,AAAAH,AAAMO,AAAe,AAAA,AAAA,AAACF;AAAtB,AACE,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA06E6C,AAAAsB,AAAA3B;AA16E7CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AACYC,AAAW,AAAA,AAAaD;AADpC,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGGf,AAEqB,AAAA,AAAA,AAAI,AAAC6B,AAAExB,AAAcuB,AAGhC,AAACE,AAAM,AAACC,AAAI;AAAKC;AAAL,AAAA,AAAA,AAAa/B,AAAgB,AAACC,AAAQ8B;;AAR/D,AAAA,AAES,AAAA,AAAK,AAACR,AAAMI,AAMmD,AAACK,AAAsBL;;AAR/F,AAAA,AAAAX,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AACYC,AAAW,AAAA,AAAaD;AADpC,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGGzB,AAEqB,AAAA,AAAA,AAAI,AAAC6B,AAAExB,AAAcuB,AAGhC,AAACE,AAAM,AAACC,AAAI;AAAKC;AAAL,AAAA,AAAA,AAAa/B,AAAgB,AAACC,AAAQ8B;;AAR/D,AAAA,AAAA,AAAAV,AAAA,AAAAI,AAAAnB,AAES,AAAA,AAAK,AAACiB,AAAMI,AAMmD,AAACK,AAAsBL;;;AAR/F;;;;AAAA,AAAA;;AAAA,AAAA,AAAAtB,AAAY,AAAA,AAAA,AAAAR,AAAW,AAAA,AAAA,AAACK","names":["cljs.core/deref","day8.re-frame-10x.view.debug/render","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/label","cljs.core.prn_str","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","day8.re-frame-10x.view.components/simple-render","current-match","iter__4529__auto__","s__39730","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__39732","cljs.core/chunk-buffer","i__39731","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39729","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","match","match-info","cljs.core._EQ_","cljs.core.doall","cljs.core.map","event","day8.re-frame-10x.metamorphic/summarise-match","cljs.core/chunk-first"],"sourcesContent":["(ns day8.re-frame-10x.view.debug\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn render []\n  [rc/v-box\n   :size \"1 1 auto\"\n   :gap \"5px\"\n   :children\n   [\n    [rc/label :label (str \"Number of epochs \" (prn-str @(rf/subscribe [:epochs/number-of-matches])))]\n    [rc/label :label (str \"Beginning trace \" (prn-str @(rf/subscribe [:epochs/beginning-trace-id])))]\n    [rc/label :label (str \"Ending \" (prn-str @(rf/subscribe [:epochs/ending-trace-id])))]\n    [rc/label :label (str \"Current epoch ID \" (prn-str @(rf/subscribe [:epochs/current-epoch-id])))]\n\n    [:h2 \"Subscriptions\"]\n    [components/simple-render @(rf/subscribe [:subs/current-epoch-sub-state]) [\"debug-subs\"]]\n    [:h2 \"pre epoch\"]\n    [components/simple-render @(rf/subscribe [:subs/intra-epoch-subs]) [\"pre-epoch-subs\"]]\n    [:h2 \"match state\"]\n    [components/simple-render @(rf/subscribe [:epochs/current-match-state]) [\"match-state\"]]\n\n\n    [rc/label :label \"Epochs\"]\n    (let [current-match @(rf/subscribe [:epochs/current-match])]\n      (for [match (:matches @(rf/subscribe [:epochs/epoch-root]))\n            :let [match-info (:match-info match)]]\n        ^{:key (:id (first match-info))}\n        [rc/v-box\n         :style {:border      \"1px solid black\"\n                 :font-weight (if (= current-match match-info)\n                                \"bold\"\n                                \"normal\")}\n         :children (doall (map (fn [event] [rc/label :label (prn-str event)]) (metam/summarise-match match-info)))]))]])\n\n\n\n"]}