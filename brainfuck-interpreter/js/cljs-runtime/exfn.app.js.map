{"version":3,"sources":["exfn/app.cljs"],"mappings":";;;;;;;AAOA,AAAA,AAAMA;AAAN,AACE,AAAA,AAAAC,AAAMG,AAAQ,AAAA,AAAA,AAACC;AAAf,AAAAJ,AACMK,AAAO,AAAA,AAAA,AAACD;AADd,AAEE,AAACE,AAAeH;;AAFlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;AAAA,AAOkB,AAAA,AAAA,AAACM,AAAiC,AAAA,AAAAN;AAPpD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAQaC;AARb,AAYkB,AAAA,AAAA,AAACI,AAAgC,AAAA,AAAAL;AAZnD,AAaaG;;AAEf,AAAA,AAAMG;AAAN,AACE,AAAA,AAAAR,AAAMS,AAAQ,AAAA,AAAA,AAACL;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKaK;;AAGf,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAIA,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGgB,AAAA,AAAA,AAAA,AAAA,AAACJ,AAAiCK;AAHlD,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAMgB,AAAA,AAAA,AAAA,AAAA,AAACL,AAAiCM;AANlD,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AASgB,AAAA,AAAA,AAAA,AAAA,AAACN,AAAiCO;AATlD,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAYgB,AAAA,AAAA,AAAA,AAAA,AAACP,AAAiCQ;AAZlD,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAegB,AAAA,AAAA,AAAA,AAAA,AAACR,AAAiCS;AAflD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAsBA,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIIlB;AAJJ,AAOiB,AAAA,AAAA,AAACQ;AAPlB,AAAA,AAAA,AAAA,AASIC,AACAG,AACAD;;AAKJ,AAAA,AAAuBQ;AAAvB,AAEE,AAAA,AAACC,AAAYF,AACD,AAAA,AAAiBG;;AAE/B,AAAA,AAAeC;AAAf,AACE,AAACH;;;AAGH,AAAA,AAAAI,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAAA,AAAClB","names":["exfn.app/inputs","cljs.core/deref","p1__33256#","p1__33257#","source","re_frame.core.subscribe","input","js/console.log","re-frame.core/dispatch-sync","exfn.app/output","output","exfn.app/other-projects","exfn.app/examples","exfn.interpreter/hello-world","exfn.interpreter/fib","exfn.interpreter/sorter","exfn.interpreter/bf-generator","exfn.interpreter/reverse-input","exfn.app/app","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize"],"sourcesContent":["(ns exfn.app\n  (:require [reagent.dom :as dom]\n            [re-frame.core :as rf]\n            [exfn.subscriptions]\n            [exfn.events]\n            [exfn.interpreter :as bf]))\n\n(defn inputs []\n  (let [source @(rf/subscribe [:source])\n        input @(rf/subscribe [:input])]\n    (js/console.log source)\n    [:div.row\n     [:div.col-lg-6\n      [:p.header \".code\"]\n      [:textarea.code\n       {:on-change #(rf/dispatch-sync [:update-source (-> % .-target .-value)])\n        :value source}]]\n     [:div.col-lg-6\n      [:p.header \".input\"]\n      [:textarea.input \n       {:on-change #(rf/dispatch-sync [:update-input (-> % .-target .-value)])\n        :value input}]]]))\n\n(defn output []\n  (let [output @(rf/subscribe [:output])]\n    [:div.row\n     [:div.col-lg-12\n      [:p.header \".output\"]\n      [:textarea.output\n       {:value output\n        :readonly true}]]]))\n\n(defn other-projects []\n  [:div {:style {:float :right}}\n   [:a {:href \"https://stuartstein777.github.io/\"} \"other projects\"]])\n\n(defn examples []\n  [:div\n   [:button.btn-primary.example-btn \n    {:on-click #(rf/dispatch-sync [:load-example [bf/hello-world \"\"]])}\n    \"Hello World\"]\n   [:button.btn-primary.example-btn \n    {:on-click #(rf/dispatch-sync [:load-example [bf/fib \"\"]])}\n    \"Fibonacci\"]\n   [:button.btn-primary.example-btn \n    {:on-click #(rf/dispatch-sync [:load-example [bf/sorter \"ZBFJIJQKLAMFMAUBFBXYACED\"]])}\n    \"Sorter\"]\n   [:button.btn-primary.example-btn \n    {:on-click #(rf/dispatch-sync [:load-example [bf/bf-generator \"Enter message to generate here...\"]])}\n    \"Brainfuck generator\"]\n   [:button.btn-primary.example-btn\n    {:on-click #(rf/dispatch-sync [:load-example [bf/reverse-input \"ABCDEFGHI\"]])}\n    \"Reverse input\"]\n   [:div\n    [:label \"Examples from\"]\n    [:a {:href \"http://brainfuck.org/\"} \" http://brainfuck.org/\"]]])\n\n;; -- App -------------------------------------------------------------------------\n(defn app []\n  [:div.container\n   [:h1 \"Brainfuck Interpreter\"]\n   [:p \"Note: Comments not supported yet.\"]\n   [inputs]\n   [:div\n    [:button.btn-primary\n     {:on-click #(rf/dispatch-sync [:execute])}\n     \"Execute\"]]\n   [output]\n   [examples]\n   [other-projects]])\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (start))\n\n; dispatch the event which will create the initial state. \n(defonce initialize (rf/dispatch-sync [:initialize]))"]}