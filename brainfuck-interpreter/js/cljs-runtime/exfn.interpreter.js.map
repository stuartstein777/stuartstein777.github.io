{"version":3,"sources":["exfn/interpreter.cljs"],"mappings":";;AAEA,AAAA,AAAMA,AAAWC;AAAjB,AACE,AAAA,AAACC,AAAI,AAAA,AAAKD;;AAEZ,AAAA,AAAME,AAAWF;AAAjB,AACE,AAAA,AAACC,AAAI,AAAA,AAAKD;;AAEZ,AAAA,AAAAG,AAAMM,AAAwCI;AAA9C,AAAA,AAAAT,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAuCQ;AAAvC,AAAAJ,AAAAJ,AAAA,AAAuBM;AAAvB,AAAAF,AAAAJ,AAAA,AAA6BO;AAA7B,AACE,AACE,AAAA,AAACG,AAAED;AAAUD,AACA,AAAA,AAACG,AAAaC,AAAKN,AACnB,AAAA,AAACK,AAAcE;;AAH9B,AAIE,AAAA,AAACH,AAAED;AAAUD,AACA,AAAA,AAACG,AAAaG,AACd,AAAA,AAACH,AAAcE,AACf,AAAA,AAACF,AAAYI,AAAMT,AAAM,AAACU,AAAKT,AAC/B,AAAA,AAACI,AAAYI,AAAM,AAACC,AAAKT,AAAMD;;AAR9C,AASW,AAAA,AAACK,AAAOH,AAAaK;;;;;AAElC,AAAA,AAAMI,AAAiBC;AAAvB,AACE,AAAA,AAAKA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAOd;;AAGf,AAAA,AAAAe,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAC,AAAAkB,AAAAA;AAAA,AAAAjB,AAAAiB,AAAA,AAAmCE;AAAnC,AAAAnB,AAAAiB,AAAA,AAAsCG;AAAtC,AAAApB,AAAAiB,AAAA,AAA6CI;AAA7C,AAAArB,AAAAiB,AAAA,AAAgDK;AAAhD,AACE,AAAMC,AAAW,AAAA,AAAA,AAACH,AAAAA,AAAAA,AAAOD,AAAAA;AAAzB,AACE,AAAI,AAAA,AAAOI;AACT,AAAA,AAAK,AAACD,AAAAA,AAAAA,AAAUD,AAAAA;;AAChB,AAAA,AAAKA;;;AAGX,AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5B,AAAA,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAAC,AAAA0B,AAAAA;AAAA,AAAAzB,AAAAyB,AAAA,AAAoCN;AAApC,AAAAnB,AAAAyB,AAAA,AAAuCL;AAAvC,AAAApB,AAAAyB,AAAA,AAA8CJ;AAA9C,AAAArB,AAAAyB,AAAA,AAAiDH;AAAjD,AACE,AAAMC,AAAW,AAAA,AAAA,AAACH,AAAAA,AAAAA,AAAOD,AAAAA;AAAzB,AACE,AAAI,AAAA,AAAOI;AACT,AAAA,AAAKF;;AACL,AAAA,AAAK,AAACC,AAAAA,AAAAA,AAAUD,AAAAA;;;AAEtB,AAAA,AAAMM,AAAYC;AAAlB,AACE,AAAI,AAACC,AAAOD;AAAZ;;AAEE,AAAa,AAACE,AAAMF;;;AAExB,AAAA,AAAMG,AAAYjB,AAAKc;AAAvB,AACE,AAAMd,AAAK,AAACkB,AAAIlB;AACVQ,AAAU,AAACT,AAAgBC;AAC3BmB,AAAS,AAACC,AAAMpB;AAFtB,AAGE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOqB,AACe,AAACH,AAAIJ,AACLN;;AAFtB,AAME,AAAI,AAAChB,AAAE,AAAA,AAAK6B,AAAIF;AACd,AAACnC,AAAMsC,AAAI,AAAA,AAAA,AAACD,AAAAA,AAAAA;;AACZ,AAAME,AAAI,AAACC,AAAIxB,AAAK,AAAA,AAAKqB;AAAzB,AACE,AAAAI,AAAOkB;AAAPjB,AAASH;AAAT,AAAA,AAAA,AAAAI,AAAA;AAAAC,AAAAF;AAAA,AAAA,AAAAD,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AACK,AAAWP,AACA,AAAA,AAAC5B,AAAWE,AACZ,AAAA,AAAA,AAACiD,AAAmB,AAAA,AAAA,AAACvB,AAAAA,AAAAA,AAAS,AAAA,AAACwB,AAAKpE;;;;AAHpD,AAAA,AAAAoD,AAAA;AAAAC,AAAAJ;AAAA,AAAA,AAAAD,AAAAA,AAAAI,AAAAC,AAAAL,AAAAI,AAAAC;;AAKK,AAAWT,AACA,AAAA,AAAC5B,AAAWE,AACZ,AAAA,AAAA,AAACiD,AAAmB,AAAA,AAAA,AAACvB,AAAAA,AAAAA,AAAS,AAAA,AAACwB,AAAKjE;;;;AAPpD,AAAA,AAAAmD,AAAA;AAAAC,AAAAN;AAAA,AAAA,AAAAD,AAAAA,AAAAM,AAAAC,AAAAP,AAAAM,AAAAC;;AASK,AAAWX,AACA,AAAA,AAAC5B,AAAWE,AACZ,AAAA,AAACF,AAAWE;;;;AAX5B,AAAA,AAAAsC,AAAA;AAAAC,AAAAR;AAAA,AAAA,AAAAD,AAAAA,AAAAQ,AAAAC,AAAAT,AAAAQ,AAAAC;;AAaK,AAAWb,AACA,AAAA,AAAC5B,AAAWE,AACZ,AAAA,AAACF,AAAWqD;;;;AAf5B,AAAA,AAAAX,AAAA;AAAAC,AAAAV;AAAA,AAAA,AAAAD,AAAAA,AAAAU,AAAAC,AAAAX,AAAAU,AAAAC;;AAiBK,AAAWf,AACA,AAAA,AAAC5B,AAAWE,AACZ,AAAA,AAACF,AAAeC,AAAK,AAAeqD,AAAU,AAAA,AAAA,AAAA,AAACC,AAAO3B,AAAY,AAAA,AAAA,AAACA,AAAAA,AAAAA;;;;AAnBnF,AAAA,AAAAgB,AAAA;AAAAC,AAAAZ;AAAA,AAAA,AAAAD,AAAAA,AAAAY,AAAAC,AAAAb,AAAAY,AAAAC;;AAqBK,AAAWjB,AACA,AAAA,AAAC5B,AAAWE,AACZ,AAAA,AAAA,AAACsD,AAAkB,AAAA,AAAA,AAAC5B,AAAAA,AAAAA,AAAS,AAACR,AAAW,AAAA,AAAA,AAACQ,AAAAA,AAAAA,AAC1C,AAAA,AAAC5B,AAAcyD;;;;AAxB/B,AAAA,AAAAX,AAAA;AAAAC,AAAAd;AAAA,AAAA,AAAAD,AAAAA,AAAAc,AAAAC,AAAAf,AAAAc,AAAAC;;AA0BK,AAAO,AAAMW,AAAO,AAAC/C,AAAoBiB;AAAlC,AACE,AAAA,AAAA,AAAC4B,AAAS5B,AAAS8B;;;;;AA3BjC,AAAA,AAAAV,AAAA;AAAAC,AAAAhB;AAAA,AAAA,AAAAD,AAAAA,AAAAgB,AAAAC,AAAAjB,AAAAgB,AAAAC;;AA6BK,AAAO,AAAMS,AAAO,AAACvC,AAAqBS;AAAnC,AACE,AAAA,AAAA,AAAC4B,AAAS5B,AAAS8B;;;;;AAE/B,AAAW9B,AAAG,AAAA,AAAC5B,AAAWE;;;;;;;;;;;;;;;AAEtC,AAAA,AAAKyD;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC","names":["exfn.interpreter/increment","n","cljs.core/mod","exfn.interpreter/decrement","p__33167","map__33168","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","exfn.interpreter/reducer","instr","open","state","i","cljs.core._EQ_","cljs.core.update","cljs.core/conj","cljs.core/inc","cljs.core/pop","cljs.core/assoc","cljs.core/peek","exfn.interpreter/build-jmp-table","code","cljs.core.reduce","p__33170","map__33171","exfn.interpreter/get-fwd-jump-target","dp","memory","ip","jmp-table","byte-at-dp","p__33173","map__33174","exfn.interpreter/get-bkwd-jump-target","exfn.interpreter/read-input","input","cljs.core/empty?","cljs.core/first","exfn.interpreter/brain-fuck","cljs.core/seq","code-len","cljs.core/count","vm","cljs.core/str","cur","cljs.core.nth","pred__33195","expr__33196","G__33198","G__33199","G__33200","G__33201","G__33202","G__33203","G__33204","G__33205","G__33206","G__33207","G__33208","G__33209","G__33210","G__33211","G__33212","G__33213","cljs.core/=","cljs.core.update_in","cljs.core.fnil","cljs.core/dec","js/String","cljs.core.get_in","cljs.core/assoc-in","cljs.core/rest","new-ip","exfn.interpreter/hello-world","exfn.interpreter/fib","exfn.interpreter/sorter","exfn.interpreter/bf-generator","exfn.interpreter/reverse-input"],"sourcesContent":["(ns exfn.interpreter)\n\n(defn increment [n]\n  (mod (inc n) 256))\n\n(defn decrement [n]\n  (mod (dec n) 256))\n\n(defn reducer [{:keys [instr open] :as state} i]\n  (cond\n    (= i \\[) (-> state\n                 (update :open conj instr)\n                 (update :instr inc))\n    (= i \\]) (-> state\n                 (update :open pop)\n                 (update :instr inc)\n                 (update :res assoc instr (peek open))\n                 (update :res assoc (peek open) instr))\n    :else    (update state :instr inc)))\n\n(defn build-jmp-table [code]\n  (->> code\n       (reduce reducer {:instr 0 :open [] :res {}})\n       :res))\n\n(defn get-fwd-jump-target [{:keys [dp memory ip jmp-table]}]\n  (let [byte-at-dp (memory dp 0)]\n    (if (zero? byte-at-dp)\n      (inc (jmp-table ip))\n      (inc ip))))     \n\n\n(defn get-bkwd-jump-target [{:keys [dp memory ip jmp-table]}]\n  (let [byte-at-dp (memory dp 0)]\n    (if (zero? byte-at-dp)\n      (inc ip)\n      (inc (jmp-table ip)))))\n\n(defn read-input [input]\n  (if (empty? input)\n    0\n    (.charCodeAt (first input))))\n\n(defn brain-fuck [code input]\n  (let [code (seq code)\n        jmp-table (build-jmp-table code)\n        code-len (count code)]\n    (loop [vm {:ip        0\n               :input     (seq input)\n               :jmp-table jmp-table\n               :output    []\n               :dp        0\n               :memory    {}}]\n      (if (= (:ip vm) code-len)\n        (apply str (vm :output))\n        (let [cur (nth code (:ip vm))]\n          (condp = cur\n            \\+ (recur (-> vm\n                          (update :ip inc)\n                          (update-in [:memory (vm :dp)] (fnil increment 0))))\n\n            \\- (recur (-> vm\n                          (update :ip inc)\n                          (update-in [:memory (vm :dp)] (fnil decrement 0))))\n\n            \\> (recur (-> vm\n                          (update :ip inc)\n                          (update :dp inc)))\n\n            \\< (recur (-> vm\n                          (update :ip inc)\n                          (update :dp dec)))\n\n            \\. (recur (-> vm\n                          (update :ip inc)\n                          (update :output conj (.fromCharCode js/String (get-in vm [:memory (vm :dp)] 0)))))\n\n            \\, (recur (-> vm\n                          (update :ip inc)\n                          (assoc-in [:memory (vm :dp)] (read-input (vm :input)))\n                          (update :input rest)))\n\n            \\[ (recur (let [new-ip (get-fwd-jump-target vm)]\n                        (assoc-in vm [:ip] new-ip)))\n\n            \\] (recur (let [new-ip (get-bkwd-jump-target vm)]\n                        (assoc-in vm [:ip] new-ip)))\n\n            (recur (-> vm (update :ip inc)))))))))\n\n(def hello-world \"++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\")\n(def fib \"+++++++++++>+>>>>++++++++++++++++++++++++++++++++++++++++++++>++++++++++++++++++++++++++++++++<<<<<<[>[>>>>>>+>+<<<<<<<-]>>>>>>>[<<<<<<<+>>>>>>>-]<[>++++++++++[-<-[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<[>>>+<<<-]>>[-]]<<]>>>[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<+>>[-]]<<<<<<<]>>>>>[++++++++++++++++++++++++++++++++++++++++++++++++.[-]]++++++++++<[->-<]>++++++++++++++++++++++++++++++++++++++++++++++++.[-]<<<<<<<<<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+>-]>[<+>-]<<<-]\")\n(def sorter \">>,[>>,]<<[[<<]>>>>[<<[>+<<+>-]>>[>+<<<<[->]>[<]>>-]<<<[[-]>>[>+<-]>>[<<<+>>>-]]>>[[<+>-]>>]<]<<[>>+<<-]<<]>>>>[.>>]\")\n(def bf-generator \"+++++[>+++++++++<-],[[>--.++>+<<-]>+.->[<.>-]<<,]\")\n(def reverse-input \">,[>,]<[.<]\")"]}