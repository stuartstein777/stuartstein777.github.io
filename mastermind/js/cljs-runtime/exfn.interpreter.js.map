{"version":3,"sources":["exfn/interpreter.cljs"],"mappings":"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","names":["exfn.interpreter/inc-dec-mod","f","n","cljs.core/mod","p__32579","map__32580","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","exfn.interpreter/reducer","instr","open","state","i","cljs.core._EQ_","cljs.core.update","cljs.core/conj","cljs.core/inc","cljs.core/pop","cljs.core/assoc","cljs.core/peek","exfn.interpreter/build-jmp-table","code","cljs.core.prn","cljs.core.reduce","p__32582","map__32583","exfn.interpreter/get-jmp-target","dp","memory","ip","jmp-table","direction","byte-at-dp","exfn.interpreter/read-input","input","cljs.core/empty?","cljs.core/first","exfn.interpreter/brain-fuck","cljs.core/seq","code-len","cljs.core/count","vm","cljs.core/str","cur","cljs.core.nth","pred__32604","expr__32605","G__32607","G__32608","G__32609","G__32610","G__32611","G__32612","G__32613","G__32614","G__32615","G__32616","G__32617","G__32618","G__32619","G__32620","G__32621","G__32622","cljs.core/=","cljs.core.update_in","cljs.core.fnil","cljs.core.partial","cljs.core/dec","js/String","cljs.core.get_in","cljs.core/assoc-in","cljs.core/rest","new-ip","exfn.interpreter/hello-world","exfn.interpreter/fib","exfn.interpreter/sorter","exfn.interpreter/bf-generator","exfn.interpreter/reverse-input"],"sourcesContent":["(ns exfn.interpreter)\n\n(defn inc-dec-mod [f n]\n  (mod (f n) 256))\n\n(defn reducer [{:keys [instr open] :as state} i]\n  (cond\n    (= i \\[) (-> state\n                 (update :open conj instr)\n                 (update :instr inc))\n    (= i \\]) (-> state\n                 (update :open pop)\n                 (update :instr inc)\n                 (update :res assoc instr (peek open))\n                 (update :res assoc (peek open) instr))\n    :else    (update state :instr inc)))\n\n(defn build-jmp-table [code]\n  (prn \"here!\")\n  (->> code\n       (reduce reducer {:instr 0 :open [] :res {}})\n       :res))\n\n(defn get-jmp-target [{:keys [dp memory ip jmp-table]} direction]\n  (let [byte-at-dp (memory dp 0)]\n    (cond\n      (or (and (= direction :forward) (zero? byte-at-dp))\n          (and (= direction :backward) (not (zero? byte-at-dp))))\n      (inc (jmp-table ip))\n\n      (or (and (= direction :forward) (not (zero? byte-at-dp)))\n          (and (= direction :backward) (zero? byte-at-dp)))\n      (inc ip))))\n\n(defn read-input [input]\n  (if (empty? input)\n    0\n    (.charCodeAt (first input))))\n\n(defn brain-fuck [code input]\n  (let [code (seq code)\n        code-len (count code)]\n    (loop [vm {:ip        0\n               :input     (seq input)\n               :jmp-table (build-jmp-table code)\n               :dp        0\n               :memory    {}}]\n      (if (= (:ip vm) code-len)\n        (apply str (vm :output))\n        (let [cur (nth code (:ip vm))]\n          (condp = cur\n            \\+ (recur (-> vm\n                          (update :ip inc)\n                          (update-in [:memory (vm :dp)] (fnil (partial inc-dec-mod inc) 0))))\n\n            \\- (recur (-> vm\n                          (update :ip inc)\n                          (update-in [:memory (vm :dp)] (fnil (partial inc-dec-mod dec) 0))))\n\n            \\> (recur (-> vm\n                          (update :ip inc)\n                          (update :dp inc)))\n\n            \\< (recur (-> vm\n                          (update :ip inc)\n                          (update :dp dec)))\n\n            \\. (recur (-> vm\n                          (update :ip inc)\n                          (update :output (fnil conj []) (.fromCharCode js/String (get-in vm [:memory (vm :dp)] 0)))))\n\n            \\, (recur (-> vm\n                          (update :ip inc)\n                          (assoc-in [:memory (vm :dp)] (read-input (vm :input)))\n                          (update :input rest)))\n\n            \\[ (recur (let [new-ip (get-jmp-target vm :forward)]\n                        (assoc-in vm [:ip] new-ip)))\n\n            \\] (recur (let [new-ip (get-jmp-target vm :backward)]\n                        (assoc-in vm [:ip] new-ip)))\n\n            (recur (-> vm (update :ip inc)))))))))\n\n(def hello-world \"++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\")\n(def fib \"+++++++++++>+>>>>++++++++++++++++++++++++++++++++++++++++++++>++++++++++++++++++++++++++++++++<<<<<<[>[>>>>>>+>+<<<<<<<-]>>>>>>>[<<<<<<<+>>>>>>>-]<[>++++++++++[-<-[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<[>>>+<<<-]>>[-]]<<]>>>[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<+>>[-]]<<<<<<<]>>>>>[++++++++++++++++++++++++++++++++++++++++++++++++.[-]]++++++++++<[->-<]>++++++++++++++++++++++++++++++++++++++++++++++++.[-]<<<<<<<<<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+>-]>[<+>-]<<<-]\")\n(def sorter \">>,[>>,]<<[[<<]>>>>[<<[>+<<+>-]>>[>+<<<<[->]>[<]>>-]<<<[[-]>>[>+<-]>>[<<<+>>>-]]>>[[<+>-]>>]<]<<[>>+<<-]<<]>>>>[.>>]\")\n(def bf-generator \"+++++[>+++++++++<-],[[>--.++>+<<-]>+.->[<.>-]<<,]\")\n(def reverse-input \">,[>,]<[.<]\")\n\n(comment\n  (brain-fuck sorter \"JFIDOSFINF\")\n  (brain-fuck hello-world \"\")\n  (brain-fuck reverse-input \"ABCDEF\")\n  (brain-fuck fib \"\")\n\n  \n  )\n\n"]}