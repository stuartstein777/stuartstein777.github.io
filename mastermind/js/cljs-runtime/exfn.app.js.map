{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/app","cljs.core/deref","current-guess","re_frame.core.subscribe","current-guess-number","guesses","clues","solution","game-won?","fexpr__35996","cljs.core/set","re-frame.core/dispatch-sync","fexpr__35997","fexpr__35998","fexpr__35999","fexpr__36000","fexpr__36001","fexpr__36002","fexpr__36003","cljs.core.into","iter__4529__auto__","s__36005","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__36007","cljs.core/chunk-buffer","i__36006","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36004","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","j","cljs.core.range","s__36009","b__36011","i__36010","iter__36008","s__36013","b__36015","i__36014","iter__36012","i","cljs.core._EQ_","cljs.core/name","guess","cljs.core.nth","cljs.core.prn","and__4115__auto__","s__36017","b__36019","i__36018","iter__36016","cljs.core/vals","cljs.core.remove","cljs.core/nil?","cljs.core/not","s__36021","b__36023","i__36022","iter__36020","vec__36024","vec__36027","a","b","c","d","exfn.logic/get-clue-marker","or__4126__auto__","s__36031","b__36033","i__36032","iter__36030","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\n  (:require [reagent.dom :as dom]\n            [re-frame.core :as rf]\n            [exfn.subscriptions]\n            [exfn.events]\n            [exfn.logic :as lgc]\n            [goog.string.format]))\n\n;; -- App -------------------------------------------------------------------------\n\n(defn app []\n  (let [current-guess        @(rf/subscribe [:current-guess])\n        current-guess-number @(rf/subscribe [:current-guess-number])\n        guesses              @(rf/subscribe [:guesses])\n        clues                @(rf/subscribe [:clues])\n        solution             @(rf/subscribe [:solution])\n        game-won?            @(rf/subscribe [:game-won?])]\n    [:div.container\n     [:div.row\n      [:div.col.col-lg-8\n       [:h1 \"Mastermind\"]]\n      [:div.col.col-lg-4 {:style {:text-align    :right\n                                  :padding-right 50}}\n       [:i.fab.fa-github]\n       [:a {:href  \"https://github.com/stuartstein777/peg-solitaire\"\n            :style {:text-decoration :none}}\n        \" (repo) \"]\n       \"|\"\n       [:a {:href  \"https://stuartstein777.github.io/\"\n            :style {:text-decoration :none}}\n        \" other projects\"]]]\n\n     [:div.row\n      [:div.col.col-lg-1\n       {:style    {:flex-direction  :column\n                   :display         :flex\n                   :padding         20\n                   :align-items     :center\n                   :justify-content :center}\n        :row-span 8}\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :green) \"marble green guessed\"\n                      :else \"marble green\")\n          :on-click #(rf/dispatch-sync [:add-guess :green])}]]\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :red) \"marble red guessed\"\n                      :else \"marble red\")\n          :on-click #(rf/dispatch-sync [:add-guess :red])}]]\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :blue) \"marble blue guessed\"\n                      :else \"marble blue\")\n          :on-click #(rf/dispatch-sync [:add-guess :blue])}]]\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :orange) \"marble orange guessed\"\n                      :else \"marble orange\")\n          :on-click #(rf/dispatch-sync [:add-guess :orange])}]]\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :yellow) \"marble yellow guessed\"\n                      :else \"marble yellow\")\n          :on-click #(rf/dispatch-sync [:add-guess :yellow])}]]\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :pink) \"marble pink guessed\"\n                      :else \"marble pink\")\n          :on-click #(rf/dispatch-sync [:add-guess :pink])}]]\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :purple) \"marble purple guessed\"\n                      :else \"marble purple\")\n          :on-click #(rf/dispatch-sync [:add-guess :purple])}]]\n       [:div.board-cell\n        [:div\n         {:class    (cond\n                      ((set current-guess) :cyan) \"marble cyan guessed\"\n                      :else \"marble cyan\")\n          :on-click #(rf/dispatch-sync [:add-guess :cyan])}]]]\n\n      ;; guesses\n      (into\n       [:div.col.col-lg-3]\n       (into\n        (for [j (range 1 9)]\n          (into\n           [:div.row]\n           (for [i (range 1 5)]\n             [:div\n              {:class (if (< current-guess-number j)\n                        \"guess-cell inactive\"\n                        \"guess-cell\")}\n              (if (= current-guess-number j)\n                [:div\n                 {:class    (when (current-guess i)\n                              (str \"marble \" (name (current-guess i))))\n                  :on-click #(rf/dispatch-sync [:remove-guess i])}]\n                (let [guess (nth guesses (dec j) nil)]\n                  (prn \"guess: \" guess)\n                  (when (and guess (guess i))\n                    [:div\n                     {:class (str \"marble \" (name (guess i)))}])))])))))\n\n      ;; checkers\n      [:div.col.col-lg-1\n       (for [i (range 1 9)]\n         [:div.row\n          [:div.check-guess-holder\n           {:style {:display (if (= 4 (->> current-guess vals (remove nil?) count))\n                                :block\n                                :none)}\n            :on-click #(rf/dispatch-sync [:check-guess])}\n           (when (and (not game-won?) (= current-guess-number i))\n             [:i.fas.fa-play.check-guess])]])]\n\n      ;; clues\n      [:div.col.col-lg-2\n       (for [i (range 0 9)]\n         [:div.row\n          (if (> (count clues) i)\n            (let [[a b c d] (nth clues i nil)]\n              [:div.clue.clue-grid\n               [:div (lgc/get-clue-marker a)]\n               [:div (lgc/get-clue-marker b)]\n               [:div (lgc/get-clue-marker c)]\n               [:div (lgc/get-clue-marker d)]])\n            [:div])])]]\n\n     [:div.row\n      [:div.col.col-lg-1]\n      [:div.col.col-lg-3\n       (when (or (= current-guess-number 9) game-won?)\n         [:div\n          [:div.row\n           {:style {:margin-left 70}}\n           [:h3 (if game-won? \"Winner!\" \"Solution\")]]\n          (into\n           [:div.row]\n           (for [i (range 0 4)]\n             [:div.guess-cell\n              [:div\n               {:class (str \"marble \" (name (nth solution i)))}]]))])]]\n     [:div.row\n      [:div.col.col-lg-1]\n      [:div.col.col-lg-3\n       [:button.btn.btn-primary\n        {:style {:margin-top 20}\n         :on-click #(rf/dispatch-sync [:initialize])}\n        \"New Game\"]]]]))\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (start))\n\n; dispatch the event which will create the initial state. \n(defonce initialize (rf/dispatch-sync [:initialize]))\n\n(comment\n\n\n  \n\n  \n\n\n\n  )"]}