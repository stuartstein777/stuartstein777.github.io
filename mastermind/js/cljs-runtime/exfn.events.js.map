{"version":3,"sources":["exfn/events.cljs"],"mappings":";AAMA,AAAA,AAACA,AAEA,AAAKC,AAAEA;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyB,AAAA,AAACC;;AAM3B,AAAA,AAAMC,AAAiBC,AAAQC;AAA/B,AACE,AAAI,AAACC,AAAE,AAAA,AAAA,AAACF,AAAAA,AAAAA,AAAWC,AACf,AAACC,AAAE,AAAA,AAAA,AAACF,AAAAA,AAAAA,AAAWC,AACf,AAACC,AAAE,AAAA,AAAA,AAACF,AAAAA,AAAAA,AAAWC,AACf,AAACC,AAAE,AAAA,AAAA,AAACF,AAAAA,AAAAA,AAAWC;;AAErB,AAAA,AAAME,AAAWC,AAAcH;AAA/B,AACE,AAAI,AAAA,AAAA,AAACG,AAAAA,AAAAA;AACH,AAAI,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACH,AAAI,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACH,AAAI,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACHA;;AACA,AAAA,AAACC,AAAMD,AAAgBH;;;AACzB,AAAA,AAACI,AAAMD,AAAgBH;;;AACzB,AAAA,AAACI,AAAMD,AAAgBH;;;AACzB,AAAA,AAACI,AAAMD,AAAgBH;;;AAE3B,AAAA,AAACL,AAEA,AAAAU,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASV;AAAT,AAAAW,AAAAD,AAAA,AAAA,AAAWN;AAAX,AACE,AAAI,AAAAS,AAAI,AAAA,AAAA,AAACD,AAAAA,AAAAA;AAAL,AAAA,AAAAC;AAAAA;;AACI,AAACX,AAAgB,AAAA,AAAA,AAACU,AAAAA,AAAAA,AAAmBR;;;AAC3CQ;;AACA,AAAA,AAACJ,AAAMI,AAAkB,AAACN,AAAU,AAAA,AAAA,AAACM,AAAAA,AAAAA,AAAmBR;;;AAE7D,AAAA,AAACL,AAEA,AAAAe,AAAKF;AAAL,AAAA,AAAAG,AAAAD;AAAA,AAAAH,AAAAI,AAAA,AAAA,AAASf;AAAT,AAAAW,AAAAI,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAACC,AAAOL,AAAkBM,AAAMF;;AAEnC,AAAA,AAACjB,AAEA,AAAKa,AAAGZ;AAAR,AACE,AAAMmB,AAAS,AAAA,AAAA,AAACP,AAAAA,AAAAA;AACVQ,AAAS,AAAA,AAAA,AAACR,AAAAA,AAAAA;AACVS,AAAS,AAACC,AAAgBH,AAAS,AAACI,AAAKH;AAF/C,AAGMR,AACA,AAAA,AAACJ,AAAa,AAACgB,AAAK,AAAA,AAAA,AAACZ,AAAAA,AAAAA,AAAWS,AAChC,AAAA,AAACJ,AAA6BQ,AAC9B,AAAA,AAACR,AAAgBS,AAAKN,AACtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACZ,AACD,AAAA,AAACA,AAAiB,AAAA,AAAAmB,AAACC;AAAD,AAAS,AAAA,AAAAD,AAACtB;AAAoBgB;;AAEzD","names":["re_frame.core.reg_event_db","_","exfn.logic/generate-solution","exfn.events/already-guessed","guesses","color","cljs.core._EQ_","exfn.events/add-guess","current-guess","cljs.core.assoc","p__29836","vec__29837","cljs.core.nth","db","or__4126__auto__","p__29840","vec__29841","position","cljs.core.update","cljs.core/assoc","solution","guess","clue","exfn.logic/check-guess","cljs.core/vals","cljs.core.conj","cljs.core/inc","cljs.core/conj","p1__29844#","cljs.core/every?"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as bf]\n            [clojure.set :as set]\n            [exfn.logic :as lgc]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:solution             (bf/generate-solution 4)\n    :current-guess-number 1\n    :current-guess        {1 nil, 2 nil, 3 nil, 4 nil}\n    :guesses              []\n    :clues                []}))\n\n(defn already-guessed [guesses color]\n  (or (= (guesses 1) color)\n      (= (guesses 2) color)\n      (= (guesses 3) color)\n      (= (guesses 4) color)))\n\n(defn add-guess [current-guess color]\n  (if (current-guess 1)\n    (if (current-guess 2)\n      (if (current-guess 3)\n        (if (current-guess 4)\n          current-guess\n          (assoc current-guess 4 color))\n        (assoc current-guess 3 color))\n      (assoc current-guess 2 color))\n    (assoc current-guess 1 color)))\n\n(rf/reg-event-db\n :add-guess\n (fn [db [_ color]]\n   (if (or (db :game-won?)\n           (already-guessed (db :current-guess) color))\n     db\n     (assoc db :current-guess (add-guess (db :current-guess) color)))))\n\n(rf/reg-event-db\n :remove-guess\n (fn [db [_ position]]\n   (update db :current-guess assoc position nil)))\n\n(rf/reg-event-db\n :check-guess\n (fn [db _]\n   (let [solution (db :solution)\n         guess    (db :current-guess)\n         clue     (lgc/check-guess solution (vals guess))]\n     (-> db\n         (assoc :clues (conj (db :clues) clue))\n         (update :current-guess-number inc)\n         (update :guesses conj guess)\n         (assoc :current-guess {1 nil, 2 nil, 3 nil, 4 nil})\n         (assoc :game-won? (every? #(= :pos-and-color %) clue))))))\n\n(comment\n  \n  (let [guess {1 nil, 2 nil, 3 nil, 4 nil}]\n    (->> guess\n         vals\n         (remove nil?)\n         count)\n    )\n  )\n"]}