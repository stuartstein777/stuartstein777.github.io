{"version":3,"sources":["exfn/logic.cljs"],"mappings":";;AAGA,8BAAA,9BAAMA,oEAAkBC,OAAOC,aAAaC;AAA5C,AAGO,sDAAA,WAAAK,1DAACC;AAAD,AAAS,oDAAA,7CAACH,uDAAY,AAAA,mFAAAE;GADtB,+CAAA,WAAAJ,1DAACC;AAAD,AAAS,SAAK,AAACC,6CAAEJ,aAAa,AAAQ,4CAAAE,iBAAA,7DAACG,kIAAe,AAACD,6CAAEH,KAAK,AAAO,4CAAAC,iBAAA,7DAACG;GADtEN;;AAIP,4BAAA,5BAAMS,gEAAgBT,OAAOU;AAA7B,AAEO,sDAAA,WAAAC,1DAACP;AAAD,AAAqB,OAAA,AAAA,oFAAAO,6BAAA,JAASD;GAD9BV;;AAGP,+BAAA,2CAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,1IAAKY;AASL,kCAAA,lCAAMC,4EAAsBb,OAAOc;AAAnC,AACE,IAAMC,2GACY,+CAAA,WAAAC,1DAACZ,lGACD,6CAAA,7CAACa;AADD,AAAqB,OAAA,AAAA,oFAAAD,8BAAA,LAASF;GAD9Bd;AAAlB,AAGEe;;AAEJ,sBAAA,tBAAMG,oDAAUC;AAAhB,AACE,GAAI,OAAA,NAAGA;AACL,QAAA,gDAASA;;AACT,mDAAKA;;;AAET,wBAAA,xBAAMC,wDAAYV,IAAIW,MAAMnB;AAA5B,AACE,0DAAA,uDAAA,7DAAKA,sDAASmB,WAAU,AAACH,oBAASR;;AAEpC,mBAAA,nBAAMY,8CAAOC,EAAEC;AAAf,AACE,AAACC,qGAAIF,EAAEC;;AACPA;;AAEF,0CAAA,1CAAME,4FAA8BC,IAAIC;AAAxC,AACE,IAAMC,uBAAqB,gCAAA,/BAAK,qBAAA,rBAAOD,iBAAYD;AAAnD,AACE,uBAEK,AAACvB,+CAAO,WAAK8B,1EAEbC;AAFQ,AACE,SAAI,6CAAA,7CAAC9B,iDAAI,AAAM6B,cAAI,6CAAA,7CAAC7B,iDAAI,AAAM6B;GAFxC,4CAAA,WAAAH,vDAACC;AAAD,AAAM,OAACC,kCAAO,4CAAS,AAAQN,AAAK,gBAAAI,iBAAA;GADpC,AAACD,8CAAM,wBAAA,vBAAKD;;AAMrB,wCAAA,xCAAMO,wFAA4BpC,OAAOqC,WAAWT;AAApD,AACE,uBAIK,+CAAA,WAAAY,1DAACpC,hBACD+B;AADA,AAAS,SAAK,eAAAK,dAAIH,qCAAc,CAAAG,oBAAMZ;GADtC,4CAAA,WAAAW,vDAACP;AAAD,AAAM,yCAAAO,lCAACN;qGAFP,+CAAA,WAAAK,1DAAClC,lGACD,4CAAA,5CAAC4B;AADD,AAAS,oDAAA,7CAAC3B,uDAAY,AAAA,mFAAAiC;GADtBtC;;AAOP,oCAAA,pCAAMyC,gFAAwBzC,OAAO0C;AAArC,AACE,IAAMd,cAAY,AAACK,kCAAO,4DAAA,fAAKS;IACzBC,eAAa,AAAO,AAACV;IACrBI,aAAW,EAAI,AAAChC,6CAAEsC,aAAaD,gBAClB,AAAM,AAACT,0CACP,AAACA,kCAAO,4DAAA,fAAKS;IAC1BE,2BAAyB,CAAA,MAAK,4BAAA,5BAAOhB,iBAAYS;IACjDQ,WAAS,AAACnB,wCAA6BW,WAAWT;IAClDkB,6BAA2B,AAACV,sCAA2BpC,OAAOqC,WAAWT;AAP/E,AAQE,GAAI,CAAGc,gBAAcC;AAArB;;AAEE,QAAA,CAAGC,2BAAyBC,YAASC;;;AAE3C","names":["exfn.logic/events-for-month","events","month-number","year","p1__29470#","cljs.core.filter","cljs.core._EQ_","cljs.core.get","p1__29471#","cljs.core.remove","exfn.logic/events-for-day","day","p1__29472#","exfn.logic/day-of-week-short","exfn.logic/events-types-on-date","date","result","p1__29473#","cljs.core.mapv","exfn.logic/pad-zero","num","exfn.logic/build-date","month","exfn.logic/debug","m","x","cljs.core.prn","exfn.logic/weekends-between-now-and-eoy","now","end-of-year","total-days-remaining","cljs.core.range","p1__29474#","cljs.core.map","js/module$node_modules$moment$moment","d","cljs.core/count","exfn.logic/holidays-for-selected-year","start-date","p1__29475#","p1__29476#","p1__29477#","exfn.logic/working-days-remaining","selected-year","current-year","days-remaining-this-year","weekends","holidays-for-selected-year"],"sourcesContent":["(ns exfn.logic\n  (:require [\"moment\" :as moment]))\n\n(defn events-for-month [events month-number year]\n  (->> events\n       (filter #(and (= month-number (.month (get % :date))) (= year (.year (get % :date)))))\n       (remove #(= \"Holiday\" (:type %)))))\n\n(defn events-for-day [events day]\n  (->> events\n       (filter #(-> % :date (.isSame day \"day\")))))\n\n(def day-of-week-short\n  {1 \"MON\"\n   2 \"TUE\"\n   3 \"WED\"\n   4 \"THU\"\n   5 \"FRI\"\n   6 \"SAT\"\n   0 \"SUN\"})\n   \n(defn events-types-on-date [events date]\n  (let [result (->> events\n                    (filter #(-> % :date (.isSame date \"day\")))\n                    (mapv :type))]\n    result))\n\n(defn pad-zero [num]\n  (if (< num 10)\n    (str \"0\" num)\n    (str num)))\n\n(defn build-date [day month year]\n  (str year \"-\" month \"-\" (pad-zero day)))\n\n(defn debug [m x]\n  (prn m x)\n  x)\n\n(defn weekends-between-now-and-eoy [now end-of-year]\n  (let [total-days-remaining (inc (.diff end-of-year now \"days\"))]\n    (->> (range (inc total-days-remaining))\n         (map #(moment (str (-> (.clone now) (.add % \"days\")))))\n         (filter (fn [d] \n                   (or (= 0 (.day d)) (= 6 (.day d)))))\n         count)))\n\n(defn holidays-for-selected-year [events start-date end-of-year]\n  (->> events\n       (filter #(= \"Holiday\" (:type %)))\n       (map :date)\n       (map #(moment %))\n       (filter #(and (<= start-date %) (<= % end-of-year)))\n       count))\n\n(defn working-days-remaining [events selected-year]\n  (let [end-of-year (moment (str selected-year \"-12-31\"))\n        current-year (.year (moment))\n        start-date (if (= current-year selected-year)\n                     (.utc (moment))\n                     (moment (str selected-year \"-01-01\")))\n        days-remaining-this-year (+ 2 (.diff end-of-year start-date \"days\"))\n        weekends (weekends-between-now-and-eoy start-date end-of-year)\n        holidays-for-selected-year (holidays-for-selected-year events start-date end-of-year)]\n    (if (< selected-year current-year)\n      0\n      (- days-remaining-this-year weekends holidays-for-selected-year))))\n\n(comment\n  \n  ;; todo - when viewing a specific day, show the day in the date field, not the current day\n)\n  "]}