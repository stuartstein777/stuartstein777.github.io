{"version":3,"sources":["exfn/helpers.cljs"],"mappings":"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","names":["exfn.helpers/is-leap-year","year","cljs.core/mod","cljs.core.not_EQ_","exfn.helpers/get-days-of-month","month","cljs-time.core/year","cljs-time.core/now","pred__34506","expr__34507","cljs.core/=","cljs.core.range","exfn.helpers/get-days-keyed-on-months","months","cljs.core.into","iter__4529__auto__","s__34510","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__34512","cljs.core/chunk-buffer","i__34511","vec__34513","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34509","cljs.core/chunk-rest","vec__34516","cljs.core/first","cljs.core/cons","cljs.core/rest","days","cljs.core.mapv","exfn.helpers/count-all-values","m","cljs.core/vals","cljs.core.map","cljs.core.reduce","cljs.core/+","exfn.helpers/working-days","start-date","cljs_time.core.date_time","day","cljs_time.core.plus","cljs_time.core.days","cljs.core.filter","cljs-time.predicates/weekday?","cljs-time.core/day","cljs-time.core/month","cljs.core/group-by","exfn.helpers/date-passed?","exfn.helpers/days-left","calendar","now-day","now-month","s__34520","b__34522","i__34521","vec__34523","iter__34519","vec__34526","k","v","cljs.core._EQ_","cljs.core.remove","x","exfn.helpers/holidays-passed","s__34530","b__34532","i__34531","vec__34533","iter__34529","vec__34536","cljs.core.mapcat","exfn.helpers/total-working-days-left","exfn.helpers/used-holidays","holidays","exfn.helpers/public-holidays-remaining","public-holidays","exfn.helpers/month->str","fexpr__34539","exfn.helpers/working-days-in-holidays","from-day","from-month","to-day","to-month","clojure.set.intersection","cljs.core/set","last-day-in-from-mth","cljs.core/last","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.helpers\n  (:require [cljs-time.core :as t]\n            [clojure.set :as set]\n            [cljs-time.predicates :as tp]\n            [clojure.data.avl :as avl]))\n\n(defn is-leap-year [year]\n  (or (zero? (mod year 400))\n      (and (not= 0 (mod year 100))\n           (zero? (mod year 4)))))\n\n(defn get-days-of-month [month]\n  (let [year (t/year (t/now))]\n    (condp = month\n      1 (range 1 32)\n      2 (if (is-leap-year year) (range 1 30) (range 1 29))\n      3 (range 1 32)\n      4 (range 1 31)\n      5 (range 1 32)\n      6 (range 1 31)\n      7 (range 1 32)\n      8 (range 1 32)\n      9 (range 1 31)\n      10 (range 1 32)\n      11 (range 1 31)\n      12 (range 1 32)\n      [])))\n\n(defn get-days-keyed-on-months [months]\n  (into {} (for [[month days] months]\n             [month (mapv :day days)])))\n\n(defn count-all-values [m]\n  (->> m\n       vals\n       (map count)\n       (reduce +)))\n\n(defn working-days []\n  (let [start-date (t/date-time 2023 1 1)]\n    (->> (range 0 366)\n         (map    (fn [day] (t/plus start-date (t/days day))))\n         (filter (fn [day] (tp/weekday? day)))\n         (map    (fn [day] {:day (t/day day) :month (t/month day)}))\n         (group-by :month)\n         get-days-keyed-on-months)))\n\n(defn date-passed? [day month]\n  (<= (t/date-time 2023 month day)\n      (t/now)))\n\n(defn days-left [calendar now-day now-month]\n  (into {}\n        (for [[k v] calendar\n              :when (>= k now-month)]\n          [k (if (= k now-month)\n               (remove (fn [x] (<= x now-day)) v) v)])))\n\n(defn holidays-passed [calendar now-day now-month]\n  (->>\n   (into {}\n         (for [[k v] calendar\n               :when (<= k now-month)]\n           [k (if (= k now-month)\n                (remove (fn [x] (> x now-day)) v) v)]))\n   vals\n   (mapcat vals)\n   (map :duration)\n   (reduce +)))\n\n(defn total-working-days-left [calendar]\n  (let [day   (t/day (t/now))\n        month (t/month (t/now))]\n    (count-all-values (days-left calendar day month))))\n\n(defn used-holidays [holidays]\n  (let [day   (t/day (t/now))\n        month (t/month (t/now))]\n    (holidays-passed holidays day month)))\n\n(defn public-holidays-remaining [public-holidays]\n  (let [day   (t/day (t/now))\n        month (t/month (t/now))]\n    (count-all-values (days-left public-holidays day month))))\n\n(defn month->str [month]\n  ({1  \"January\"\n    2  \"February\"\n    3  \"March\"\n    4  \"April\"\n    5  \"May\"\n    6  \"June\"\n    7  \"July\"\n    8  \"August\"\n    9  \"September\"\n    10 \"October\"\n    11 \"November\"\n    12 \"December\"} month))\n\n(defn working-days-in-holidays [from-day from-month to-day to-month]\n  (let [calendar (working-days)]\n    (cond\n      (= from-month to-month)\n      {from-month (set/intersection  (set (calendar from-month))\n                                     (set (range from-day (inc to-day))))}\n\n      :else\n      (let [last-day-in-from-mth (last (get-days-of-month from-month))]\n        {from-month (set/intersection (set (range from-day (inc last-day-in-from-mth)))\n                                      (set (calendar from-month)))\n         to-month   (set/intersection (set (range 1 (inc to-day)))\n                                      (set (calendar to-month)))}))))\n\n"]}