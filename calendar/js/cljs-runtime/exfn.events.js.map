{"version":3,"sources":["exfn/events.cljs"],"mappings":";;AASA,0BAAA,1BAAMA,4DAAaC;AAAnB,AAAA,kDAAA,oJAAA,6JAAA,0LAAA,8JAAA,8KAAA,rwBACO,kDAAA,lDAACC,4CAAID,2GACH,kDAAA,lDAACC,4CAAID,gIACE,kDAAA,lDAACC,4CAAID,+HACZ,kDAAA,lDAACC,4CAAID,0HACD,kDAAA,lDAACC,4CAAID,2HACT,AAACE,kCAAO,kDAAA,lDAACD,4CAAID;;AAEtB,yDAAA,zDAACG,gIAEC,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;aAAT,AAAAF,4CAAAD,WAAA,IAAA,pEAAWI;AAAX,AACE,IAAMC,mBAAiB,AAACC,4CAAIZ,wBAAYU;AAAxC,qDACMF,rDACA,wDAAA,jDAACK,2HAAuBF;;AAElC,yDAAA,zDAACG,yHAEC,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAf,4CAAAe,eAAA,hEAAaT;IAAbW,aAAAH;QAAA,AAAAT,4CAAAY,WAAA,IAAA,/DAAmBV;YAAnB,AAAAF,4CAAAY,WAAA,IAAA,nEAAqBV;AAArB,AAAA,kDAAA,gDAAA,2CAAA,2HAAA,sEAAA,gEAAA,iEAAA,2CAAA,uDAAA,mDAAA,2GAAA,0FAAA,iOAAA,iEAAA,mFAAA,+EAAA,gEAAA,mFAAA,7qCACuB,4CAAA,5CAAU,AAACN,ocAGX,kHACA,AAACiB,2GACQ,+BAAA,2CAAA,8DAAA,xIAACC;;AAInC,yDAAA,zDAACjB,0HAEA,WAAKI,GAAGC;AAAR,sDACMD,tDACA,yDAAA,sEAAA,WAAAc,nIAACC;AAAD,AAAoC,OAAA,AAAAD,6BAAA,IAAA;;;AAE3C,yDAAA,zDAAClB,0HAEA,WAAKI,GAAGC;AAAR,sDACMD,tDACA,yDAAA,sEAAA,WAAAgB,nIAACD;AAAD,AAAoC,OAAA,AAAAC,kCAAA,IAAA;;;AAE3C,yDAAA,zDAACpB,yHAEA,WAAKI,GAAGC;AAAR,sDACMD,tDACA,yDAAA,sEAAA,WAAAiB,nIAACF;AAAD,AAAoC,OAAA,AAAAE,6BAAA,IAAA;;;AAE3C,yDAAA,zDAACrB,uHAEA,WAAKI,GAAGC;AAAR,sDACMD,tDACA,yDAAA,sEAAA,WAAAkB,nIAACH;AAAD,AAAoC,OAAA,AAAAG,kCAAA,IAAA;;;AAE3C,yDAAA,zDAACtB,2HAEA,cAAAuB,HAAKnB;AAAL,AAAA,IAAAoB,aAAAD;QAAA,AAAApB,4CAAAqB,WAAA,IAAA,/DAASnB;WAAT,AAAAF,4CAAAqB,WAAA,IAAA,lEAAWC;AAAX,AACE,wDAAA,jDAAChB,8CAAML,yEAAiBqB;;AAE3B,yDAAA,zDAACzB,yIAEA,cAAA0B,HAAKtB;AAAL,AAAA,IAAAuB,aAAAD;QAAA,AAAAvB,4CAAAwB,WAAA,IAAA,/DAAStB;WAAT,AAAAF,4CAAAwB,WAAA,IAAA,lEAAWC;AAAX,AACE,wDAAA,jDAACnB,8CAAML,2EAAkBwB","names":["exfn.events/parse-event","event","cljs.core.get","js/module$node_modules$moment$moment","re_frame.core.reg_event_db","p__33528","vec__33529","cljs.core.nth","db","_","events","processed-events","cljs.core.map","cljs.core.assoc","re_frame.core.reg_event_fx","p__33532","p__33533","map__33534","cljs.core/--destructure-map","vec__33535","ajax.core/json-request-format","ajax.core/json-response-format","p1__33538#","cljs.core.update","p1__33539#","p1__33540#","p1__33541#","p__33542","vec__33543","view","p__33546","vec__33547","date"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [clojure.set :as set]\n            [cljs.reader :as rdr]\n            [clojure.walk :as wk]\n            [\"moment\" :as moment]\n            [day8.re-frame.http-fx]))\n\n(defn parse-event [event]\n  {:id (get event :Id)\n   :name (get event :Name)\n   :description (get event :Description)\n   :type (get event :Type)\n   :location (get event :Location)\n   :date (moment (get event :Date))})\n\n(rf/reg-event-db\n  :process-events\n  (fn [db [_ events]]\n    (let [processed-events (map parse-event events)]\n      (-> db\n          (assoc :calendar-events processed-events)))))\n\n(rf/reg-event-fx\n :initialize\n  (fn [{:keys [db]} [_ _]]\n   {:db   {:current-date (.startOf (moment) \"month\")\n           :current-view :month}\n    :http-xhrio {:method :get\n                 :uri    (str \"https://stuartstein777.github.io/calendar/events.json\")\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:process-events]\n                 :on-failure      [:fail]}}))\n\n(rf/reg-event-db\n :next-month\n (fn [db _]\n   (-> db\n       (update :current-date #(-> % .clone (.add 1 \"month\"))))))\n\n(rf/reg-event-db\n :prev-month\n (fn [db _]\n   (-> db\n       (update :current-date #(-> % .clone (.subtract 1 \"month\"))))))\n\n(rf/reg-event-db\n :next-year\n (fn [db _]\n   (-> db\n       (update :current-date #(-> % .clone (.add 1 \"year\"))))))\n\n(rf/reg-event-db\n :prev-year\n (fn [db _]\n   (-> db\n       (update :current-date #(-> % .clone (.subtract 1 \"year\"))))))\n\n(rf/reg-event-db\n :update-view\n (fn [db [_ view]]\n   (assoc db :current-view view)))\n\n(rf/reg-event-db\n :set-selected-date\n (fn [db [_ date]]\n   (assoc db :selected-date date)))\n\n"]}