{"version":3,"sources":["exfn/logic.cljs"],"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","names":["exfn.logic/generate-board","exfn.logic/has-marble?","board","id","cljs.core.get_in","exfn.logic/can-jump","from","direction","direct-neighbour","direct-neighbour-neighbour","direct-neighbour-has-marble?","direct-neighbour-neighbour-has-no-marble?","exfn.logic/get-potential-jumps","neighbors","can-jump-north","can-jump-east","can-jump-west","can-jump-south","exfn.logic/pegs-remaining","cljs.core/count","cljs.core.filter","cljs.core/true?","cljs.core.map","cljs.core/vals","exfn.logic/jump","target","cljs.core.update_in","cljs.core/assoc","exfn.logic/remaining-jumps","cells","cljs.core.range","jumps","iter__4529__auto__","s__32740","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__32742","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__32744","cljs.core/chunk-buffer","i__32743","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32741","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__32739","cell","exfn.logic/game-won?","cljs.core._EQ_","exfn.logic/get-cell-id","or__4126__auto__","fexpr__32746","exfn.logic/target-cell?","targets","cell-id","fexpr__32747","cljs.core.remove","cljs.core/nil?","cljs.core/set","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.logic)\n\n(defn generate-board []\n  {1  {:id 1\n       :has-marble true\n       :neighbors  [nil 2 nil 4]}\n   2  {:id 2\n       :has-marble true\n       :neighbors  [nil 3 1 5]}\n   3  {:id 3\n       :has-marble true\n       :neighbors  [nil nil 2 6]}\n   4  {:id 4\n       :has-marble true\n       :neighbors  [1 5 nil 9]}\n   5  {:id 5\n       :has-marble true\n       :neighbors  [2 6 4 10]}\n   6  {:id 6\n       :has-marble true\n       :neighbors  [3 nil 5 11]}\n   7  {:id 7\n       :has-marble true\n       :neighbors  [nil 8 nil 14]}\n   8  {:id 8\n       :has-marble true\n       :neighbors  [nil 9 7 15]}\n   9  {:id 9\n       :has-marble true\n       :neighbors  [4 10 8 16]}\n   10 {:id 10\n       :has-marble true\n       :neighbors  [5 11 9 17]}\n   11 {:id 11\n       :has-marble true\n       :neighbors  [6 12 10 18]}\n   12 {:id 12\n       :has-marble true\n       :neighbors  [nil 13 11 19]}\n   13 {:id 13\n       :has-marble true\n       :neighbors  [nil nil 12 20]}\n   14 {:id 14\n       :has-marble true\n       :neighbors  [7 15 nil 21]}\n   15 {:id 15\n       :has-marble true\n       :neighbors  [8 16 14 22]}\n   16 {:id 16\n       :has-marble true\n       :neighbors  [9 17 15 23]}\n   17 {:id 17\n       :has-marble false\n       :neighbors  [10 18 16 24]}\n   18 {:id 18\n       :has-marble true\n       :neighbors  [11 19 17 25]}\n   19 {:id 19\n       :has-marble true\n       :neighbors  [12 20 18 26]}\n   20 {:id 20\n       :has-marble true\n       :neighbors  [13 nil 19 27]}\n   21 {:id 21\n       :has-marble true\n       :neighbors  [14 22 nil nil]}\n   22 {:id 22\n       :has-marble true\n       :neighbors  [15 23 21 nil]}\n   23 {:id 23\n       :has-marble true\n       :neighbors  [16 24 22 28]}\n   24 {:id 24\n       :has-marble true\n       :neighbors  [17 25 23 29]}\n   25 {:id 25\n       :has-marble true\n       :neighbors  [18 26 24 30]}\n   26 {:id 26\n       :has-marble true\n       :neighbors  [19 27 25 nil]}\n   27 {:id 27\n       :has-marble true\n       :neighbors  [20 nil 26 nil]}\n   28 {:id 28\n       :has-marble true\n       :neighbors  [23 29 nil 31]}\n   29 {:id 29\n       :has-marble true\n       :neighbors  [24 30 28 32]}\n   30 {:id 30\n       :has-marble true\n       :neighbors  [25 nil 29 33]}\n   31 {:id 31\n       :has-marble true\n       :neighbors  [28 32 nil nil]}\n   32 {:id 32\n       :has-marble true\n       :neighbors  [29 33 31 nil]}\n   33 {:id 33\n       :has-marble true\n       :neighbors  [30 nil 32 nil]}})\n\n(defn has-marble? [board id]\n  (true? (get-in board [id :has-marble])))\n\n;; neighbour has to have a marble, that neighbour in same direction\n;; has to be empty\n;; e.g. to jump east \n;; o o _ o o\n;; ^\n;; |_ can jump here. since east has marble, and east-east has no marble\n;; from is cell id\n;; direction is 0, 1, 2, 3\n;; 0 is north, 1 is east, 2 is west, 3 is south\n(defn can-jump [board from direction]\n  (let [direct-neighbour (get-in board [from :neighbors direction])\n        direct-neighbour-neighbour (get-in board [direct-neighbour :neighbors direction] nil)\n        direct-neighbour-has-marble? (true? (get-in board [direct-neighbour :has-marble]))\n        direct-neighbour-neighbour-has-no-marble? (false? (get-in board [direct-neighbour-neighbour :has-marble]))]\n    (and direct-neighbour-has-marble? direct-neighbour-neighbour-has-no-marble?)))\n\n(defn get-potential-jumps [board from]\n  (let [neighbors (get-in board [from :neighbors])\n        can-jump-north (can-jump board from 0)\n        can-jump-east (can-jump board from 1)\n        can-jump-west (can-jump board from 2)\n        can-jump-south (can-jump board from 3)]\n    \n    [{:direction :north\n      :cell (when can-jump-north (get-in board [(neighbors 0) :neighbors 0]))} \n     {:direction :east\n      :cell (when can-jump-east (get-in board [(neighbors 1) :neighbors 1]))}\n     {:direction :west \n      :cell (when can-jump-west (get-in board [(neighbors 2) :neighbors 2]))}\n     {:direction :south\n      :cell (when can-jump-south (get-in board [(neighbors 3) :neighbors 3]))}]))\n\n(defn pegs-remaining [board]\n  (count (filter true? (map :has-marble (vals board)))))\n\n;; from cell needs to set has-marble: false.\n;; target cell needs to set has-marble: true.\n;; the cell in between needs to set has-marble: false.\n;; cell in between is board->from->neighbors->direction\n(defn jump [board from target direction]\n  (-> board\n      (update-in [from] assoc :has-marble false)\n      (update-in [target] assoc :has-marble true)\n      (update-in [(get-in board [from :neighbors direction])] assoc :has-marble false)))\n\n(defn remaining-jumps [board]\n  (let [cells (range 1 34)\n        jumps (->>\n               (for [cell      cells\n                     direction (range 0 4)\n                     :when     (and\n                                (has-marble? board cell)\n                                (can-jump board cell direction))]\n                 {:cell      cell\n                  :direction direction\n                  :has-jump  true})\n               )]\n    jumps))\n\n(defn game-won? [board]\n  (= 1 (pegs-remaining board)))\n\n(defn get-cell-id [cell]\n  (or ({3 1,\n        4 2\n        5, 3\n        10 4\n        11 5\n        12 6\n        15 7\n        16 8\n        17 9\n        18 10\n        19 11\n        20 12\n        21 13\n        22 14\n        23 15\n        24 16\n        25 17\n        26 18\n        27 19\n        28 20\n        29 21\n        30 22\n        31 23\n        32 24\n        33 25\n        34 26\n        35 27\n        38 28\n        39 29\n        40 30\n        45 31\n        46 32\n        47 33} cell) -1))\n\n(defn target-cell? [targets cell-id]\n  ((->> (map :cell targets)\n        (remove nil?)\n        (set))\n   cell-id))\n\n(comment\n  (let [targets #{{:direction :north, :cell 17} {:direction :east, :cell nil} {:direction :west, :cell nil} {:direction :south, :cell nil}}\n        cell-id 17]\n    (target-cell? targets cell-id)\n    )\n  \n  )\n(comment\n  \n  (remaining-jumps (generate-board))\n  (pegs-remaining (generate-board))\n  (get-potential-jumps (generate-board) 29)\n  (jump (generate-board) 29 17 0)\n  \n  \n  (target-cell? #{{:north nil} {:east nil} {:west nil} {:south 17}} 17)\n\n\n\n  (let [board {:board {1  {:id         1\n                           :has-marble false\n                           :neighbors  [nil 2 nil 4]}\n                       2  {:id         2\n                           :has-marble false\n                           :neighbors  [nil 3 1 5]}\n                       3  {:id         3\n                           :has-marble false\n                           :neighbors  [nil nil 2 6]}\n                       4  {:id         4\n                           :has-marble false\n                           :neighbors  [1 5 nil 9]}\n                       5  {:id         5\n                           :has-marble false\n                           :neighbors  [2 6 4 10]}\n                       6  {:id         6\n                           :has-marble false\n                           :neighbors  [3 nil 5 11]}\n                       7  {:id         7\n                           :has-marble false\n                           :neighbors  [nil 8 nil 14]}\n                       8  {:id         8\n                           :has-marble false\n                           :neighbors  [nil 9 7 15]}\n                       9  {:id         9\n                           :has-marble false\n                           :neighbors  [4 10 8 16]}\n                       10 {:id         10\n                           :has-marble false\n                           :neighbors  [5 11 9 17]}\n                       11 {:id         11\n                           :has-marble false\n                           :neighbors  [6 12 10 18]}\n                       12 {:id         12\n                           :has-marble false\n                           :neighbors  [nil 13 11 19]}\n                       13 {:id         13\n                           :has-marble false\n                           :neighbors  [nil nil 12 20]}\n                       14 {:id         14\n                           :has-marble false\n                           :neighbors  [7 15 nil 21]}\n                       15 {:id         15\n                           :has-marble false\n                           :neighbors  [8 16 14 22]}\n                       16 {:id         16\n                           :has-marble true\n                           :neighbors  [9 17 15 23]}\n                       17 {:id         17\n                           :has-marble false\n                           :neighbors  [10 18 16 24]}\n                       18 {:id         18\n                           :has-marble false\n                           :neighbors  [11 19 17 25]}\n                       19 {:id         19\n                           :has-marble true\n                           :neighbors  [12 20 18 26]}\n                       20 {:id         20\n                           :has-marble false\n                           :neighbors  [13 nil 19 27]}\n                       21 {:id         21\n                           :has-marble false\n                           :neighbors  [14 22 nil nil]}\n                       22 {:id         22\n                           :has-marble false\n                           :neighbors  [15 23 21 nil]}\n                       23 {:id         23\n                           :has-marble false\n                           :neighbors  [16 24 22 28]}\n                       24 {:id         24\n                           :has-marble false\n                           :neighbors  [17 25 23 29]}\n                       25 {:id         25\n                           :has-marble false\n                           :neighbors  [18 26 24 30]}\n                       26 {:id         26\n                           :has-marble false\n                           :neighbors  [19 27 25 nil]}\n                       27 {:id         27\n                           :has-marble false\n                           :neighbors  [20 nil 26 nil]}\n                       28 {:id         28\n                           :has-marble false\n                           :neighbors  [23 29 nil 31]}\n                       29 {:id         29\n                           :has-marble false\n                           :neighbors  [24 30 28 32]}\n                       30 {:id         30\n                           :has-marble false\n                           :neighbors  [25 nil 29 33]}\n                       31 {:id         31\n                           :has-marble false\n                           :neighbors  [28 32 nil nil]}\n                       32 {:id         32\n                           :has-marble false\n                           :neighbors  [29 33 31 nil]}\n                       33 {:id         33\n                           :has-marble false\n                           :neighbors  [30 nil 32 nil]}}\n               :remaining-pegs 3\n               :game-win? false\n               :game-over? false}]\n\n    (any-jumps-remaining board)\n    )\n\n\n  (some true? '(false false false))\n  )\n\n\n  \n"]}