{"version":3,"sources":["exfn/events.cljs"],"mappings":";AAKA,AAAA,AAACA,AAEA,AAAKC,AAAEA;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACU,AAACC;;AAKZ,AAAA,AAACF,AAEA,AAAAG,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASH;AAAT,AAAAI,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACE,AAAMC,AAAM,AAAA,AAAQF;AAApB,AACE,AAAI,AAACG,AAAeD,AAAMD;AACxB,AAAI,AAACG,AAAE,AAAA,AAAA,AAACJ,AAAAA,AAAAA,AAAmBC;AACrBD,AACA,AAAA,AAACK,AACD,AAAA,AAAA,AAACC;;AAEDN,AACA,AAAA,AAACM,AAAqBL,AACtB,AAAA,AAACK,AAAe,AAACC,AAAI,AAACC,AAAuBN,AAAMD;;;AACzDD;;;AAEP,AAAA,AAAMS,AAAqBC;AAA3B,AACE,AAAAC,AAAMD;AAANC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAF;;;;AAMF,AAAA,AAACjB,AAEA,AAAAoB,AAAKd;AAAL,AAAA,AAAAe,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAASpB;AAAT,AAAAI,AAAAgB,AAAA,AAAA,AAAWC;AAAX,AACE,AAAMC,AAAc,AAAA,AAAA,AAACjB,AAAAA,AAAAA;AACfU,AAAU,AAAA,AAAA,AAAA,AAEK,AAAA,AAAAQ,AAACC,AACDC,AAEAX;AAHA,AAAS,AAACL,AAAEY,AAAY,AAAA,AAAAE;AAFxBlB,AAEA,AAAA;AAIfqB,AAAU,AAACC,AAAQ,AAAA,AAAQtB,AAAIiB,AAAcD,AAAYN;AACzDa,AAAe,AAACC,AAAkBH;AAClCI,AAAgB,AAACC,AAAmBL;AACpCM,AAAY,AACC,AAAA,AAAGJ,AACH,AAAA,AAACnB,AAAE,AAACwB,AAAMH;AAZ7B,AAaMzB,AACA,AAAA,AAACM,AAAae,AACd,AAAA,AAAA,AAACf,AACD,AAAA,AAACA,AAAsBiB,AACvB,AAAA,AAAA,AAACjB,AACD,AAAA,AAACA,AAAuBmB,AACxB,AAAA,AAACnB,AAAkBqB,AACnB,AAAA,AAACrB,AAAiB,AAAA,AAACF,AAAEmB;;AAE9B","names":["re_frame.core.reg_event_db","_","exfn.logic/generate-board","p__32791","vec__32792","cljs.core.nth","db","cell-id","board","exfn.logic/has-marble?","cljs.core._EQ_","cljs.core.dissoc","cljs.core.assoc","cljs.core/set","exfn.logic/get-potential-jumps","exfn.events/translate-direction","direction","G__32795","cljs.core/Keyword","js/Error","p__32797","vec__32798","target-cell","selected-cell","p1__32796#","cljs.core.filter","cljs.core/first","new-board","exfn.logic/jump","remaining-pegs","exfn.logic/pegs-remaining","remaining-jumps","exfn.logic/remaining-jumps","game-over?","cljs.core/count"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as bf]\n            [clojure.set :as set]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:board (bf/generate-board)\n    :selected-cell nil\n    :remaining-pegs 32\n    :valid-targets []}))\n\n(rf/reg-event-db\n :select-cell\n (fn [db [_ cell-id]]\n   (let [board (:board db)]\n     (if (bf/has-marble? board cell-id)\n       (if (= (db :selected-cell) cell-id)\n         (-> db\n             (dissoc :selected-cell)\n             (assoc :targets [])\n             )\n         (-> db \n             (assoc :selected-cell cell-id)\n             (assoc :targets (set (bf/get-potential-jumps board cell-id)))))\n       db))))\n\n(defn translate-direction [direction]\n  (case direction\n    :north 0\n    :east 1\n    :west 2\n    :south 3))\n\n(rf/reg-event-db\n :jump\n (fn [db [_ target-cell]]\n   (let [selected-cell (db :selected-cell)\n         direction (->> db\n                        :targets\n                        (filter #(= target-cell (:cell %)))\n                        first\n                        :direction\n                        translate-direction)\n         new-board (bf/jump (:board db) selected-cell target-cell direction)\n         remaining-pegs (bf/pegs-remaining new-board)\n         remaining-jumps (bf/remaining-jumps new-board)\n         game-over?  (and\n                      (> remaining-pegs 1)\n                      (= (count remaining-jumps) 0))]\n     (-> db\n         (assoc :board new-board)\n         (assoc :selected-cell nil)\n         (assoc :remaining-pegs remaining-pegs)\n         (assoc :targets #{})\n         (assoc :remaining-jumps remaining-jumps)\n         (assoc :game-over? game-over?)\n         (assoc :game-win? (= remaining-pegs 1))))))\n\n(comment\n  (let [targets #{{:direction :north, :cell nil} {:direction :east, :cell 17} {:direction :west, :cell nil} {:direction :south, :cell nil}}\n        target-cell 17]\n    \n    (->> targets\n         (filter #(= target-cell (:cell %)))\n         (first)\n         :direction\n         translate-direction)\n    )\n  \n  (rf/reg-event-db\n   :set-board-near-win\n   (fn [db _]\n     {:board {1  {:id         1\n                  :has-marble false\n                  :neighbors  [nil 2 nil 4]}\n              2  {:id         2\n                  :has-marble false\n                  :neighbors  [nil 3 1 5]}\n              3  {:id         3\n                  :has-marble false\n                  :neighbors  [nil nil 2 6]}\n              4  {:id         4\n                  :has-marble false\n                  :neighbors  [1 5 nil 9]}\n              5  {:id         5\n                  :has-marble false\n                  :neighbors  [2 6 4 10]}\n              6  {:id         6\n                  :has-marble false\n                  :neighbors  [3 nil 5 11]}\n              7  {:id         7\n                  :has-marble false\n                  :neighbors  [nil 8 nil 14]}\n              8  {:id         8\n                  :has-marble false\n                  :neighbors  [nil 9 7 15]}\n              9  {:id         9\n                  :has-marble false\n                  :neighbors  [4 10 8 16]}\n              10 {:id         10\n                  :has-marble false\n                  :neighbors  [5 11 9 17]}\n              11 {:id         11\n                  :has-marble false\n                  :neighbors  [6 12 10 18]}\n              12 {:id         12\n                  :has-marble false\n                  :neighbors  [nil 13 11 19]}\n              13 {:id         13\n                  :has-marble false\n                  :neighbors  [nil nil 12 20]}\n              14 {:id         14\n                  :has-marble false\n                  :neighbors  [7 15 nil 21]}\n              15 {:id         15\n                  :has-marble false\n                  :neighbors  [8 16 14 22]}\n              16 {:id         16\n                  :has-marble true\n                  :neighbors  [9 17 15 23]}\n              17 {:id         17\n                  :has-marble false\n                  :neighbors  [10 18 16 24]}\n              18 {:id         18\n                  :has-marble true\n                  :neighbors  [11 19 17 25]}\n              19 {:id         19\n                  :has-marble true\n                  :neighbors  [12 20 18 26]}\n              20 {:id         20\n                  :has-marble false\n                  :neighbors  [13 nil 19 27]}\n              21 {:id         21\n                  :has-marble false\n                  :neighbors  [14 22 nil nil]}\n              22 {:id         22\n                  :has-marble false\n                  :neighbors  [15 23 21 nil]}\n              23 {:id         23\n                  :has-marble false\n                  :neighbors  [16 24 22 28]}\n              24 {:id         24\n                  :has-marble false\n                  :neighbors  [17 25 23 29]}\n              25 {:id         25\n                  :has-marble false\n                  :neighbors  [18 26 24 30]}\n              26 {:id         26\n                  :has-marble false\n                  :neighbors  [19 27 25 nil]}\n              27 {:id         27\n                  :has-marble false\n                  :neighbors  [20 nil 26 nil]}\n              28 {:id         28\n                  :has-marble false\n                  :neighbors  [23 29 nil 31]}\n              29 {:id         29\n                  :has-marble false\n                  :neighbors  [24 30 28 32]}\n              30 {:id         30\n                  :has-marble false\n                  :neighbors  [25 nil 29 33]}\n              31 {:id         31\n                  :has-marble false\n                  :neighbors  [28 32 nil nil]}\n              32 {:id         32\n                  :has-marble false\n                  :neighbors  [29 33 31 nil]}\n              33 {:id         33\n                  :has-marble false\n                  :neighbors  [30 nil 32 nil]}}\n      :remaining-pegs 3\n      :game-win? false\n      :game-over? false}))\n      \n)"]}