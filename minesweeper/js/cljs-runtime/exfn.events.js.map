{"version":3,"sources":["exfn/events.cljs"],"mappings":";;;;;AAKA,AAAA,AAAMA;AAAN,AACE,AAAA,AAAA,AAACC;;AAEH,AAAA,AAACC,AAEA,AAAAC,AAAKI;AAAL,AAAA,AAAAH,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQG;AAARD,AAAA,AAAAD,AAAAD,AAAA,AAAA;AAAA,AAAAC,AAAAC,AAAA,AAAA,AAAWE;AAAX,AAAAH,AAAAC,AAAA,AAAA,AAAgBG;AAAhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACU,AAAA,AAAA,AAAA,AAAA,AAACC,AAAqCF,AAAKA,AAAaC,AAGxDA;;AAQX,AAAA,AAACP,AAEA,AAAAS,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAASL;AAAT,AAAAF,AAAAO,AAAA,AAAA,AAAWE;AAAX,AACE,AAAA,AAACC,AAAMF,AAAkBC;;AAG5B,AAAA,AAACZ,AAEA,AAAAc,AAA+BT;AAA/B,AAAA,AAAAU,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA2BJ;AAA3B,AAAAQ,AAAAJ,AAAA,AAAaK;AAAb,AACE,AAAIA;AACF,AAAA,AAACC,AAAOV,AAASW;;AACjBX;;;AAEL,AAAA,AAACY,AAEA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAArB,AAAAsB,AAAA,AAAA,AAAMb;AAAN,AACE,AAAM,AAAA,AAAMA;AAAZ,AACE,AAAA,AAAA,AAACb,AAAyB,AAAA,AAAC2B,AAAe5B;;AAD5C;;;AAGH,AAAA,AAACyB,AAEA,AAAAI;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAxB,AAAAyB,AAAA,AAAA,AAAMhB;AAAN,AACE,AAAM,AAAK,AAAA,AAAMA;AAAjB,AACE,AAACiB,AAAiBjB;;AADpB;;;AAGH,AAAA,AAACkB,AAEA,AAAAC,AAAkB1B;AAAlB,AAAA,AAAA2B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAA,AAAAb,AAAAa,AAAA,AAAarB;AAAb,AAAA,AAAA,AAAA,AAAA,AACO,AAAA,AAAA,AAACE,AAAMF,AACgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AAEhC,AAAA,AAACmB,AAEA,AAAAG,AAAkB5B;AAAlB,AAAA,AAAA6B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAAgB,AAAAA;AAAA,AAAAf,AAAAe,AAAA,AAAavB;AAAb,AACE,AAAA,AAACwB;;AACD,AAAMvB,AAAO,AAAA,AAAA,AAACD,AAAAA,AAAAA;AAAd,AACE,AAACwB,AAAIxB;;AACL,AAAA,AAACwB,AAAuBvB;;AAF1B,AAAA,AAAA,AAAA,AAGO,AAAA,AAAA,AAACC,AAAMF,AACGC;;AAEpB,AAAA,AAACZ,AAEA,AAAKW,AAAGN;AAAR,AACE,AAAA,AAACgB,AAAOV,AAAayB;;AAExB,AAAA,AAACb,AAEA,AAAAc;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAlC,AAAAmC,AAAA,AAAA,AAAMC;AAAN,AAAApC,AAAAmC,AAAA,AAAA,AAAgB1B;AAAhB,AACE,AAAM2B;AAAN,AACE,AAAA,AAACJ;;AACD,AAACN,AAAiBjB;;AAFpB;;;AAIH,AAAA,AAAA4B,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAAA,AAC4B/B;AAD5B,AAAAQ,AAAAuB,AAAA,AACWG;AADX,AAAA1B,AAAAuB,AAAA,AACiBnC;AADjBoC,AAAAF;AAAA,AAAAtC,AAAAwC,AAAA,AAAA,AACiCG;AADjC,AAAA3C,AAAAwC,AAAA,AAAA,AACmCI;AADnC,AAEE,AAAMC,AAAS,AAAA,AAACC,AAAqB,AAAA,AAAA,AAACtC,AAAAA,AAAAA,AAAW,AAAA,AAAA,AAACA,AAAAA,AAAAA,AAAYmC,AAAEC;AAAhE,AACE,AAAI,AAAA,AAACG,AAAiBF;AACpB,AAAA,AAAA,AAACnC,AAAMF;;AACP,AAAMwC,AAAc,AAACC,AAAUJ,AAAS,AAAA,AAAA,AAACrC,AAAAA,AAAAA;AACnC0C,AAAc,AAACC,AAAUN,AAAS,AAAA,AAAA,AAACrC,AAAAA,AAAAA,AAAckC;AACjDU,AAAc,AAACH,AAAUD,AAAYE;AACrCG,AAAc,AAACC,AAAaF,AAAaV,AAAMtC;AAC/CmD,AAAkB/C,AACA,AAAA,AAACE,AAAgB0C,AACjB,AAAA,AAAClC,AAAcsC,AAAeJ,AAC9B,AAAA,AAAC1C,AAAiB2C;AAP1C,AAQEE;;;AAER,AAAA,AAAAE,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA8C,AAAA,AAAA,AAAA,AAAA,AAAA7C,AAAAC,AAAA4C,AAAAA;AAAAA,AACqCnD;AADrC,AAAAQ,AAAA2C,AAAA,AACWjB;AADX,AAAA1B,AAAA2C,AAAA,AACiBd;AADjB,AAAA7B,AAAA2C,AAAA,AAC0BvD;AAD1BwD,AAAAF;AAAA,AAAA1D,AAAA4D,AAAA,AAAA,AAC0CjB;AAD1C,AAAA3C,AAAA4D,AAAA,AAAA,AAC4ChB;AAD5C,AAEE,AAAMkB,AAAa,AAAA,AAAA,AAACX,AAAaR,AAAEC,AAAIC,AAASH;AAC1CM,AAAY,AAACC,AAAUa,AAAajB;AAD1C,AAEMrC,AACA,AAAA,AAACE,AAAgBsC,AACjB,AAAA,AAACtC,AAAa,AAACqD,AAAe,AAAA,AAAA,AAACvD,AAAAA,AAAAA,AAAWwC,AAC1C,AAAA,AAACtC,AAAiB,AAAC4C,AAAaN,AAAYN,AAAMtC;;AAE1D,AAAA,AAAA4D,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArD,AAAA,AAAAqD,AAAA,AAAA,AAAA,AAAA,AAAApD,AAAAC,AAAAmD,AAAAA;AAAAA,AACqC1D;AADrC,AAAAQ,AAAAkD,AAAA,AACWrB;AADX,AAAA7B,AAAAkD,AAAA,AACoBxB;AADpB,AAAA1B,AAAAkD,AAAA,AAC0B9D;AAD1B+D,AAAAF;AAAA,AAAAjE,AAAAmE,AAAA,AAAA,AAC0CxB;AAD1C,AAAA3C,AAAAmE,AAAA,AAAA,AAC4CvB;AAD5C,AAEE,AAAMI,AAAY,AAAA,AAAA,AAACC,AAAUJ,AAAYF,AAAEC;AACrCS,AAAU,AAACC,AAAaN,AAAYN,AAAMtC;AADhD,AAEMI,AACA,AAAA,AAACE,AAAgBsC,AACjB,AAAA,AAACtC,AAAa,AAAA,AAAA,AAACqD,AAAe,AAAA,AAAA,AAACvD,AAAAA,AAAAA,AAAcmC,AAAEC,AAC/C,AAAA,AAAClC,AAAiB2C;;AAE1B,AAAA,AAAC1B,AAEA,AAAA0C,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1D,AAAA,AAAA0D,AAAA,AAAA,AAAA,AAAA,AAAAzD,AAAAC,AAAAwD,AAAAA;AAAA,AAAAvD,AAAAuD,AAAA,AAAa/D;AAAbgE,AAAAF;AAAA,AAAAtE,AAAAwE,AAAA,AAAA,AAAmBtE;AAAnBuE,AAAA,AAAAzE,AAAAwE,AAAA,AAAA;AAAA,AAAAxE,AAAAyE,AAAA,AAAA,AAAsB9B;AAAtB,AAAA3C,AAAAyE,AAAA,AAAA,AAAwB7B;AAAxB,AACE,AAAA,AAACZ,AAAiBW,AAAEC;;AACtB,AAAM8B,AAAS,AAAA,AAACC,AAAO,AAAA,AAAA,AAACnE,AAAAA,AAAAA,AAAYmC,AAAEC;AAChCgC,AAAS,AAAA,AAAA,AAGE,AAAA,AAAC7B,AAAE2B,AACH,AAAA,AAAA,AAAChE,AAAMF,AAGP,AAAA,AAACuC,AAAE2B,AACH,AAAA,AAACb,AAAarD,AAAImC,AAAEC,AAIpB,AAAK,AAAS8B,AAAU,AAAAG,AAAA,AAAiBlC,AAAEC;AAAnBkC,AAAC,AAAA,AAAA,AAACtE,AAAAA,AAAAA;AAAF,AAAA,AAAAsE,AAAAA,AAAAD,AAAAC,AAAAD;AAZ1B,AAYE,AACA,AAAA,AAACpC,AAA0BjC,AAAImC,AAAEC,AAIjC,AAAA,AAACwB,AAAe5D,AAAImC,AAAEC;;AAlBvC,AAmBE,AAAA,AAACZ,AAAiB,AAAA+C,AAAI,AAAA,AAAA,AAACH,AAAAA,AAAAA;AAAL,AAAA,AAAAG;AAAAA;;AAAwB,AAAA,AAAA,AAACH,AAAAA,AAAAA;;;;AAnB7C,AAAA,AAAA,AAAA,AAoB0B,AAAA,AAAA,AAAClE,AAAMkE,AACN,AAAAG,AAAI,AAAA,AAAA,AAACH,AAAAA,AAAAA;AAAL,AAAA,AAAAG;AAAAA;;AAAwB,AAAA,AAAA,AAACH,AAAAA,AAAAA;;AAAmB,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AAEzE,AAAA,AAAC/E,AAEA,AAAAmF,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArE,AAAA,AAAAqE,AAAA,AAAA,AAAA,AAAA,AAAApE,AAAAC,AAAAmE,AAAAA;AAAAA,AAAwB1E;AAAxB,AAAAQ,AAAAkE,AAAA,AAAaE;AAAbD,AAAAF;AAAA,AAAAjF,AAAAmF,AAAA,AAAA,AAA6BjF;AAA7B,AAAAF,AAAAmF,AAAA,AAAA,AAA+BE;AAA/B,AACE,AAAMC,AAAS,AAAI,AAACF,AAAAA,AAAAA,AAAMC,AAAAA,AACT,AAAA,AAACtB,AAAeqB,AAAQC,AACxB,AAACE,AAAKH,AAAMC;AAF7B,AAGM7E,AACA,AAAA,AAACE,AAAa4E,AACd,AAAA,AAAA,AAAC5E;;AAIV,AAAA,AAACb,AAEA,AAAKW,AAAGN;AAAR,AACE,AAAA,AAACQ,AAAMF,AAAe,AAACyB,AAAI,AAAA,AAAA,AAACzB,AAAAA,AAAAA;;AAG/B,AAAA,AAACX,AAEA,AAAA2F,AAAKtF;AAAL,AAAA,AAAAuF,AAAAD;AAAA,AAAAxF,AAAAyF,AAAA,AAAA,AAAQvF;AAAR,AAAAF,AAAAyF,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAEH","names":["exfn.events/dispatch-timer-event","re-frame.core/dispatch","re_frame.core.reg_event_db","p__29431","vec__29432","cljs.core.nth","vec__29435","_","size","mines","exfn.logic/generate-full-board","p__29438","vec__29439","db","handle","cljs.core.assoc","p__29442","map__29443","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","ticking?","cljs.core.update","cljs.core/inc","re-frame.core/reg-fx","p__29445","vec__29446","js/setInterval","p__29449","vec__29450","js/clearInterval","re_frame.core.reg_event_fx","p__29453","map__29454","p__29456","map__29457","cljs.core.prn","cljs.core/not","p__29459","vec__29460","finished?","p__29463","p__29464","map__29465","vec__29466","exfn.events/reveal-numbers-with-flags","board","x","y","revealed","exfn.logic/reveal-with-flags","cljs.core._EQ_","up-revealed","clojure.set.union","also-revealed","exfn.logic/reveal","fin-revealed","game-won?","exfn.logic/game-won?","updated-db","clojure.set/difference","p__29470","p__29471","map__29472","vec__29473","exfn.events/reveal-blank","new-revealed","clojure.set.difference","p__29477","p__29478","map__29479","vec__29480","exfn.events/reveal-numbers","p__29484","p__29485","map__29486","vec__29487","vec__29490","contents","cljs.core.get_in","up-db","G__29497","fexpr__29496","or__4126__auto__","p__29498","p__29499","map__29500","vec__29501","flags","cell","up-flags","cljs.core.conj","p__29505","vec__29506","game"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as bf]\n            [clojure.set :as set]))\n\n(defn dispatch-timer-event []\n  (rf/dispatch [:tick]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ [_ [size mines]]]\n   {:board (bf/generate-full-board {:dimensions [size size] :mines mines})\n    :revealed #{}\n    :flags #{}\n    :mines mines\n    :ticking? false\n    :ticker-handle nil\n    :started false\n    :time 0\n    :game-won? false\n    :game-over? false}))\n\n(rf/reg-event-db\n :set-handle\n (fn [db [_ handle]]\n   (assoc db :ticker-handle handle)))\n\n;; on tick, update the db time (in seconds) if we are currently ticking (not paused).\n(rf/reg-event-db\n :tick\n (fn [{:keys [ticking?] :as db} _]\n   (if ticking?\n     (update db :time inc)\n     db)))\n\n(rf/reg-fx\n :start-ticker-incrementer\n (fn [[handle]]\n   (when (nil? handle)\n     (rf/dispatch [:set-handle (js/setInterval dispatch-timer-event 1000)]))))\n\n(rf/reg-fx\n :stop-ticker\n (fn [[handle]]\n   (when (not (nil? handle))\n     (js/clearInterval handle))))\n\n(rf/reg-event-fx\n :start-timer\n (fn [{:keys [db]} _]\n   {:db (assoc db :ticking? true)    \n    :start-ticker-incrementer [(db :ticker-handle)]}))\n\n(rf/reg-event-fx\n :stop-timer\n (fn [{:keys [db]} _]\n   (prn \"in :stop-timer\")\n   (let [handle (db :ticker-handle)]\n     (prn db)\n     (prn \"stopping timer. \" handle)\n     {:db (assoc db :ticker-handle nil)\n      :stop-ticker [handle]})))\n\n(rf/reg-event-db\n :pause\n (fn [db _]\n   (update db :ticking? not)))\n\n(rf/reg-fx\n :stop-if-game-finished\n (fn [[finished? handle]]\n   (when finished?\n     (prn \"finished. So stop handle\")\n     (js/clearInterval handle))))\n\n(defn reveal-numbers-with-flags\n  [{:keys [board mines] :as db} [x y]]\n  (let [revealed (bf/reveal-with-flags (db :flags) (db :board) [x y])]\n    (if (= :revealed-mine revealed)\n      (assoc db :game-over? true)\n      (let [up-revealed   (set/union revealed (db :revealed))\n            also-revealed (bf/reveal revealed (db :revealed) board)\n            fin-revealed  (set/union up-revealed also-revealed)\n            game-won?     (bf/game-won? fin-revealed board mines)\n            updated-db    (-> db\n                              (assoc :revealed fin-revealed)\n                              (update :flags set/difference fin-revealed)\n                              (assoc :game-won? game-won?))]\n        updated-db))))\n\n(defn reveal-blank\n  [{:keys [board revealed mines] :as db} [x y]]\n  (let [new-revealed (bf/reveal #{[x y]} revealed board)\n        up-revealed (set/union new-revealed revealed)]\n    (-> db\n        (assoc :revealed up-revealed)\n        (assoc :flags (set/difference (db :flags) up-revealed))\n        (assoc :game-won? (bf/game-won? up-revealed board mines)))))\n\n(defn reveal-numbers\n  [{:keys [revealed board mines] :as db} [x y]]\n  (let [up-revealed (set/union revealed #{[x y]})\n        game-won? (bf/game-won? up-revealed board mines)]\n    (-> db\n        (assoc :revealed up-revealed)\n        (assoc :flags (set/difference (db :flags) #{[x y]}))\n        (assoc :game-won? game-won?))))\n\n(rf/reg-event-fx\n :cell-click\n (fn [{:keys [db]} [_ [x y]]]\n   (prn \"cell click\" x y)\n (let [contents (get-in (db :board) [x y])\n       up-db    (cond\n\n                  ;; clicked a mine, game over :(\n                  (= contents :mine)\n                  (assoc db :game-over? true)\n\n                  ;; clicked a blank, reveal all cells until numbers.\n                  (= contents 0)\n                  (reveal-blank db [x y])\n\n                  ;; clicked a number, that isn't a blank cell. Reveal with flags\n                  ;; the cell also has to be revealed\n                  (and (number? contents) ((db :revealed) [x y]))\n                  (reveal-numbers-with-flags db [x y])\n\n                  ;; clicked an unrevealed number, so reveal it.\n                  :else\n                  (reveal-numbers db [x y]))]\n   (prn \"Finished? \" (or (up-db :game-over?) (up-db :game-won?)))\n   {:db                    (assoc up-db :started? true)\n    :stop-if-game-finished [(or (up-db :game-over?) (up-db :game-won?)) (up-db :ticker-handle)]})))\n\n(rf/reg-event-db\n :toggle-flag\n (fn [{:keys [flags] :as db} [_ cell]]\n   (let [up-flags (if (flags cell)\n                    (set/difference flags #{cell})\n                    (conj flags cell))]\n     (-> db\n         (assoc :flags up-flags)\n         (assoc :started? true)))))\n\n;; dev test events. To remove.\n\n(rf/reg-event-db\n :set-game-over\n (fn [db _]\n   (assoc db :game-over? (not (db :game-over?)))\n   ))\n\n(rf/reg-event-db\n :reset\n (fn [_ [_ game]]\n   game))\n\n(comment\n\n  \n  )"]}