{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","exfn.logic/generate-full-board","p__40500","p__40501","map__40502","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__40503","cljs.core.nth","vec__40506","board","revealed","mines","db","x","y","cljs.core.prn","contents","cljs.core.get_in","cljs.core._EQ_","cljs.core.assoc","new-revealed","exfn.logic/reveal","up-revealed","clojure.set.union","clojure.set.difference","exfn.logic/game-won?","G__40511","exfn.logic/reveal-with-flags","also-revealed","fin-revealed","updated-db","cljs.core.update","clojure.set/difference","p__40512","p__40513","map__40514","vec__40515","flags","cell","up-flags","cljs.core.conj","cljs.core/not","p__40519","vec__40520","game"],"sourcesContent":["(ns exfn.events\n  (:require [re-frame.core :as rf]\n            [exfn.logic :as bf]\n            [clojure.set :as set]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:board (bf/generate-full-board {:dimensions [16 16] :mines 40})\n    :revealed #{}\n    :flags #{}\n    :mines 40\n    :running? false\n    :game-won? false\n    :game-over? false}))\n\n(rf/reg-event-db\n :cell-click\n (fn [{:keys [board revealed mines] :as db} [_ [x y]]]\n   (prn x y)\n   (let [contents (get-in board [x y])]\n     (cond\n\n       (= contents :mine)\n       (-> db (assoc :game-over? true))\n\n       (= contents 0)\n       (let [new-revealed (bf/reveal #{[x y]} revealed board)\n             up-revealed (set/union new-revealed revealed)]\n         (-> db\n             (assoc :revealed up-revealed)\n             (assoc :flags (set/difference (db :flags) up-revealed))\n             (assoc :game-won? (bf/game-won? up-revealed board mines))))\n\n       ;; clicked a number, that isn't a blank cell. Reveal with flags\n       ;; the cell also has to be revealed\n       (and (number? contents) (revealed [x y]))\n       (let [revealed (bf/reveal-with-flags (db :flags) (db :board) [x y])]\n         (if (= :revealed-mine revealed)\n           (assoc db :game-over? true)\n           (let [up-revealed   (set/union revealed (db :revealed))\n                 also-revealed (bf/reveal revealed (db :revealed) board)\n                 fin-revealed  (set/union up-revealed also-revealed)\n                 updated-db    (-> db\n                                   (assoc :revealed fin-revealed)\n                                   (update :flags set/difference fin-revealed)\n                                   (assoc :game-won? (bf/game-won? up-revealed board mines)))]\n             ;; check if any revealed are blank.\n             ;; if so, call reveal on it.\n             updated-db)))\n\n       :else\n       (let [up-revealed (set/union revealed #{[x y]})]\n         (-> db\n             (assoc :revealed up-revealed)\n             (assoc :flags (set/difference (db :flags) #{[x y]}))\n             (assoc :game-won? (bf/game-won? up-revealed board mines))))))))\n\n(rf/reg-event-db\n :toggle-flag\n (fn [{:keys [flags] :as db} [_ cell]]\n   (let [up-flags (if (flags cell)\n                    (set/difference flags #{cell})\n                    (conj flags cell))]\n     (assoc db :flags up-flags))))\n\n;; dev test events. To remove.\n\n(rf/reg-event-db\n :set-game-over\n (fn [db _]\n   (assoc db :game-over? (not (db :game-over?)))\n   ))\n\n(rf/reg-event-db\n :reset\n (fn [_ [_ game]]\n   game))\n\n(comment\n  \n  (let [board [[:mine      1    0     1     :mine    1]\n               [  1        2    1     2       1      1]\n               [  0        1  :mine   2       1      1]\n               [  1        2    1     2     :mine    1]\n               [:mine      2    0     1       1      1]\n               [:mine      2    0     0       0      0]]\n        flags  #{[2 2]}\n        cell [3 2]\n        revealed #{[2 3]}]\n    (bf/reveal-with-flags flags board cell)\n    )\n  \n  \n  )"]}