{"version":3,"sources":["exfn/logic.cljs"],"mappings":"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","names":["p__40132","vec__40133","cljs.core.nth","exfn.logic/get-neighbour-mine-count","board","x","y","neighbour-coords","cljs.core.map","p__40136","vec__40137","xd","yd","cljs.core.get_in","cljs.core.filter","b","cljs.core._EQ_","cljs.core/count","p__40140","map__40141","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","exfn.logic/generate-board","dimensions","mines","vec__40143","width","height","cljs.core.concat","cljs.core.repeat","cljs.core/shuffle","cljs.core.partition","cljs.core/vec","exfn.logic/reducer","acc","xy","cljs.core/assoc-in","exfn.logic/get-all-cell-coords","iter__4529__auto__","s__40147","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__40149","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__40151","cljs.core/chunk-buffer","i__40150","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40148","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","iter__40146","xs","cljs.core.range","ys","exfn.logic/add-mine-counts","cell-coords","cljs.core.reduce","exfn.logic/generate-full-board","board-options","p__40152","vec__40153","exfn.logic/get-neighbours","max-x","max-y","cljs.core/set","cljs.core.remove","p__40156","vec__40157","exfn.logic/update-to-check","to-check","neighbours","revealed","clojure.set.union","clojure.set.difference","exfn.logic/reveal","get-neighbours","cljs.core.partial","cljs.core/empty?","cur","board-item","up-to-check","cljs.core.conj","exfn.logic/game-won?","total-cells","exfn.logic/get-cell-if-mine","cell","exfn.logic/reveal-with-flags","flags","neighbours-flag-count","cljs.core.keep","cell-num","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.logic\n  (:require [clojure.set :as set]))\n\n(defn get-neighbour-mine-count [board [x y]]\n  (let [neighbour-coords [[-1 1] [0 1] [1 1] [-1 0] [1 0] [-1 -1] [0 -1] [1 -1]]]\n    (->> neighbour-coords\n         (map (fn [[xd yd]] (get-in board [(+ x xd) (+ y yd)])))\n         (filter (fn [b] (= b :mine)))\n         (count))))\n\n(defn- generate-board [{:keys [dimensions mines]}]\n  (let [[width height] dimensions]\n    (->>\n     (concat (repeat mines :mine)\n             (repeat (- (* width height) mines) :blank))\n     (shuffle)\n     (partition width)\n     (map vec)\n     vec)))\n\n(defn reducer [acc xy]\n  (if (= (get-in acc xy) :mine)\n    acc\n    (assoc-in acc xy (get-neighbour-mine-count acc xy))))\n\n(defn get-all-cell-coords [board]\n  (for [xs (range (count (first board)))\n        ys (range (count board))]\n    [xs ys]))\n\n(defn add-mine-counts [board cell-coords]\n  (reduce reducer board cell-coords))\n\n(defn generate-full-board [board-options]\n  (let [board (generate-board board-options)\n        cell-coords (get-all-cell-coords board)]\n    (add-mine-counts board cell-coords)))\n\n(defn get-neighbours [max-x max-y [x y]]\n  (set (remove (fn [[x y]] (or (neg? x) (neg? y) (>= x max-x) (>= y max-y)))\n               [[x (dec y)] [(dec x) (dec y)] [(dec x) y]\n                [(dec x) (inc y)] [x (inc y)] [(inc x) (inc y)]\n                [(inc x) y] [(inc x) (dec y)]])))\n\n(defn update-to-check [to-check neighbours revealed]\n  (set/union to-check (set/difference neighbours revealed)))\n\n(defn reveal [to-check revealed board]\n  (let [get-neighbours (partial get-neighbours (count (first board)) (count board))]\n    (if (empty? to-check)\n      revealed\n      (let [cur (first to-check)\n            board-item (get-in board cur)]\n        (cond (= 0 board-item)\n              (let [neighbours (get-neighbours cur)\n                    up-to-check (update-to-check to-check neighbours revealed)]\n                (recur (set/difference up-to-check #{cur}) (conj revealed cur) board))\n\n              :else\n              (recur (set/difference to-check #{cur}) (conj revealed cur) board))))))\n\n(defn game-won? [revealed board mines]\n  (let [total-cells (count board)]\n    (= (+ (count revealed) mines)\n       (* total-cells total-cells))))\n\n(defn get-cell-if-mine [board cell]\n  (if (= :mine (get-in board cell))\n    cell\n    nil))\n\n(defn reveal-with-flags [flags board cell]\n  (let [neighbours (get-neighbours (count board) (count board) cell)\n        neighbours-flag-count (count (keep flags neighbours))\n        cell-num (get-in board cell)]\n    (if (= cell-num neighbours-flag-count)\n      ;; get all the contents of revealed cells, if any contain a mine return :mine-revealed\n      ;; else return the neighbour coords in a set.\n      ;; dont include mines that are covered by flags\n      (if (-> (keep (partial get-cell-if-mine board) neighbours)\n              (set)\n              (set/difference flags)\n              empty?) ;; if set is empty, then no mines revealed\n        (set/difference neighbours flags)\n        :revealed-mine)\n      #{})))\n"]}