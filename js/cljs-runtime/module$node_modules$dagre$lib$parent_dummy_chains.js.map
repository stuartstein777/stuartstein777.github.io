{
"version":3,
"file":"module$node_modules$dagre$lib$parent_dummy_chains.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/dagre/lib/parent-dummy-chains.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dagre$lib$parent_dummy_chains\"] = function(global,require,module,exports) {\nvar _ = require(\"./lodash\");\n\nmodule.exports = parentDummyChains;\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function(v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca &&\n               g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (pathIdx < path.length - 1 &&\n               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent &&\n           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","postorder","g","dfs","v","low","lim","_","forEach","children","result","parentDummyChains","postorderNums","graph","dummyChains","node","edgeObj","w","vPath","wPath","Math","min","max","parent","push","lca","concat","reverse","pathIdx","pathV","path","ascending","maxRank","rank","length","minRank","setParent","successors"]
}
