{
"version":3,
"file":"module$node_modules$graphlib$lib$data$priority_queue.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/graphlib/lib/data/priority-queue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphlib$lib$data$priority_queue\"] = function(global,require,module,exports) {\nvar _ = require(\"../lodash\");\n\nmodule.exports = PriorityQueue;\n\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nfunction PriorityQueue() {\n  this._arr = [];\n  this._keyIndices = {};\n}\n\n/**\n * Returns the number of elements in the queue. Takes `O(1)` time.\n */\nPriorityQueue.prototype.size = function() {\n  return this._arr.length;\n};\n\n/**\n * Returns the keys that are in the queue. Takes `O(n)` time.\n */\nPriorityQueue.prototype.keys = function() {\n  return this._arr.map(function(x) { return x.key; });\n};\n\n/**\n * Returns `true` if **key** is in the queue and `false` if not.\n */\nPriorityQueue.prototype.has = function(key) {\n  return _.has(this._keyIndices, key);\n};\n\n/**\n * Returns the priority for **key**. If **key** is not present in the queue\n * then this function returns `undefined`. Takes `O(1)` time.\n *\n * @param {Object} key\n */\nPriorityQueue.prototype.priority = function(key) {\n  var index = this._keyIndices[key];\n  if (index !== undefined) {\n    return this._arr[index].priority;\n  }\n};\n\n/**\n * Returns the key for the minimum element in this queue. If the queue is\n * empty this function throws an Error. Takes `O(1)` time.\n */\nPriorityQueue.prototype.min = function() {\n  if (this.size() === 0) {\n    throw new Error(\"Queue underflow\");\n  }\n  return this._arr[0].key;\n};\n\n/**\n * Inserts a new key into the priority queue. If the key already exists in\n * the queue this function returns `false`; otherwise it will return `true`.\n * Takes `O(n)` time.\n *\n * @param {Object} key the key to add\n * @param {Number} priority the initial priority for the key\n */\nPriorityQueue.prototype.add = function(key, priority) {\n  var keyIndices = this._keyIndices;\n  key = String(key);\n  if (!_.has(keyIndices, key)) {\n    var arr = this._arr;\n    var index = arr.length;\n    keyIndices[key] = index;\n    arr.push({key: key, priority: priority});\n    this._decrease(index);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n */\nPriorityQueue.prototype.removeMin = function() {\n  this._swap(0, this._arr.length - 1);\n  var min = this._arr.pop();\n  delete this._keyIndices[min.key];\n  this._heapify(0);\n  return min.key;\n};\n\n/**\n * Decreases the priority for **key** to **priority**. If the new priority is\n * greater than the previous priority, this function will throw an Error.\n *\n * @param {Object} key the key for which to raise priority\n * @param {Number} priority the new priority for the key\n */\nPriorityQueue.prototype.decrease = function(key, priority) {\n  var index = this._keyIndices[key];\n  if (priority > this._arr[index].priority) {\n    throw new Error(\"New priority is greater than current priority. \" +\n        \"Key: \" + key + \" Old: \" + this._arr[index].priority + \" New: \" + priority);\n  }\n  this._arr[index].priority = priority;\n  this._decrease(index);\n};\n\nPriorityQueue.prototype._heapify = function(i) {\n  var arr = this._arr;\n  var l = 2 * i;\n  var r = l + 1;\n  var largest = i;\n  if (l < arr.length) {\n    largest = arr[l].priority < arr[largest].priority ? l : largest;\n    if (r < arr.length) {\n      largest = arr[r].priority < arr[largest].priority ? r : largest;\n    }\n    if (largest !== i) {\n      this._swap(i, largest);\n      this._heapify(largest);\n    }\n  }\n};\n\nPriorityQueue.prototype._decrease = function(index) {\n  var arr = this._arr;\n  var priority = arr[index].priority;\n  var parent;\n  while (index !== 0) {\n    parent = index >> 1;\n    if (arr[parent].priority < priority) {\n      break;\n    }\n    this._swap(index, parent);\n    index = parent;\n  }\n};\n\nPriorityQueue.prototype._swap = function(i, j) {\n  var arr = this._arr;\n  var keyIndices = this._keyIndices;\n  var origArrI = arr[i];\n  var origArrJ = arr[j];\n  arr[i] = origArrJ;\n  arr[j] = origArrI;\n  keyIndices[origArrJ.key] = i;\n  keyIndices[origArrI.key] = j;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","PriorityQueue","_arr","_keyIndices","_","prototype","size","PriorityQueue.prototype.size","length","keys","PriorityQueue.prototype.keys","map","x","key","has","PriorityQueue.prototype.has","priority","PriorityQueue.prototype.priority","index","undefined","min","PriorityQueue.prototype.min","Error","add","PriorityQueue.prototype.add","keyIndices","String","arr","push","_decrease","removeMin","PriorityQueue.prototype.removeMin","_swap","pop","_heapify","decrease","PriorityQueue.prototype.decrease","PriorityQueue.prototype._heapify","i","l","r","largest","PriorityQueue.prototype._decrease","parent","PriorityQueue.prototype._swap","j","origArrI","origArrJ"]
}
