{"version":3,"sources":["validators.cljs"],"mappings":";AAEA,AAAA,AAAMA,AAAoBC;AAA1B,AACE,AAAI,AAAA,AAACC,AAAE,AAACC,AAAMF;AAAd;;AAAA;;;AAKF,AAAA,AAAMG,AAAmBH;AAAzB,AACE,AAAA,AAACC,AAAE,AAACC,AAAMF;;AAEZ,AAAA,AAAMI,AAAmBJ;AAAzB,AACE,AAAA,AAACC,AAAE,AAACC,AAAMF;;AAEZ,AAAA,AAAMK,AAA+BL;AAArC,AACE,AAAAM,AAAU,AAACC,AAAOP;;AAEpB,AAAA,AAAA,AAAA,AAAKQ,AAAaT,AAAmBM;AAErC,AAAA,AAAMI,AAAUC;AAAhB,AAAA","names":["main.validators/has-two-arguments?","line","cljs.core._EQ_","cljs.core/count","main.validators/has-one-argument?","main.validators/has-no-arguments?","main.validators/first-argument-is-a-register?","cljs.core/Keyword","cljs.core/second","main.validators/rules","main.validators/validate","lines"],"sourcesContent":["(ns main.validators)\n\n(defn has-two-arguments? [line]\n  (if (= (count line) 3)\n    \"\"\n    \n    ))\n\n(defn has-one-argument? [line]\n  (= (count line) 2))\n\n(defn has-no-arguments? [line]\n  (= (count line) 1))\n\n(defn first-argument-is-a-register? [line]\n  (keyword? (second line)))\n\n(def rules {:mov [has-two-arguments? first-argument-is-a-register?]})\n\n(defn validate [lines]\n  \n  )\n\n"]}