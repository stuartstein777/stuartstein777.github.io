{
"version":3,
"file":"module$node_modules$graphlib$lib$alg$tarjan.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,2CAAf,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACxG,IAAIC,EAAIH,OAAA,CAAQ,yCAAR,CAERC,OAAA,CAAOC,OAAP,CAEAE,QAAe,CAACC,CAAD,CAAI,CAMjBC,QAASA,IAAG,CAACC,CAAD,CAAI,CACd,IAAIC,MAAQC,OAAA,CAAQF,CAAR,CAARC,CAAqB,CACvBE,QAAS,CAAA,CADc,CAEvBC,QAASC,KAFc,CAGvBA,MAAOA,KAAA,EAHgB,CAKzBC,MAAA,CAAMC,IAAN,CAAWP,CAAX,CAEAF,EAAA,CAAEU,UAAF,CAAaR,CAAb,CAAA,CAAgBS,OAAhB,CAAwB,QAAQ,CAACC,CAAD,CAAI,CAC7Bd,CAAA,CAAEe,GAAF,CAAMT,OAAN,CAAeQ,CAAf,CAAL,CAGWR,OAAA,CAAQQ,CAAR,CAHX,CAGsBP,OAHtB,GAIEF,KAJF,CAIQG,OAJR,CAIkBQ,IAAA,CAAKC,GAAL,CAASZ,KAAT,CAAeG,OAAf,CAAwBF,OAAA,CAAQQ,CAAR,CAAxB,CAAmCL,KAAnC,CAJlB,GACEN,GAAA,CAAIW,CAAJ,CACA,CAAAT,KAAA,CAAMG,OAAN,CAAgBQ,IAAA,CAAKC,GAAL,CAASZ,KAAT,CAAeG,OAAf,CAAwBF,OAAA,CAAQQ,CAAR,CAAxB,CAAmCN,OAAnC,CAFlB,CADkC,CAApC,CASA,IAAIH,KAAJ,CAAUG,OAAV,GAAsBH,KAAtB,CAA4BI,KAA5B,CAAmC,CACjC,IAAIS;AAAO,EAEX,GAAG,CACD,IAAAJ,WAAIJ,KAAA,CAAMS,GAAN,EACJb,QAAA,CAAQQ,UAAR,CAAA,CAAWP,OAAX,CAAqB,CAAA,CACrBW,KAAA,CAAKP,IAAL,CAAUG,UAAV,CAHC,CAAH,MAISV,CAJT,GAIeU,UAJf,CAKAM,QAAA,CAAQT,IAAR,CAAaO,IAAb,CARiC,CAjBrB,CALhB,IAAIT,MAAQ,CAAZ,CACIC,MAAQ,EADZ,CAEIJ,QAAU,EAFd,CAGIc,QAAU,EA+BdlB,EAAA,CAAEmB,KAAF,EAAA,CAAUR,OAAV,CAAkB,QAAQ,CAACT,CAAD,CAAI,CACvBJ,CAAA,CAAEe,GAAF,CAAMT,OAAN,CAAeF,CAAf,CAAL,EACED,GAAA,CAAIC,CAAJ,CAF0B,CAA9B,CAMA,OAAOgB,QAzCU,CALqF;",
"sources":["node_modules/graphlib/lib/alg/tarjan.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphlib$lib$alg$tarjan\"] = function(global,require,module,exports) {\nvar _ = require(\"../lodash\");\n\nmodule.exports = tarjan;\n\nfunction tarjan(g) {\n  var index = 0;\n  var stack = [];\n  var visited = {}; // node id -> { onStack, lowlink, index }\n  var results = [];\n\n  function dfs(v) {\n    var entry = visited[v] = {\n      onStack: true,\n      lowlink: index,\n      index: index++\n    };\n    stack.push(v);\n\n    g.successors(v).forEach(function(w) {\n      if (!_.has(visited, w)) {\n        dfs(w);\n        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n      } else if (visited[w].onStack) {\n        entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [];\n      var w;\n      do {\n        w = stack.pop();\n        visited[w].onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n      results.push(cmpt);\n    }\n  }\n\n  g.nodes().forEach(function(v) {\n    if (!_.has(visited, v)) {\n      dfs(v);\n    }\n  });\n\n  return results;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","_","tarjan","g","dfs","v","entry","visited","onStack","lowlink","index","stack","push","successors","forEach","w","has","Math","min","cmpt","pop","results","nodes"]
}
