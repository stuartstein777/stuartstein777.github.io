{"version":3,"sources":["re_frame_flow/core.cljc"],"mappings":";;;AAiBA,AAAKA,AAAY,AAAA,AAACC;AAClB,AAAKC,AAAa,AAAA,AAACC;AAGnB,AAAA,AAAOC,AAAUC;AAAjB,AACE,AAAAC,AAAA;AAAAA,AAAA,AAAAA,AACE,AAAA,AAAWD,AACX,AAAAC,AAACC,AAAK,AAAA,AAAA,AAAIF,AAAiBG;AAF7BF,AAAA,AAAAA,AAIE,AAAA,AAAaD,AACb,AAAAC,AAACG,AAAU,AAACC,AAAI,AAACC,AAAIH,AAAM,AAAA,AAAaH;AAL1CC,AAAA,AAOE,AAAA,AAAiBD,AACjB,AAAA,AAAAO;AAAA,AAAE,AAAI,AAACC,AAAK,AAAA,AAAiBR;AACzB,AAAAO,AAACL,AAAO,AAAA,AAAA,AAAA,AAAA,AAAIF,AAAiCG;;AAC7C,AAAAI,AAACH,AAAY,AAACC,AAAI,AAACC,AAAI,AAAA,AAACG,AAAKN,AAAiB,AAAA,AAAiBH;;AAVrEC,AAQEA;AARFA,AAAA,AAAAA,AAYE,AAAA,AAAA,AAAA,AAAID,AACJ,AAAAC,AAACC,AAAK,AAAA,AAAA,AAAA,AAAA,AAAIF,AAAyBG;AAbrCF,AAAA,AAAAA,AAeE,AAAA,AAAA,AAAA,AAAID,AACJ,AAAAC,AAACC,AAAK,AAAA,AAAA,AAAA,AAAA,AAAIF,AAA+BG;AAhB3CF,AAAA,AAAAA,AAkBE,AAAA,AAAA,AAAA,AAAID,AACJ,AAAAC,AAACC,AAAK,AAAA,AAAA,AAAA,AAAA,AAAIF,AAAyBG;AAnBrCF,AAAA,AAAAA,AAqBE,AAAA,AAAA,AAAA,AAAID,AACJ,AAAAC,AAACC,AAAK,AAAA,AAAA,AAAA,AAAA,AAAIF,AAA+BG;AAtB3C,AAAA,AAyBE,AAAAF,AAACG,AAAcJ,AACF,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU,AACD,AAACC,AACD,AAACN;;;AAGlB,AAAA,AAAOO,AAASC;AAAhB,AACE,AAAI,AAACC,AAAmBD;AACtB,AAAA,AAAK,AAACE,AAAUF,AAAQ,AAACG,AAAKH;;AAC9B,AAACG,AAAKH;;;AAGV,AAAA,AAAOI,AAAUJ;AAAjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACO,AAACD,AAAQC,AAKCA,AACD,AAACG,AAAKH,AACD,AAACE,AAAUF;;AAMhC,AAAA,AAAOK,AAAWC,AAAIC;AAAtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACO,AAAA,AAAA,AAAU,AAACR,AAAQO,AAAS,AAACP,AAAQQ,AACjC,AAACR,AAAQO,AACT,AAACP,AAAQQ;;AAKpB,AAAA,AAAOC,AAAuBC;AAA9B,AACE,AAACC,AACC,AAAKC,AAAIC,AAAEC;AAAX,AACE,AAAMC,AAAM,AAACrB,AAAIW,AAAS,AAACW,AAAKH,AAAEC;AAC5BG,AAAM,AAACvB,AAAIY,AAAU,AAACY,AAAOL,AAAGC;AADtC,AAEE,AAACK,AAAKP,AAAI,AAACQ,AAAOL,AAAME;AAJ9B,AAMEP;;AAGJ,AAAA,AAAOW,AAAkBX;AAAzB,AACE,AAAA,AAAAY,AAAMC,AAAGC;AACHC,AAAG,AAAA,AAAKF;AACRG,AAAO,AAAA,AAAQH;AAFrB,AAGE,AAACI,AACC,AAAKJ,AAAEK;AAAP,AACE,AAAM3B,AAAG,AAAC4B,AAAQ,AAAA,AAAKD;AACjBE,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AACE,AAAC7B,AAAAA,AAAAA,AAAGwB,AAAAA,AACJ,AAAA,AAACM,AAAc,AAAA,AAAK,AAACC,AAAK,AAAC/B,AAAAA,AAAAA,AAAGyB,AAAAA;;AAH5C,AAKE,AAACO,AAAMV,AAAE,AAAA,AAAKK,AAAOA,AACF,AAAA,AAAA,AAAA,AAACM,AAAyBJ,AAC1B,AAAA,AAAA,AAAA,AAACI,AAA0B,AAAA,AAAkBJ;AATtE,AAWE,AAACrB,AAAsBC;;AAG7B,AACEyB,AACA,AACGlC,AAAGmC;AADN,AAEE,AAAA,AAAA,AAAA,AAACC,AAES,AACGC;AADH,AAEE,AAAMC,AACA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAACQ,AAAad;AAF5B,AAAA,AAAAI,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAGE,AAAAU,AAAoC,AAACD,AAAad;AAAlDe,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAyBO;AAAzB,AAAAH,AAAAJ,AAAA,AAAcM;AACRvE,AAAO,AAACgD,AAAAA,AAAAA,AAAWwB,AAAAA,AAAUD,AAAAA;AADnC,AAEE,AAAMvE,AAAO,AAAA,AAACU,AAAOV;AACfyE,AAAK,AAAC1E,AAASC;AADrB,AAEE,AAAA,AAAC4D,AAAMjE,AAAY+E,AAAW7D,AAAI8D,AAAUF;;AAC5C,AAACG,AAAO/E,AAAa,AAAA,AAAAqC,AAACD,AAAkBtC;;AAC1C,AAAA,AAACkD,AAAMK,AAAiBlD;AAT5B,AAAA,AAAA,AAAAoD;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAjB,AAAAS,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAK,AAAAN;;AAAA;AAAA,AAAA,AAAAH,AAAAD;AAAA,AAGE,AAAAiB,AAAoC,AAACN,AAAad;AAAlDoB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAAA,AAAyBE;AAAzB,AAAAH,AAAAC,AAAA,AAAcC;AACRvE,AAAO,AAACgD,AAAAA,AAAAA,AAAWwB,AAAAA,AAAUD,AAAAA;AADnC,AAEE,AAAMvE,AAAO,AAAA,AAACU,AAAOV;AACfyE,AAAK,AAAC1E,AAASC;AADrB,AAEE,AAAA,AAAC4D,AAAMjE,AAAY+E,AAAW7D,AAAI8D,AAAUF;;AAC5C,AAACG,AAAO/E,AAAa,AAAA,AAAAqC,AAACD,AAAkBtC;;AAC1C,AAAA,AAACkD,AAAMK,AAAiBlD;;AAVlC,AAWE,AAAA,AAAAoD;AAAA,AAAA,AAAAyB,AAAA,AAAAC,AAAA,AAAAC,AAAAzB,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAtE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACmB,AAAA,AAACuE,AAAAA,AAAW9B,AAAAA,AACV,AAAA,AAACa,AAAAA,AAAad,AAAAA;AAFnC,AAAA,AAAAI,AAAAuB;;AAAA;AAAA;;AAGA1B;;;AAGlB,AACE+B,AACA;;AACIrE,AAAGsE;AADP,AAEG,AAAA,AAACC,AAAavE,AAAOsE;;AACpBtE,AAAGwE,AAAaF;AAHpB,AAIG,AAAA,AAACG,AAAgBzE,AAAI0E,AACAC,AACAC,AACAJ,AAEA,AAAAK,AAAC,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA/C;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAD,AAAA,AAAA2C,AAAAA,AAAAA,AAAoC7E,AAAAA,AAAGsE,AAAAA;;;AAN3DtE,AAAGwE,AAAaF;;;AAAhBtE,AAAGwE;;AAAHxE,AAAGwE,AAAaF;;;;;;;;;AAStB,AAAA,AAAMY;AAAN,AACE,AAAA,AAACnB,AAAOjF;;AACR,AAAA,AAACiF,AAAO/E;;AAIV,AAAKmG,AAAM,AAAA,AAAIC;AACf,AAAKC,AAAY,AAAAF;AACjB,AAAA,AAAsBE;AAAtB,AAAmC,AAAA,AAACC;;AACpC,AAAWD,AAAY,AAAA,AAAA,AAAA,AAACC;AAGxB,AAAKC,AAAe,AAACC,AAAoBC;AACzC,AAAKC,AAAW,AAACF,AAAoBG;AACrC,AAAKC,AAAW,AAACJ,AAAoBK;AACrC,AAAKC,AAAS,AAACN,AAAoBO;AAEnC,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAY,AAAA,AAAClH;;AAGtB,AAAA,AAAOmH;AAAP,AACE,AAAA,AAAMC;AAEAC,AAAK,AAAAC,AAAI,AAAQC;AAAZ,AAAA,AAAAD;AAAAA;;AACE,AAAA,AAAM,AAAA,AAACE;;;AACdC,AAAM,AAAA,AAACC;AAJb,AAKE,AAAcL,AAAKI;;AACnB,AAAcA,AAAM,AAACE,AAA2BP;;AAGpD,AAAA,AAAOQ,AAAqBC,AAAgBC,AAAEC;AAA9C,AACE,AAAMhH,AAAG,AAAMgH;AACTC,AAAI,AAA0BD;AAC9BE,AAAM,AAAqBF;AAFjC,AAGE,AAACjD,AAAO+C,AAAgB9G;;AACxB,AAAC+C,AAAM/D,AACL,AAAKmI,AAASnH,AAAGa;AAAjB,AACMsG,AACF,AAAA,AAAA,AAAA,AAAClF,AAAUjC,AAAiBa,AAC5B,AAAA,AAAA,AAAA,AAAA,AAACoB,AAAUjC;AACfA,AACA,AAAIiH,AACF,AAAA,AAAA,AAASA,AAAQC,AACjB,AAAA,AAASA;;AAGjB,AAAA,AAAOE,AAAqBN,AAAgBC,AAAEC;AAA9C,AACE,AAAMhH,AAAG,AAAMgH;AACTE,AAAM,AAAqBF;AADjC,AAEE,AAAA,AAACjD,AAAO+C;;AACR,AAAC/D,AAAM/D,AACL,AAAKmI,AAASnH,AAAGa;AAAjB,AACMsG,AACF,AAAA,AAAA,AAAA,AAAClF,AAAUjC,AAAiBa,AAC5B,AAAA,AAAA,AAAA,AAAA,AAACoB,AAAUjC;AACfA,AACAkH;;AAGN,AAAA,AAAOG;AAAP,AACE,AAAMC,AAAY,AAAK3F;AAAL,AACE,AAAM4F,AAAS,AAAW,AAAU5F;AAC9B6F,AAAgB,AAAA,AAAA,AAAA,AAAA,AAACC,AAAyCF;AADhE,AAEE,AAAM,AAAA,AAAA,AAAA,AAAK,AAAKC,AACR,AAAA,AAAC1F,AAAE,AAAOH,AACV,AAAWA;AAFnB,AAGE,AAACoB,AAAMoD,AAAYuB;;AACnB,AAAiB/F;;AAJnB;;;AAKhBmF,AAAgB,AAAA,AAAC7H;AACjBkI,AAAS,AAAA,AAAClI;AAThB,AAUE,AAAA,AAAA,AAAA,AAAA,AAAC0I,AAEuB;AAAA,AACE,AAAA,AAACC,AAAqCN;;AACtC,AAAClB;AAJ3B,AAK2B;AAAA,AACE,AAAA,AAACyB,AAAwCP;AANtE,AAO0B;AAAA,AACE,AAAA,AAAMQ;AAAN,AACMC;AACAC,AAAU,AAAA,AAAA3G,AAAC4G,AAAMjJ;AACjB+H,AAAE,AAAAmB,AAAA,AAAAC,AAAWH;AAAXI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQQ;AAAR,AAAA,AACE,AAAI,AAAA,AAAOA;AACT,AAAUzD,AAAY,AAAA,AAAKyD,AAAI,AAAA,AAAA,AAAA,AAACxD,AAAgBwC,AAAcC;;AAC9D,AAAU1C,AAAY,AAAA,AAASyD,AAAI,AAAA,AAASA;;;AAHhD;AAAA,AAAAZ;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAnJ,AAAA4I,AAAQY;AAAR,AAAA,AACE,AAAI,AAAA,AAAOA;AACT,AAAUzD,AAAY,AAAA,AAAKyD,AAAI,AAAA,AAAA,AAAA,AAACxD,AAAgBwC,AAAcC;;AAC9D,AAAU1C,AAAY,AAAA,AAASyD,AAAI,AAAA,AAASA;;;AAHhD;AAAA,AAAA,AAAAD,AAAAX;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAIFnB,AAAE,AAAS3B,AAAMC;AACjB2C,AAAU,AAACe,AACC,AAAKD;AAAL,AACE,AAAI,AAAA,AAAOA;AACT,AAAME,AAAc,AAAO3D,AAAY,AAAA,AAAKyD;AAA5C,AACE,AAAA,AAAA,AAAA,AAAA,AAAC9G,AAAM8G,AAAiB,AAAG,AAAG,AAAKE,AACN,AAAA,AAAGlB,AACN,AAAA,AAAG,AAACmB,AACN,AAAG,AAAKD,AAAe,AAAA,AAAGjB;;AACpDe;;AACJd;AAjBlB,AAkBE,AAACjE,AAAOoD,AAASa;AA1B/C,AA2BmB;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGzC,AACGG,AACsB,AAACwD,AAAQrC,AAAoBC,AAC7B,AAACoC,AAAQ9B,AAAoBN,AAQjC,AAAA,AAAAzF,AAAA,AAAA,AAAK8E,AACL,AAAA,AAAA9E,AAAA,AAAA,AAAK8E,AACF,AAAA,AAAA9E,AAAA,AAAA,AAAK8E,AAGf,AAAA,AAAA9E,AAAKyF,AACH,AAAA,AAAAqC,AAACC;AAAD,AAAS,AAAA7C,AAAI,AAAA,AAAA4C;AAAJ,AAAA,AAAA5C;AAAAA;;AAAc,AAAA,AAAAlF,AAACS,AAAE,AAAA,AAAAqH,AAAarC;;AAlB1D,AAAA,AAAA,AAAA,AAAA,AAiBiB,AAAAzF,AACE,AAAAA,AAA0D8F,AACzDA,AACbrB,AACAF;;;AAI9B,AAAA,AAAOyD;AAAP,AACE,AAAA,AAAMrJ;AACAsJ,AAAM,AAACC,AAA2BvJ;AADxC,AAEE,AAAIsJ;AACFA;;AACA,AAAME,AAAU,AAAA,AAAC7C;AAAjB,AACE,AAAA,AAAe6C,AAAexJ;;AAC9B,AAAc,AAAQwG,AAAagD;;AACnC,AAACC,AAAgBD;;AACjBA;;;AAGR,AAAA,AAAME;AAAN,AACE,AAACxE;;AACD,AAAA,AAACyE,AAAatC,AAAY,AAACgC","names":["re-frame-flow.core/fx-handlers","cljs.core.atom","re-frame-flow.core/id->node-map","reagent.core.atom","re-frame-flow.core/get-deps","result","G__29761","cljs.core.conj","cljs.core/first","clojure.set.union","cljs.core/set","cljs.core.map","p1__29760#","cljs.core/map?","cljs.core.comp","cljs.core.dissoc","cljs.core/keys","re-frame-flow.core/kw->str","id","cljs.core/qualified-keyword?","cljs.core/namespace","cljs.core/name","re-frame-flow.core/id->node","re-frame-flow.core/ids->edge","id1","id2","re-frame-flow.core/create-node-and-edges","handlers","cljs.core/reduce-kv","acc","k","v","nodes","cljs.core/cons","edges","cljs.core.repeat","cljs.core.into","cljs.core.concat","re-frame-flow.core/get-id->node-map","cljs.core/deref","m","re-frame.registrar/kind->id->handler","fx","events","cljs.core.reduce","e","cljs.core.keyword","color","cljs.core._EQ_","cljs.core/last","cljs.core.assoc","cljs.core/assoc-in","re-frame.std-interceptors/fx-handler->interceptor","handler-fn","re_frame.interceptor.__GT_interceptor","context","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__29762","re-frame.trace/*current-trace*","*current-trace*-temp-val__29763","re-frame.trace/start-trace","end__28220__auto__","re-frame.interop/now","duration__28221__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","re-frame.trace/run-tracing-callbacks!","re_frame.interceptor.get_coeffect","map__29764","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__29766","event","coeffects","deps","cljs.core/update-in","clojure.set/union","cljs.core/reset!","new-trace__28222__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","re_frame.interceptor.get_effect","re-frame.core/reg-event-fx","handler","re_frame_flow$core$reg_event_fx","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/inject-global-interceptors","fexpr__29768","js/re-frame","js/re-frame.std-interceptors","js/re-frame.std-interceptors.fx-handler->interceptor","cljs.core/Var","re-frame-flow.core/clear-cache!","re-frame-flow.core/Graph","js/module$node_modules$dagre$index","re-frame-flow.core/dagre-graph","cljs.core/clj->js","re-frame-flow.core/react-flow-pro","reagent.core/adapt-react-class","js/module$node_modules$react_flow_renderer$dist$ReactFlow.ReactFlowProvider","re-frame-flow.core/react-flow","js/module$node_modules$react_flow_renderer$dist$ReactFlow.default","re-frame-flow.core/background","js/module$node_modules$react_flow_renderer$dist$ReactFlow.Background","re-frame-flow.core/controls","js/module$node_modules$react_flow_renderer$dist$ReactFlow.Controls","js/re-frame-flow","js/re-frame-flow.core","js/re-frame-flow.core.show-panel?","re-frame-flow.core/show-panel?","re-frame-flow.core/update-handles-color","css","head","or__4126__auto__","js/document","js/document.getElementsByTagName","style","js/document.createElement","js/document.createTextNode","re-frame-flow.core/on-node-mouse-enter","hovered-node-id","_","node","ns*","name*","elements","re-frame-flow.core/on-node-mouse-leave","re-frame-flow.core/flow-panel","handle-keys","tag-name","entering-input?","cljs.core/contains?","cljs.core/not","reagent.core.create_class","js/window.addEventListener","js/window.removeEventListener","width","height","elements*","cljs.core/vals","seq__29770","cljs.core/seq","chunk__29771","count__29772","i__29773","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","el","cljs.core.mapv","node-with-pos","js/Math.random","cljs.core.partial","p1__29769#","cljs.core.filter","re-frame-flow.core/panel-div","panel","js/document.getElementById","new-panel","js/window.focus","re-frame-flow.core/init!","reagent.dom.render"],"sourcesContent":["(ns re-frame-flow.core\n  (:require\n   [clojure.set :as set]\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n   [re-frame.core :as rf]\n   [re-frame.cofx :as cofx]\n   [re-frame.events :as events]\n   [re-frame.fx :as fx]\n   [re-frame.interceptor :refer [->interceptor get-effect get-coeffect]]\n   [re-frame.registrar :as rg]\n   [re-frame.std-interceptors :as std-interceptors :refer [fx-handler->interceptor]]\n   [re-frame.trace :as trace :include-macros true]\n   [\"react-flow-renderer\" :default ReactFlow :refer [addEdge Background Controls ReactFlowProvider]]\n   [\"dagre\" :as dagre]))\n\n\n(def fx-handlers (atom {}))\n(def id->node-map (r/atom {}))\n\n\n(defn- get-deps [result]\n  (cond-> #{}\n    (:dispatch result)\n    (conj (-> result :dispatch first))\n\n    (:dispatch-n result)\n    (set/union (set (map first (:dispatch-n result))))\n\n    (:dispatch-later result)\n    (#(if (map? (:dispatch-later result))\n        (conj % (-> result :dispatch-later :dispatch first))\n        (set/union % (set (map (comp first :dispatch) (:dispatch-later result))))))\n\n    (-> result :http :on-success)\n    (conj (-> result :http :on-success first))\n\n    (-> result :http-xhrio :on-success)\n    (conj (-> result :http-xhrio :on-success first))\n\n    (-> result :http :on-failure)\n    (conj (-> result :http :on-failure first))\n\n    (-> result :http-xhrio :on-failure)\n    (conj (-> result :http-xhrio :on-failure first))\n\n    true\n    (set/union (-> result\n                 (dissoc :dispatch :dispatch-n :dispatch-later :http :http-xhrio)\n                 (keys)\n                 (set)))))\n\n\n(defn- kw->str [id]\n  (if (qualified-keyword? id)\n    (str (namespace id) \"/\" (name id))\n    (name id)))\n\n\n(defn- id->node [id]\n  {:id (kw->str id)\n   :style {:fontSize 14\n           :fontFamily \"monospace\"\n           :wordBreak \"break-word\"\n           :width 200}\n   :data {:label id\n          :name (name id)\n          :namespace (namespace id)}\n   :sourcePosition \"right\"\n   :targetPosition \"left\"\n   :position {:x 0 :y 0}})\n\n\n(defn- ids->edge [id1 id2]\n  {:id (str \"e-\" (kw->str id1) \"+\" (kw->str id2))\n   :source (kw->str id1)\n   :target (kw->str id2)\n   :type \"smoothstep\"\n   :animated true})\n\n\n(defn- create-node-and-edges [handlers]\n  (reduce-kv\n    (fn [acc k v]\n      (let [nodes (map id->node (cons k v))\n            edges (map ids->edge (repeat k) v)]\n        (into acc (concat nodes edges))))\n    []\n    handlers))\n\n\n(defn- get-id->node-map [handlers]\n  (let [m @rg/kind->id->handler\n        fx (:fx m)\n        events (:event m)]\n    (reduce\n      (fn [m e]\n        (let [id (keyword (:id e))\n              color (cond\n                      (id fx) \"red\"\n                      (= :db-handler (:id (last (id events)))) \"#336edc\"\n                      :else \"green\")]\n          (assoc m (:id e) (-> e\n                             (assoc-in [:style :color] color)\n                             (assoc-in [:style :border] (str \"1px solid \" color))))))\n      {}\n      (create-node-and-edges handlers))))\n\n\n(set!\n  std-interceptors/fx-handler->interceptor\n  (fn fx-handler->interceptor\n    [id handler-fn]\n    (->interceptor\n      :id :fx-handler\n      :before (fn fx-handler-before\n                [context]\n                (let [new-context\n                      (trace/with-trace\n                        {:op-type :event/handler\n                         :operation (get-coeffect context :original-event)}\n                        (let [{:keys [event] :as coeffects} (get-coeffect context)\n                              result (handler-fn coeffects event)]\n                          (let [result (dissoc result :db)\n                                deps (get-deps result)]\n                            (swap! fx-handlers update-in [id] set/union deps)\n                            (reset! id->node-map (get-id->node-map @fx-handlers)))\n                          (assoc context :effects result)))]\n                  (trace/merge-trace!\n                    {:tags {:effects (get-effect new-context)\n                            :coeffects (get-coeffect context)}})\n                  new-context)))))\n\n\n(set!\n  rf/reg-event-fx\n  (fn reg-event-fx\n    ([id handler]\n     (reg-event-fx id nil handler))\n    ([id interceptors handler]\n     (events/register id [cofx/inject-db\n                          fx/do-fx\n                          std-interceptors/inject-global-interceptors\n                          interceptors\n                          ;; due to hot reload warning...\n                          ((resolve 'fx-handler->interceptor) id handler)]))))\n\n\n(defn clear-cache! []\n  (reset! fx-handlers {})\n  (reset! id->node-map {}))\n\n;;--------------------------------------- View component ---------------------------------------\n\n(def Graph (.. dagre -graphlib -Graph))\n(def dagre-graph (Graph.))\n(.setDefaultEdgeLabel dagre-graph #(clj->js {}))\n(.setGraph dagre-graph (clj->js {:rankdir \"LR\"}))\n\n\n(def react-flow-pro (r/adapt-react-class ReactFlowProvider))\n(def react-flow (r/adapt-react-class ReactFlow))\n(def background (r/adapt-react-class Background))\n(def controls (r/adapt-react-class Controls))\n\n(defonce show-panel? (r/atom false))\n\n\n(defn- update-handles-color []\n  (let [css \".react-flow__handle { background: white !important;\n                                   border: 1px solid #b1b1b7 !important;}\"\n        head (or (.-head js/document)\n               (aget (js/document.getElementsByTagName \"head\") 0))\n        style (js/document.createElement \"style\")]\n    (.appendChild head style)\n    (.appendChild style (js/document.createTextNode css))))\n\n\n(defn- on-node-mouse-enter [hovered-node-id _ node]\n  (let [id (.-id node)\n        ns* ^String (.-data.namespace node)\n        name* ^String (.-data.name node)]\n    (reset! hovered-node-id id)\n    (swap! id->node-map\n      (fn [elements id v]\n        (-> elements\n          (assoc-in [id :data :label] v)\n          (assoc-in [id :style :zIndex] 4)))\n      id\n      (if ns*\n        (str \":\" ns* \"/\" name*)\n        (str \":\" name*)))))\n\n\n(defn- on-node-mouse-leave [hovered-node-id _ node]\n  (let [id (.-id node)\n        name* ^String (.-data.name node)]\n    (reset! hovered-node-id nil)\n    (swap! id->node-map\n      (fn [elements id v]\n        (-> elements\n          (assoc-in [id :data :label] v)\n          (assoc-in [id :style :zIndex] 3)))\n      id\n      name*)))\n\n\n(defn- flow-panel []\n  (let [handle-keys (fn [e]\n                      (let [tag-name (.-tagName (.-target e))\n                            entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                        (when (and (not entering-input?)\n                                (= (.-key e) \"g\")\n                                (.-ctrlKey e))\n                          (swap! show-panel? not)\n                          (.preventDefault e))))\n        hovered-node-id (r/atom nil)\n        elements (r/atom [])]\n    (r/create-class\n      {:display-name \"Flow Panel\"\n       :component-did-mount (fn []\n                              (js/window.addEventListener \"keydown\" handle-keys)\n                              (update-handles-color))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys))\n       :component-will-update (fn []\n                                (let [width 280\n                                      height 36\n                                      elements* (vals @id->node-map)\n                                      _ (doseq [el elements*]\n                                          (if (:data el)\n                                            (.setNode dagre-graph (:id el) (clj->js {:width width :height height}))\n                                            (.setEdge dagre-graph (:source el) (:target el))))\n                                      _ (.layout dagre dagre-graph)\n                                      elements* (mapv\n                                                  (fn [el]\n                                                    (if (:data el)\n                                                      (let [node-with-pos (.node dagre-graph (:id el))]\n                                                        (assoc el :position {:x (+ (- (.-x node-with-pos)\n                                                                                     (/ width 2))\n                                                                                  (/ (js/Math.random) 1000))\n                                                                             :y (- (.-y node-with-pos) (/ height 2))}))\n                                                      el))\n                                                  elements*)]\n                                  (reset! elements elements*)))\n       :reagent-render (fn []\n                         [react-flow-pro\n                            [react-flow\n                             {:on-node-mouse-enter (partial on-node-mouse-enter hovered-node-id)\n                              :on-node-mouse-leave (partial on-node-mouse-leave hovered-node-id)\n                              :default-position [10 10]\n                              :style {:width \"100%\"\n                                      :height \"100vh\"\n                                      :position \"absolute\"\n                                      :top \"0\"\n                                      :left \"0\"\n                                      :background \"white\"\n                                      :opacity (if @show-panel? \"9999\" \"0\")\n                                      :z-index (if @show-panel? \"9999\" \"0\")\n                                      :visibility (if @show-panel? \"visible\" \"hidden\")}\n                              :snap-to-grid true\n                              :snap-grid [15 15]\n                              :elements (if @hovered-node-id\n                                          (filter #(or (:data %) (= (:source %) @hovered-node-id)) @elements)\n                                          @elements)}\n                             [controls]\n                             [background\n                              {:color \"#aaa\"}]]])})))\n\n\n(defn- panel-div []\n  (let [id \"--re-frame-flow--\"\n        panel (js/document.getElementById id)]\n    (if panel\n      panel\n      (let [new-panel (js/document.createElement \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n\n(defn init! []\n  (clear-cache!)\n  (rdom/render [flow-panel] (panel-div)))\n"]}