{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","exfn.events/dispatch-timer-event","re-frame.core/dispatch","p__35039","vec__35040","cljs.core.nth","db","source","cljs.core.assoc","re-frame.core/reg-fx","js/document","re_frame.core.reg_event_fx","p__35043","map__35044","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parsed","exfn.parser/parse","symbol-table","exfn.interpreter/build-symbol-table","cljs.core/count","scroll-pos","p__35046","p__35047","map__35048","vec__35049","p__35053","p__35054","map__35055","vec__35056","breakpoints","line-no","clojure.set.difference","cljs.core.conj","p__35060","vec__35061","handle","p__35064","vec__35065","running?","speed","js/setInterval","js/clearInterval","eip","p__35068","map__35069","cljs.core/not","p__35071","vec__35072","finished?","p__35075","map__35076","p__35078","map__35079","map__35081","memory","exfn.interpreter/interpret","G__35083","cljs.core/assoc-in","p__35084","vec__35085","vec__35088","k","v","cljs.core.update_in","cljs.core/assoc","p__35091","vec__35092","p__35095","vec__35096","cljs.core/conj"],"sourcesContent":["(ns exfn.events\r\n  (:require [exfn.parser :refer [parse]]\r\n            [re-frame.core :as rf]\r\n            [exfn.interpreter :as interp]\r\n            [clojure.set :as set]))\r\n\r\n(rf/reg-event-db\r\n :initialize\r\n (fn [_ _]\r\n   {:source      \".macros\r\n   %initialize\r\n      mov %1 0\r\n      mov %2 0\r\n   %end\r\n   %square-and-sum\r\n      mul %1 %1\r\n      mul %2 %2\r\n      add %1 %2\r\n   %end\r\n   %add-ten\r\n       add %1 10\r\n   %end\r\n.code\r\n    initialize(:a, :b)\r\n    mov :a 2\r\n    mov :b 5\r\n    mov :c 4\r\n    square-and-sum(:a, :b)\r\n    square-and-sum(:a, :c)\r\n    rep 2\r\n      rep 3\r\n          call foo\r\n      rp\r\n   rp\r\n   mov :s 'a = '\r\n   cat :s :a\r\n   prn :s\r\n   end\r\n\r\n\r\nfoo:\r\n   call bar\r\n   ret\r\n\r\nbar:\r\n   add-ten (:a)\r\n   ret\"\r\n    :breakpoints #{}\r\n    :code        []\r\n    :finished? false\r\n    :has-parsed-code? false\r\n    :memory {:eip                0\r\n             :registers          {}\r\n             :eip-stack          []\r\n             :internal-registers {}\r\n             :stack              []\r\n             :symbol-table       {}\r\n             :rep-counters-stack []\r\n             :last-edit-register nil\r\n             :output \"$ Toy Asm Output >\"}\r\n    :on-breakpoint false    \r\n    :running? false\r\n    :running-speed 200\r\n    :ticker-handle nil}))\r\n\r\n(defn dispatch-timer-event []\r\n  (rf/dispatch [:next-instruction]))\r\n\r\n;; Handles the user typing into the source control editor.\r\n(rf/reg-event-db\r\n :update-source\r\n (fn [db [_ source]]\r\n   (assoc db :source source)))\r\n\r\n(rf/reg-fx\r\n :scroll-parsed-code-to-top\r\n (fn [_]\r\n   (-> js/document\r\n       (.getElementById \"code-container\")\r\n       (.-scrollTop)\r\n       (set! 0))))\r\n\r\n;; Handles when the user clicks the Parse button.\r\n(rf/reg-event-fx\r\n :parse\r\n (fn [{:keys [db]} _]\r\n   (let [parsed (parse (db :source))\r\n         symbol-table (interp/build-symbol-table parsed)]\r\n     {:db\r\n      (-> db\r\n          (assoc :memory {:eip                0\r\n                          :registers          {}\r\n                          :eip-stack          []\r\n                          :internal-registers {}\r\n                          :stack              []\r\n                          :rep-counters-stack []\r\n                          :output             (-> db :memory :output)\r\n                          :symbol-table       symbol-table})\r\n          (assoc :code parsed)\r\n          (assoc :on-breakpoint false)\r\n          (assoc :has-parsed-code? (pos? (count parsed)))\r\n          (assoc :finished? false)\r\n          (assoc :running? false))\r\n      :scroll-parsed-code-to-top _\r\n      :end-running (db :ticker-handle)})))\r\n\r\n; Handles when the user clicks the Clear Parsed button\r\n(rf/reg-event-db\r\n :clear-parsed\r\n (fn [db _]\r\n   (-> db\r\n       (assoc :code [])\r\n       (assoc :running? false)\r\n       (assoc :has-parsed-code? false)\r\n       (assoc :on-breakpoint false)\r\n       (assoc :memory {:eip                0\r\n                       :registers          {}\r\n                       :eip-stack          []\r\n                       :internal-registers {}\r\n                       :output             (-> db :memory :output)\r\n                       :stack              []\r\n                       :symbol-table       []}))))\r\n\r\n; Handles when the user clicks Clear Breakpoints button\r\n(rf/reg-event-db\r\n :clear-breakpoints\r\n (fn [db _]\r\n   (assoc db :breakpoints #{})))\r\n\r\n;; ====================================================================\r\n;; Source Code Editor events\r\n;; ====================================================================\r\n\r\n; replace with\r\n;(reagent/with-let [ref2 (reagent/atom nil)]\r\n;   [:div\r\n;    [:textarea {:on-scroll (fn [^js e] (when-some [node2 @ref2] ...))}]\r\n;    [:textarea {:ref #(reset! ref2 %)}]])\r\n\r\n(rf/reg-fx\r\n :scroll-line-nos\r\n (fn [scroll-pos]\r\n   (-> js/document\r\n       (.getElementById \"lineNos\")\r\n       (.-scrollTop)\r\n       (set! scroll-pos))))\r\n\r\n(rf/reg-event-fx\r\n :update-scroll\r\n (fn [{:keys [db]} [_ scroll-pos]]\r\n   {:db (assoc db :scroll-pos scroll-pos)\r\n    :scroll-line-nos scroll-pos}))\r\n\r\n(rf/reg-event-db\r\n :clear-source\r\n (fn [db _]\r\n   (assoc db :source \"\")))\r\n\r\n;; ===================================================================\r\n;; Parsed code events\r\n;; ===================================================================\r\n(rf/reg-event-db\r\n :toggle-breakpoint\r\n (fn [{:keys [breakpoints] :as db} [_ line-no]]\r\n   (assoc db :breakpoints (if (some? (breakpoints line-no))\r\n                            (set/difference  breakpoints #{line-no})\r\n                            (conj breakpoints line-no)))))\r\n\r\n;; ===================================================================\r\n;; Code execution control events\r\n;; ===================================================================\r\n(rf/reg-event-db\r\n :set-handle\r\n (fn [db [_ handle]]\r\n   (assoc db :ticker-handle handle)))\r\n\r\n(rf/reg-fx\r\n :toggle-running\r\n (fn [[running? handle speed]]\r\n   (if running?\r\n     (rf/dispatch [:set-handle (js/setInterval dispatch-timer-event speed)])\r\n     (js/clearInterval handle))))\r\n\r\n(rf/reg-fx\r\n :scroll-current-code-into-view\r\n (fn [eip]\r\n   (-> js/document\r\n       (.getElementById \"code-container\")\r\n       (.-scrollTop)\r\n       (set! (* eip 25)))))\r\n\r\n(rf/reg-event-fx\r\n :toggle-running\r\n (fn [{:keys [db]} _]\r\n   {:db (assoc db :running? (not (db :running?)))\r\n    :toggle-running [(not (db :running?)) (db :ticker-handle) (db :running-speed)]}))\r\n\r\n(rf/reg-fx\r\n :end-running\r\n (fn [handle]\r\n   (js/clearInterval handle)))\r\n\r\n(rf/reg-fx\r\n :end-if-finished\r\n (fn [[handle finished?]]\r\n   (when finished?\r\n     (js/clearInterval handle))))\r\n\r\n(rf/reg-event-fx\r\n :reset\r\n (fn [{:keys [db]} _]\r\n   {:db (-> db\r\n            (assoc :memory {:eip                0\r\n                            :registers          {}\r\n                            :eip-stack          []\r\n                            :internal-registers {}\r\n                            :stack              []\r\n                            :rep-counters-stack []\r\n                            :symbol-table (:symbol-table (:memory db))\r\n                            :output (-> db :memory :output)})\r\n            (assoc :running? false)\r\n            (assoc :on-breakpoint false)\r\n            (assoc :finished? false))\r\n    :toggle-running [false (db :ticker-handle)]\r\n    :scroll-parsed-code-to-top _}))\r\n\r\n(rf/reg-event-fx\r\n :next-instruction\r\n (fn [{:keys [db]} _]\r\n   (let [{:keys [memory finished?]} (exfn.interpreter/interpret (db :code) (db :memory))\r\n         breakpoints (db :breakpoints)\r\n         db (-> db\r\n                (assoc :memory memory)\r\n                (assoc :finished? finished?)\r\n                (assoc :running? (if finished? false (db :running?))))]\r\n     (if (some? (breakpoints (:eip memory)))\r\n       {:db (-> db\r\n                (assoc :on-breakpoint true)\r\n                (assoc :running? false))\r\n        :scroll-current-code-into-view (:eip memory)\r\n        :toggle-running [false (db :ticker-handle)]}\r\n       {:db (-> db\r\n                (assoc :on-breakpoint false))\r\n        :scroll-current-code-into-view (:eip memory)\r\n        :end-if-finished [(db :ticker-handle) finished?]}))))\r\n\r\n(rf/reg-event-db\r\n :clear-output\r\n (fn [db _]\r\n   (assoc-in db [:memory :output] \"$ Toy Asm Output >\")))\r\n\r\n ;;================== DEV TEST EVENTS ==================================\r\n(rf/reg-event-db\r\n :add-value-to-registers\r\n (fn [db [_ [k v]]]\r\n   (update-in db [:memory :registers] assoc k v)))\r\n\r\n(rf/reg-event-db\r\n :update-running-speed\r\n (fn [db [_ speed]]\r\n   (assoc db :running-speed speed)))\r\n\r\n(rf/reg-event-db\r\n :add-value-to-stack\r\n (fn [db [_ v]]\r\n   (update-in db [:memory :stack] conj v)))\r\n\r\n(rf/reg-event-db\r\n :reset-eip\r\n (fn [db _]\r\n   (assoc-in db [:memory :eip] 0)))\r\n\r\n(rf/reg-event-db\r\n :test-code\r\n (fn [db _]\r\n   (assoc db :source \"; function calls.\r\nmov :a 0    ; a = 0\r\nmov :b 1    ; a = 0, b = 1\r\nmov :c 2    ; a = 0, b = 1, c = 2\r\ncall foo   ; move eip to foo, push eip to eip-stack\r\nmul :c :b    ; a = 0, b = 2, c = 4\r\ncmp :a :b    ; :cmp = lt\r\njne quax   ; jump\r\nmul :c 10   ;\r\n                      \r\n\r\n;; quax:: call bar and zero :b\r\nquax:      ;\r\nnop        ;\r\ncall bar   ; move eip to bar, push eip to eip-stack\r\nxor :b :b    ; a = 7, b = 0, c = 3\r\nend        ; a = 7, b = 0, c = 3\r\n                      \r\n\r\n;; foo:: increment b\r\nfoo:\r\ninc :b      ; a = 0, b = 2, c = 2\r\nret        ; ret to foo call, pop eip stack\r\n\r\n\r\n;; bar:: add 7 to a and decrement c\r\nbar:\r\nadd :a 7    ; a = 7, b = 2, c = 4\r\nsub :c 1    ; a = 7, b = 2, c = 3\r\nret        ; ret to bar call, pop eip stack\")))"]}