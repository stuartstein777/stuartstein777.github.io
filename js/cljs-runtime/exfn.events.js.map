{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","exfn.events/dispatch-timer-event","re-frame.core/dispatch","p__48809","vec__48810","cljs.core.nth","db","source","cljs.core.assoc","re-frame.core/reg-fx","js/document","exfn.events/fill-data","data","cljs.core/zipmap","cljs.core.map","cljs.core/first","cljs.core/second","re_frame.core.reg_event_fx","p__48813","map__48814","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parsed","exfn.parser/parse","symbol-table","exfn.interpreter/build-symbol-table","cljs.core/count","scroll-pos","p__48816","p__48817","map__48818","vec__48819","p__48823","p__48824","map__48825","vec__48826","breakpoints","line-no","clojure.set.difference","cljs.core.conj","p__48830","vec__48831","handle","p__48834","vec__48835","running?","speed","js/setInterval","js/clearInterval","eip","p__48838","map__48839","cljs.core/not","p__48841","vec__48842","finished?","p__48845","map__48846","p__48848","map__48849","map__48851","memory","terminated?","exfn.interpreter/interpret","G__48853","or__4126__auto__","cljs.core/assoc-in","p__48854","vec__48855","vec__48858","k","v","cljs.core.update_in","cljs.core/assoc","p__48861","vec__48862","p__48865","vec__48866","cljs.core/conj"],"sourcesContent":["(ns exfn.events\n  (:require [exfn.parser :refer [parse]]\n            [re-frame.core :as rf]\n            [exfn.interpreter :as interp]\n            [clojure.set :as set]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:source      \".macros\n   %square-and-sum\n      mul %1 %1\n      mul %2 %2\n      add %1 %2\n   %end\n   %add-ten\n      add %1 10\n   %end\n\n.code\n; function calls.\nmov :a 0    ; a = 0\nmov :b 1    ; a = 0, b = 1\nsquare-and-sum(:a, :b)\nmov :c 2    ; a = 0, b = 1, c = 2\nprn :b\ncall foo   ; move eip to foo, push eip to eip-stack\nmul :c :b    ; a = 0, b = 2, c = 4\ncmp :a :b    ; :cmp = lt\njne quax   ; jump\nmul :c 10   ;\n\n\n;; quax:: call bar and zero :b\nquax:      ;\nnop        ;\ncall bar   ; move eip to bar, push eip to eip-stack\npop :d\npop :e\nprn :d\nprn :e\nxor :b :b    ; a = 7, b = 0, c = 3\nend        ; a = 7, b = 0, c = 3\n\n\n;; foo:: increment b\nfoo:\ninc :b      ; a = 0, b = 2, c = 2\nret        ; ret to foo call, pop eip stack\n\n\n;; bar:: add 7 to a and decrement c\nbar:\nadd :a 7    ; a = 7, b = 2, c = 4\nsub :c 1    ; a = 7, b = 2, c = 3\npush 3\npush 4\nret        ; ret to bar call, pop eip stack\n\n.data\nxyz 123\"\n    :breakpoints #{}\n    :code        []\n    :finished? false\n    :has-parsed-code? false\n    :memory {:eip                 0\n             :registers           {}\n             :eip-stack           []\n             :internal-registers  {}\n             :stack               []\n             :termination-message \"\"\n             :symbol-table        {}\n             :rep-counters-stack  []\n             :last-edit-register  nil\n             :output              \"$ Toy Asm Output >\"}\n    :on-breakpoint false    \n    :running? false\n    :running-speed 250\n    :ticker-handle nil}))\n\n(defn dispatch-timer-event []\n  (rf/dispatch [:next-instruction]))\n\n;; Handles the user typing into the source control editor.\n(rf/reg-event-db\n :update-source\n (fn [db [_ source]]\n   (assoc db :source source)))\n\n(rf/reg-fx\n :scroll-parsed-code-to-top\n (fn [_]\n   (-> js/document\n       (.getElementById \"code-container\")\n       (.-scrollTop)\n       (set! 0))))\n\n(defn fill-data [data]\n  (zipmap (map first data) (map second data)))\n\n(fill-data [\"foo 42\" \"quax `this is a string`\" \"bar 'abc `def` ghi'\"])\n\n;; Handles when the user clicks the Parse button.\n(rf/reg-event-fx\n :parse\n (fn [{:keys [db]} _]\n   (let [parsed (parse (db :source))\n         symbol-table (interp/build-symbol-table (parsed :code))]\n     {:db\n      (-> db\n          (assoc :memory {:eip                0\n                          :registers (fill-data (parsed :data))\n                          :eip-stack          []\n                          :internal-registers {}\n                          :stack              []\n                          :rep-counters-stack []\n                          :termination-message \"\"\n                          :output             (-> db :memory :output)\n                          :symbol-table       symbol-table})\n          (assoc :code (parsed :code))\n          (assoc :on-breakpoint false)\n          (assoc :has-parsed-code? (pos? (count (parsed :code))))\n          (assoc :finished? false)\n          (assoc :running? false))\n      :scroll-parsed-code-to-top _\n      :end-running (db :ticker-handle)})))\n\n; Handles when the user clicks the Clear Parsed button\n(rf/reg-event-db\n :clear-parsed\n (fn [db _]\n   (-> db\n       (assoc :code [])\n       (assoc :running? false)\n       (assoc :has-parsed-code? false)\n       (assoc :on-breakpoint false)\n       (assoc :memory {:eip                0\n                       :registers          {}\n                       :eip-stack          []\n                       :internal-registers {}\n                       :output             (-> db :memory :output)\n                       :stack              []\n                       :symbol-table       []}))))\n\n; Handles when the user clicks Clear Breakpoints button\n(rf/reg-event-db\n :clear-breakpoints\n (fn [db _]\n   (assoc db :breakpoints #{})))\n\n;; ====================================================================\n;; Source Code Editor events\n;; ====================================================================\n\n; replace with\n;(reagent/with-let [ref2 (reagent/atom nil)]\n;   [:div\n;    [:textarea {:on-scroll (fn [^js e] (when-some [node2 @ref2] ...))}]\n;    [:textarea {:ref #(reset! ref2 %)}]])\n\n(rf/reg-fx\n :scroll-line-nos\n (fn [scroll-pos]\n   (-> js/document\n       (.getElementById \"lineNos\")\n       (.-scrollTop)\n       (set! scroll-pos))))\n\n(rf/reg-event-fx\n :update-scroll\n (fn [{:keys [db]} [_ scroll-pos]]\n   {:db (assoc db :scroll-pos scroll-pos)\n    :scroll-line-nos scroll-pos}))\n\n(rf/reg-event-db\n :clear-source\n (fn [db _]\n   (assoc db :source \"\")))\n\n;; ===================================================================\n;; Parsed code events\n;; ===================================================================\n(rf/reg-event-db\n :toggle-breakpoint\n (fn [{:keys [breakpoints] :as db} [_ line-no]]\n   (assoc db :breakpoints (if (some? (breakpoints line-no))\n                            (set/difference  breakpoints #{line-no})\n                            (conj breakpoints line-no)))))\n\n;; ===================================================================\n;; Code execution control events\n;; ===================================================================\n(rf/reg-event-db\n :set-handle\n (fn [db [_ handle]]\n   (assoc db :ticker-handle handle)))\n\n(rf/reg-fx\n :toggle-running\n (fn [[running? handle speed]]\n   (if running?\n     (rf/dispatch [:set-handle (js/setInterval dispatch-timer-event speed)])\n     (js/clearInterval handle))))\n\n(rf/reg-fx\n :scroll-current-code-into-view\n (fn [eip]\n   (-> js/document\n       (.getElementById \"code-container\")\n       (.-scrollTop)\n       (set! (* eip 25)))))\n\n(rf/reg-event-fx\n :toggle-running\n (fn [{:keys [db]} _]\n   {:db (assoc db :running? (not (db :running?)))\n    :toggle-running [(not (db :running?)) (db :ticker-handle) (db :running-speed)]}))\n\n(rf/reg-fx\n :end-running\n (fn [handle]\n   (js/clearInterval handle)))\n\n(rf/reg-fx\n :end-if-finished\n (fn [[handle finished?]]\n   (when finished?\n     (js/clearInterval handle))))\n\n(rf/reg-event-fx\n :reset\n (fn [{:keys [db]} _]\n   {:db (-> db\n            (assoc :memory {:eip                 0\n                            :registers           {}\n                            :eip-stack           []\n                            :internal-registers  {}\n                            :stack               []\n                            :termination-message \"\"\n                            :rep-counters-stack  []\n                            :symbol-table        (:symbol-table (:memory db))\n                            :output              (-> db :memory :output)})\n            (assoc :running? false)\n            (assoc :on-breakpoint false)\n            (assoc :finished? false))\n    :toggle-running [false (db :ticker-handle)]\n    :scroll-parsed-code-to-top _}))\n\n(rf/reg-event-fx\n :next-instruction\n (fn [{:keys [db]} _]\n   (let [{:keys [memory finished? terminated?]} (exfn.interpreter/interpret (db :code) (db :memory))\n         breakpoints (db :breakpoints)\n         db (-> db\n                (assoc :memory memory)\n                (assoc :finished? finished?)\n                (assoc :running? (if finished? false (db :running?))))]\n     (cond\n       ;; We are on a breakpoint.\n       (some? (breakpoints (:eip memory)))\n       {:db                            (-> db\n                                           (assoc :on-breakpoint true)\n                                           (assoc :running? false))\n        :scroll-current-code-into-view (:eip memory)\n        :toggle-running                [false (db :ticker-handle)]}\n\n       ;; Program eip was moved beyond last instruction.\n       terminated?\n       {:db (-> db\n                (assoc :terminated? terminated?)\n                (assoc :on-breakpoint false)\n                (assoc :finished? true)\n                (assoc :termination-message \"EIP moved beyond last instruction. Program terminated.\")\n                (assoc :running? false))\n        :end-if-finished               [(db :ticker-handle) (or finished? terminated?)]}\n\n       ;; Program finished by hitting an :end instruction.\n       finished?\n       {:db              (-> db\n                             (assoc :terminated? false)\n                             (assoc :on-breakpoint false)\n                             (assoc :finished? true)\n                             (assoc :running? false))\n        :end-if-finished [(db :ticker-handle) (or finished? terminated?)]}\n\n       ;; Otherwise it's ok to continue.\n       :else\n       {:db                            (assoc db :on-breakpoint false)\n        :scroll-current-code-into-view (:eip memory)\n        :end-if-finished               [(db :ticker-handle) (or finished? terminated?)]}))))\n\n(rf/reg-event-db\n :clear-output\n (fn [db _]\n   (assoc-in db [:memory :output] \"$ Toy Asm Output >\")))\n\n ;;================== DEV TEST EVENTS ==================================\n(rf/reg-event-db\n :add-value-to-registers\n (fn [db [_ [k v]]]\n   (update-in db [:memory :registers] assoc k v)))\n\n(rf/reg-event-db\n :update-running-speed\n (fn [db [_ speed]]\n   (assoc db :running-speed speed)))\n\n(rf/reg-event-db\n :add-value-to-stack\n (fn [db [_ v]]\n   (update-in db [:memory :stack] conj v)))\n\n(rf/reg-event-db\n :reset-eip\n (fn [db _]\n   (assoc-in db [:memory :eip] 0)))\n\n(rf/reg-event-db\n :test-code\n (fn [db _]\n   (assoc db :source \"; function calls.\nmov :a 0    ; a = 0\nmov :b 1    ; a = 0, b = 1\nmov :c 2    ; a = 0, b = 1, c = 2\ncall foo   ; move eip to foo, push eip to eip-stack\nmul :c :b    ; a = 0, b = 2, c = 4\ncmp :a :b    ; :cmp = lt\njne quax   ; jump\nmul :c 10   ;\n                      \n\n;; quax:: call bar and zero :b\nquax:      ;\nnop        ;\ncall bar   ; move eip to bar, push eip to eip-stack\nxor :b :b    ; a = 7, b = 0, c = 3\nend        ; a = 7, b = 0, c = 3\n                      \n\n;; foo:: increment b\nfoo:\ninc :b      ; a = 0, b = 2, c = 2\nret        ; ret to foo call, pop eip stack\n\n\n;; bar:: add 7 to a and decrement c\nbar:\nadd :a 7    ; a = 7, b = 2, c = 4\nsub :c 1    ; a = 7, b = 2, c = 3\nret        ; ret to bar call, pop eip stack\")))"]}