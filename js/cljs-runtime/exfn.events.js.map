{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","exfn.events/dispatch-timer-event","re-frame.core/dispatch","p__29760","vec__29761","cljs.core.nth","db","source","cljs.core.assoc","re-frame.core/reg-fx","js/document","exfn.events/fill-data-registers","data","cljs.core/zipmap","cljs.core.map","cljs.core/first","cljs.core/second","re_frame.core.reg_event_fx","p__29764","map__29765","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parsed","exfn.parser/parse","symbol-table","exfn.interpreter/build-symbol-table","cljs.core/count","p__29767","map__29768","scroll-pos","p__29770","p__29771","map__29772","vec__29773","p__29777","p__29778","map__29779","vec__29780","breakpoints","line-no","clojure.set.difference","cljs.core.conj","p__29784","vec__29785","handle","p__29788","vec__29789","running?","speed","js/setInterval","js/clearInterval","eip","p__29792","map__29793","cljs.core/not","p__29795","vec__29796","finished?","p__29799","map__29800","p__29802","map__29803","map__29805","memory","terminated?","exfn.interpreter/interpret","G__29807","or__4126__auto__","cljs.core/assoc-in","p__29808","vec__29809","vec__29812","k","v","cljs.core.update_in","cljs.core/assoc","p__29815","vec__29816","p__29819","vec__29820","cljs.core/conj"],"sourcesContent":["(ns exfn.events\n  (:require [exfn.parser :refer [parse]]\n            [re-frame.core :as rf]\n            [exfn.interpreter :as interp]\n            [clojure.set :as set]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:source      \".macros\n   %square-and-sum\n      mul %1 %1\n      mul %2 %2\n      add %1 %2\n   %end\n   %add-ten\n      add %1 10\n   %end\n\n.code\n; function calls.\nmov :a 0    ; a = 0\nmov :b 1    ; a = 0, b = 1\nsquare-and-sum(:a, :b)\nmov :c 2    ; a = 0, b = 1, c = 2\nprn :b\ncall foo   ; move eip to foo, push eip to eip-stack\nmul :c :b    ; a = 0, b = 2, c = 4\ncmp :a :b    ; :cmp = lt\njne quax   ; jump\nmul :c 10   ;\n\n\n;; quax:: call bar and zero :b\nquax:      ;\nnop        ;\ncall bar   ; move eip to bar, push eip to eip-stack\npop :d\npop :e\nprn :d\nprn :e\nxor :b :b    ; a = 7, b = 0, c = 3\nend        ; a = 7, b = 0, c = 3\n\n\n;; foo:: increment b\nfoo:\ninc :b      ; a = 0, b = 2, c = 2\nret        ; ret to foo call, pop eip stack\n\n\n;; bar:: add 7 to a and decrement c\nbar:\nadd :a 7    ; a = 7, b = 2, c = 4\nsub :c 1    ; a = 7, b = 2, c = 3\npush 3\npush 4\nret        ; ret to bar call, pop eip stack\n\n.data\nxyz 123\"\n    :breakpoints #{}\n    :code        []\n    :finished? false\n    :has-parsed-code? false\n    :memory {:eip                 0\n             :registers           {}\n             :eip-stack           []\n             :internal-registers  {}\n             :stack               []\n             :termination-message \"\"\n             :symbol-table        {}\n             :rep-counters-stack  []\n             :last-edit-register  nil\n             :output              \"$ Toy Asm Output >\"}\n    :on-breakpoint false    \n    :running? false\n    :running-speed 250\n    :ticker-handle nil}))\n\n(defn dispatch-timer-event []\n  (rf/dispatch [:next-instruction]))\n\n;; Handles the user typing into the source control editor.\n(rf/reg-event-db\n :update-source\n (fn [db [_ source]]\n   (assoc db :source source)))\n\n(rf/reg-fx\n :scroll-parsed-code-to-top\n (fn [_]\n   (-> js/document\n       (.getElementById \"code-container\")\n       (.-scrollTop)\n       (set! 0))))\n\n(defn fill-data-registers [data]\n  (zipmap (map first data) (map second data)))\n\n;; Handles when the user clicks the Parse button.\n(rf/reg-event-fx\n :parse\n (fn [{:keys [db]} _]\n   (let [parsed (parse (db :source))\n         symbol-table (interp/build-symbol-table (parsed :code))]\n     {:db\n      (-> db\n          (assoc :memory {:eip                 0\n                          :eip-stack           []\n                          :internal-registers  {}\n                          :output              (if (db :running?)\n                                                 (str (-> db :memory :output) \"\\nUser terminated.\")\n                                                 (-> db :memory :output))\n                          :registers           (fill-data-registers (parsed :data))\n                          :rep-counters-stack  []\n                          :stack               []\n                          :symbol-table        symbol-table\n                          :termination-message \"\"})\n          (assoc :code (parsed :code))\n          (assoc :on-breakpoint false)\n          (assoc :has-parsed-code? (pos? (count (parsed :code))))\n          (assoc :finished? false)\n          (assoc :running? false))\n      :scroll-parsed-code-to-top _\n      :end-running (db :ticker-handle)})))\n\n; Handles when the user clicks the Clear Parsed button\n(rf/reg-event-fx\n :clear-parsed\n (fn [{:keys [db]} _]\n   {:db (-> db\n            (assoc :code [])\n            (assoc :running? false)\n            (assoc :has-parsed-code? false)\n            (assoc :on-breakpoint false)\n            (assoc :memory {:eip                0\n                            :registers          {}\n                            :eip-stack          []\n                            :internal-registers {}\n                            :output             (if (db :running?)\n                                                   (str (-> db :memory :output) \"\\nUser terminated.\")\n                                                   (-> db :memory :output))\n                            :stack              []\n                            :symbol-table       []}))\n    :end-running (db :ticker-handle)}))\n\n; Handles when the user clicks Clear Breakpoints button\n(rf/reg-event-db\n :clear-breakpoints\n (fn [db _]\n   (assoc db :breakpoints #{})))\n\n;; ====================================================================\n;; Source Code Editor events\n;; ====================================================================\n\n; replace with\n;(reagent/with-let [ref2 (reagent/atom nil)]\n;   [:div\n;    [:textarea {:on-scroll (fn [^js e] (when-some [node2 @ref2] ...))}]\n;    [:textarea {:ref #(reset! ref2 %)}]])\n\n(rf/reg-fx\n :scroll-line-nos\n (fn [scroll-pos]\n   (-> js/document\n       (.getElementById \"lineNos\")\n       (.-scrollTop)\n       (set! scroll-pos))))\n\n(rf/reg-event-fx\n :update-scroll\n (fn [{:keys [db]} [_ scroll-pos]]\n   {:db (assoc db :scroll-pos scroll-pos)\n    :scroll-line-nos scroll-pos}))\n\n(rf/reg-event-db\n :clear-source\n (fn [db _]\n   (assoc db :source \"\")))\n\n;; ===================================================================\n;; Parsed code events\n;; ===================================================================\n(rf/reg-event-db\n :toggle-breakpoint\n (fn [{:keys [breakpoints] :as db} [_ line-no]]\n   (assoc db :breakpoints (if (some? (breakpoints line-no))\n                            (set/difference  breakpoints #{line-no})\n                            (conj breakpoints line-no)))))\n\n;; ===================================================================\n;; Code execution control events\n;; ===================================================================\n(rf/reg-event-db\n :set-handle\n (fn [db [_ handle]]\n   (assoc db :ticker-handle handle)))\n\n(rf/reg-fx\n :toggle-running\n (fn [[running? handle speed]]\n   (if running?\n     (rf/dispatch [:set-handle (js/setInterval dispatch-timer-event speed)])\n     (js/clearInterval handle))))\n\n(rf/reg-fx\n :scroll-current-code-into-view\n (fn [eip]\n   (-> js/document\n       (.getElementById \"code-container\")\n       (.-scrollTop)\n       (set! (* eip 25)))))\n\n(rf/reg-event-fx\n :toggle-running\n (fn [{:keys [db]} _]\n   {:db (assoc db :running? (not (db :running?)))\n    :toggle-running [(not (db :running?)) (db :ticker-handle) (db :running-speed)]}))\n\n(rf/reg-fx\n :end-running\n (fn [handle]\n   (js/clearInterval handle)))\n\n(rf/reg-fx\n :end-if-finished\n (fn [[handle finished?]]\n   (when finished?\n     (js/clearInterval handle))))\n\n(rf/reg-event-fx\n :reset\n (fn [{:keys [db]} _]\n   {:db (-> db\n            (assoc :memory {:eip                 0\n                            :registers           {}\n                            :eip-stack           []\n                            :internal-registers  {}\n                            :stack               []\n                            :rep-counters-stack  []\n                            :symbol-table        (:symbol-table (:memory db))\n                            :output              (if (db :running?)\n                                                   (str (-> db :memory :output) \"\\nUser terminated.\")\n                                                   (-> db :memory :output))})\n            (assoc :running? false)\n            (assoc :on-breakpoint false)\n            (assoc :finished? false))\n    :toggle-running [false (db :ticker-handle)]\n    :scroll-parsed-code-to-top _}))\n\n(rf/reg-event-fx\n :next-instruction\n (fn [{:keys [db]} _]\n   (let [{:keys [memory finished? terminated?]} (exfn.interpreter/interpret (db :code) (db :memory))\n         breakpoints (db :breakpoints)\n         db (-> db\n                (assoc :memory memory)\n                (assoc :finished? finished?)\n                (assoc :running? (if finished? false (db :running?))))]\n     (cond\n       ;; We are on a breakpoint.\n       (some? (breakpoints (:eip memory)))\n       {:db (-> db\n                (assoc :on-breakpoint true)\n                (assoc :running? false))\n        :scroll-current-code-into-view (:eip memory)\n        :toggle-running [false (db :ticker-handle)]}\n\n       ;; Program was terminated.\n       terminated?\n       {:db (-> db\n                (assoc :terminated? terminated?)\n                (assoc :on-breakpoint false)\n                (assoc :finished? true)\n                (assoc :running? false))\n        :end-if-finished [(db :ticker-handle) (or finished? terminated?)]}\n\n       ;; Program finished by hitting an :end instruction (since it wasn't terminated.)\n       finished?\n       {:db (-> db\n                (assoc :terminated? false)\n                (assoc :on-breakpoint false)\n                (assoc :finished? true)\n                (assoc :running? false))\n        :end-if-finished [(db :ticker-handle) (or finished? terminated?)]}\n\n       ;; Otherwise it's ok to continue.\n       :else\n       {:db                            (assoc db :on-breakpoint false)\n        :scroll-current-code-into-view (:eip memory)\n        :end-if-finished               [(db :ticker-handle) (or finished? terminated?)]}))))\n\n(rf/reg-event-db\n :clear-output\n (fn [db _]\n   (assoc-in db [:memory :output] \"$ Toy Asm Output >\")))\n\n ;;================== DEV TEST EVENTS ==================================\n(rf/reg-event-db\n :add-value-to-registers\n (fn [db [_ [k v]]]\n   (update-in db [:memory :registers] assoc k v)))\n\n(rf/reg-event-db\n :update-running-speed\n (fn [db [_ speed]]\n   (assoc db :running-speed speed)))\n\n(rf/reg-event-db\n :add-value-to-stack\n (fn [db [_ v]]\n   (update-in db [:memory :stack] conj v)))\n\n(rf/reg-event-db\n :reset-eip\n (fn [db _]\n   (assoc-in db [:memory :eip] 0)))\n\n(rf/reg-event-db\n :test-code\n (fn [db _]\n   (assoc db :source \"; function calls.\nmov :a 0    ; a = 0\nmov :b 1    ; a = 0, b = 1\nmov :c 2    ; a = 0, b = 1, c = 2\ncall foo   ; move eip to foo, push eip to eip-stack\nmul :c :b    ; a = 0, b = 2, c = 4\ncmp :a :b    ; :cmp = lt\njne quax   ; jump\nmul :c 10   ;\n                      \n\n;; quax:: call bar and zero :b\nquax:      ;\nnop        ;\ncall bar   ; move eip to bar, push eip to eip-stack\nxor :b :b    ; a = 7, b = 0, c = 3\nend        ; a = 7, b = 0, c = 3\n                      \n\n;; foo:: increment b\nfoo:\ninc :b      ; a = 0, b = 2, c = 2\nret        ; ret to foo call, pop eip stack\n\n\n;; bar:: add 7 to a and decrement c\nbar:\nadd :a 7    ; a = 7, b = 2, c = 4\nsub :c 1    ; a = 7, b = 2, c = 3\nret        ; ret to bar call, pop eip stack\")))"]}