{"version":3,"sources":["exfn/events.cljs"],"mappings":";AAKA,AAAA,AAACA,AAEA,AAAKC,AAAEA;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAYD,AAAA,AAACD,AAEA,AAAAE,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASF;AAAT,AAAAG,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACE,AAAA,AAACC,AAAMF,AAAWC;;AAGrB,AAAA,AAACN,AAEA,AAAAQ,AAA6BP;AAA7B,AAAA,AAAAQ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAyBJ;AAAzB,AAAAQ,AAAAJ,AAAA,AAAaH;AAAb,AACE,AAAMQ,AAAO,AAACC,AAAMT;AAApB,AACE,AAAA,AAACC,AAAMF,AAASS;;AAMrB,AAAA,AAACE,AAEA,AAAKC;AAAL,AACMC,AACA,AAAA,AACA,AACA,AAAMD;;AAEb,AAAA,AAACE,AAEA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAZ,AAAA,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAX,AAAAC,AAAAU,AAAAA;AAAA,AAAAT,AAAAS,AAAA,AAAajB;AAAbkB,AAAAF;AAAA,AAAAjB,AAAAmB,AAAA,AAAA,AAAmBtB;AAAnB,AAAAG,AAAAmB,AAAA,AAAA,AAAqBN;AAArB,AACE,AAACO,AAAe,AAAA,AAAoBP;;AADtC,AAAA,AAAA,AAEO,AAAA,AAACV,AAAMF,AAAeY,AACTA;;AAKpB,AAAA,AAACjB,AAEA,AAAAyB,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAC,AAAAe,AAAAA;AAAAA,AAA8BtB;AAA9B,AAAAQ,AAAAc,AAAA,AAAaE;AAAbD,AAAAF;AAAA,AAAAtB,AAAAwB,AAAA,AAAA,AAAmC3B;AAAnC,AAAAG,AAAAwB,AAAA,AAAA,AAAqCE;AAArC,AACE,AAAA,AAACvB,AAAMF,AAAgB,AAAI,AAAA,AAAA,AAAO,AAACwB,AAAAA,AAAAA,AAAYC,AAAAA,AACtB,AAAA,AAACC,AAAgBF,AAAcC,AAC/B,AAACE,AAAKH,AAAYC;;AAK/C,AAAA,AAAC9B,AAEA,AAAKK,AAAGJ;AAAR,AACE,AAAA,AAACM,AAAMF,AAAa,AAAC4B,AAAI,AAAA,AAAA,AAAC5B,AAAAA,AAAAA;;AAK5B,AAAA,AAACL,AAEA,AAAAkC,AAAK7B;AAAL,AAAA,AAAA8B,AAAAD;AAAA,AAAA9B,AAAA+B,AAAA,AAAA,AAASlC;AAATmC,AAAA,AAAAhC,AAAA+B,AAAA,AAAA;AAAA,AAAA/B,AAAAgC,AAAA,AAAA,AAAYC;AAAZ,AAAAjC,AAAAgC,AAAA,AAAA,AAAcE;AAAd,AACE,AAAA,AAAA,AAAA,AAACC,AAAUlC,AAAwBmC,AAAMH,AAAEC","names":["re_frame.core.reg_event_db","_","p__45119","vec__45120","cljs.core.nth","db","source","cljs.core.assoc","p__45126","map__45127","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parsed","exfn.parser/parse","re-frame.core/reg-fx","scroll-pos","js/document","re_frame.core.reg_event_fx","p__45135","p__45136","map__45137","vec__45138","js/console.log","p__45143","p__45144","map__45145","vec__45146","breakpoints","line-no","clojure.set.difference","cljs.core.conj","cljs.core/not","p__45152","vec__45153","vec__45156","k","v","cljs.core.update_in","cljs.core/assoc"],"sourcesContent":["(ns exfn.events\r\n  (:require [exfn.parser :refer [parse]]\r\n            [re-frame.core :as rf]\r\n            [clojure.set :as set]))\r\n\r\n(rf/reg-event-db\r\n :initialize\r\n (fn [_ _]\r\n   {:source      \"\"\r\n    :code        []\r\n    :memory {:eip                0\r\n             :registers          {}\r\n             :eip-stack          []\r\n             :internal-registers {}\r\n             :stack              []}\r\n    :breakpoints #{}\r\n    :running? false}))\r\n\r\n;; Handles the user typing into the source control editor.\r\n(rf/reg-event-db\r\n :update-source\r\n (fn [db [_ source]]\r\n   (assoc db :source source)))\r\n\r\n;; Handles when the user clicks the Parse button.\r\n(rf/reg-event-db\r\n :parse\r\n (fn [{:keys [source] :as db} _]\r\n   (let [parsed (parse source)]\r\n     (assoc db :code parsed))))\r\n\r\n;; ====================================================================\r\n;; Source Code Editor events\r\n;; ====================================================================\r\n\r\n(rf/reg-fx\r\n :scroll-line-nos\r\n (fn [scroll-pos]\r\n   (-> js/document\r\n       (.getElementById \"lineNos\")\r\n       (.-scrollTop)\r\n       (set! scroll-pos))))\r\n\r\n(rf/reg-event-fx\r\n :update-scroll\r\n (fn [{:keys [db]} [_ scroll-pos]]\r\n   (js/console.log (str \"scroll-pos: \" scroll-pos))\r\n   {:db (assoc db :scroll-pos scroll-pos)\r\n    :scroll-line-nos scroll-pos}))\r\n\r\n;; ===================================================================\r\n;; Parsed code events\r\n;; ===================================================================\r\n (rf/reg-event-db\r\n  :toggle-breakpoint\r\n  (fn [{:keys [breakpoints] :as db} [_ line-no]]\r\n    (assoc db :breakpoints (if (some? (breakpoints line-no))\r\n                             (set/difference  breakpoints #{line-no})\r\n                             (conj breakpoints line-no)))))\r\n\r\n;; ===================================================================\r\n;; Code execution control events\r\n;; ===================================================================\r\n(rf/reg-event-db\r\n :toggle-running\r\n (fn [db _]\r\n   (assoc db :running? (not (db :running?)))))\r\n \r\n\r\n\r\n ;;================== DEV TEST EVENTS ==================================\r\n (rf/reg-event-db\r\n  :add-value-to-registers\r\n  (fn [db [_ [k v]]]\r\n    (update-in db [:memory :registers] assoc k v)))"]}