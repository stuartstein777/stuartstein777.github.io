{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","p__34413","vec__34414","cljs.core.nth","db","source","cljs.core.assoc","p__34417","map__34418","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parsed","exfn.parser/parse","re-frame.core/reg-fx","scroll-pos","js/document","re_frame.core.reg_event_fx","p__34420","p__34421","map__34422","vec__34423","js/console.log","p__34427","p__34428","map__34429","vec__34430","breakpoints","line-no","clojure.set.difference","cljs.core.conj","cljs.core/not","p__34434","vec__34435","vec__34438","k","v","cljs.core.update_in","cljs.core/assoc","p__34441","vec__34442","cljs.core/conj"],"sourcesContent":["(ns exfn.events\n  (:require [exfn.parser :refer [parse]]\n            [re-frame.core :as rf]\n            [clojure.set :as set]))\n\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:source      \"\"\n    :code        []\n    :memory {:eip                0\n             :registers          {}\n             :eip-stack          []\n             :internal-registers {}\n             :stack              []\n             :symbol-table       []}\n    :breakpoints #{}\n    :running? false}))\n\n;; Handles the user typing into the source control editor.\n(rf/reg-event-db\n :update-source\n (fn [db [_ source]]\n   (assoc db :source source)))\n\n;; Handles when the user clicks the Parse button.\n(rf/reg-event-db\n :parse\n (fn [{:keys [source] :as db} _]\n   (let [parsed (parse source)]\n     (assoc db :code parsed))))\n\n;; ====================================================================\n;; Source Code Editor events\n;; ====================================================================\n\n(rf/reg-fx\n :scroll-line-nos\n (fn [scroll-pos]\n   (-> js/document\n       (.getElementById \"lineNos\")\n       (.-scrollTop)\n       (set! scroll-pos))))\n\n(rf/reg-event-fx\n :update-scroll\n (fn [{:keys [db]} [_ scroll-pos]]\n   (js/console.log (str \"scroll-pos: \" scroll-pos))\n   {:db (assoc db :scroll-pos scroll-pos)\n    :scroll-line-nos scroll-pos}))\n\n;; ===================================================================\n;; Parsed code events\n;; ===================================================================\n (rf/reg-event-db\n  :toggle-breakpoint\n  (fn [{:keys [breakpoints] :as db} [_ line-no]]\n    (assoc db :breakpoints (if (some? (breakpoints line-no))\n                             (set/difference  breakpoints #{line-no})\n                             (conj breakpoints line-no)))))\n\n;; ===================================================================\n;; Code execution control events\n;; ===================================================================\n(rf/reg-event-db\n :toggle-running\n (fn [db _]\n   (assoc db :running? (not (db :running?)))))\n \n\n\n ;;================== DEV TEST EVENTS ==================================\n (rf/reg-event-db\n  :add-value-to-registers\n  (fn [db [_ [k v]]]\n    (update-in db [:memory :registers] assoc k v)))\n\n(rf/reg-event-db\n :add-value-to-stack\n (fn [db [_ v]]\n   (update-in db [:memory :stack] conj v)))\n\n(rf/reg-event-db\n :test-code\n (fn [db _]\n   (assoc db :source \"; function calls.\nmov a 0    ; a = 0\nmov b 1    ; a = 0, b = 1\nmov c 2    ; a = 0, b = 1, c = 2\ncall foo   ; move eip to foo, push eip to eip-stack\nmul c b    ; a = 0, b = 2, c = 4\ncmp a b    ; :cmp = lt\njne quax   ; jump\nmul c 10   ;\n                      \n\n;; quax:: call bar and zero :b\nquax:      ;\nnop        ;\ncall bar   ; move eip to bar, push eip to eip-stack\nxor b b    ; a = 7, b = 0, c = 3\nmsg 'a = ' a ', b = ' b ', c = ' c\nend        ; a = 7, b = 0, c = 3\n                      \n\n;; foo:: increment b\nfoo:\ninc b      ; a = 0, b = 2, c = 2\nret        ; ret to foo call, pop eip stack\n\n\n;; bar:: add 7 to a and decrement c\nbar:\nadd a 7    ; a = 7, b = 2, c = 4\nsub c 1    ; a = 7, b = 2, c = 3\nret        ; ret to bar call, pop eip stack\")))"]}