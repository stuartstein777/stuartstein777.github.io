{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","exfn.events/dispatch-timer-event","re-frame.core/dispatch","p__32765","vec__32766","cljs.core.nth","db","source","cljs.core.assoc","re-frame.core/reg-fx","js/document","re_frame.core.reg_event_fx","p__32769","map__32770","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parsed","exfn.parser/parse","symbol-table","exfn.interpreter/build-symbol-table","cljs.core/count","scroll-pos","p__32772","p__32773","map__32774","vec__32775","p__32779","p__32780","map__32781","vec__32782","breakpoints","line-no","clojure.set.difference","cljs.core.conj","p__32786","vec__32787","handle","p__32790","vec__32791","running?","js/setInterval","js/clearInterval","eip","p__32794","map__32795","cljs.core/not","p__32797","vec__32798","finished?","p__32801","map__32802","vec__32804","memory","exfn.interpreter/interpret","p__32807","vec__32808","vec__32811","k","v","cljs.core.update_in","cljs.core/assoc","p__32814","vec__32815","cljs.core/conj","cljs.core/assoc-in"],"sourcesContent":["(ns exfn.events\r\n  (:require [exfn.parser :refer [parse]]\r\n            [re-frame.core :as rf]\r\n            [exfn.interpreter :as interp]\r\n            [clojure.set :as set]))\r\n\r\n(rf/reg-event-db\r\n :initialize\r\n (fn [_ _]\r\n   {:source      \"; function calls.\r\nmov a 0    ; a = 0\r\nmov b 1    ; a = 0, b = 1\r\nmov c 2    ; a = 0, b = 1, c = 2\r\ncall foo   ; move eip to foo, push eip to eip-stack\r\nmul c b    ; a = 0, b = 2, c = 4\r\ncmp a b    ; :cmp = lt\r\njne quax   ; jump\r\nmul c 10   ;\r\n                      \r\n\r\n;; quax:: call bar and zero :b\r\nquax:      ;\r\nnop        ;\r\ncall bar   ; move eip to bar, push eip to eip-stack\r\nxor b b    ; a = 7, b = 0, c = 3\r\nend        ; a = 7, b = 0, c = 3\r\n                      \r\n\r\n;; foo:: increment b\r\nfoo:\r\ninc b      ; a = 0, b = 2, c = 2\r\nret        ; ret to foo call, pop eip stack\r\n\r\n\r\n;; bar:: add 7 to a and decrement c\r\nbar:\r\nadd a 7    ; a = 7, b = 2, c = 4\r\nsub c 1    ; a = 7, b = 2, c = 3\r\nret        ; ret to bar call, pop eip stack\"\r\n    :code        []\r\n    :memory {:eip                0\r\n             :registers          {}\r\n             :eip-stack          []\r\n             :internal-registers {}\r\n             :stack              []\r\n             :symbol-table       {}\r\n             :last-edit-register nil}\r\n    :breakpoints #{}\r\n    :running? false\r\n    :finished? false\r\n    :has-parsed-code? false\r\n    :ticker-handle nil}))\r\n\r\n(defn dispatch-timer-event []\r\n  (rf/dispatch [:next-instruction]))\r\n\r\n;; Handles the user typing into the source control editor.\r\n(rf/reg-event-db\r\n :update-source\r\n (fn [db [_ source]]\r\n   (assoc db :source source)))\r\n\r\n(rf/reg-fx\r\n :scroll-parsed-code-to-top\r\n (fn [_]\r\n   (-> js/document\r\n       (.getElementById \"code-container\")\r\n       (.-scrollTop)\r\n       (set! 0))))\r\n\r\n;; Handles when the user clicks the Parse button.\r\n(rf/reg-event-fx\r\n :parse\r\n (fn [{:keys [db]} _]\r\n   (let [parsed (parse (db :source))\r\n         symbol-table (interp/build-symbol-table parsed)]\r\n     {:db\r\n      (-> db\r\n          (assoc :memory {:eip                0\r\n                          :registers          {}\r\n                          :eip-stack          []\r\n                          :internal-registers {}\r\n                          :stack              []\r\n                          :symbol-table       symbol-table})\r\n          (assoc :code parsed)\r\n          (assoc :has-parsed-code? (pos? (count parsed)))\r\n          (assoc :finished? false))\r\n      :scroll-parsed-code-to-top _})))\r\n\r\n(rf/reg-event-db\r\n :clear-parsed\r\n (fn [db _]\r\n   (-> db\r\n       (assoc :code [])\r\n       (assoc :running? false)\r\n       (assoc :has-parsed-code? false)\r\n       (assoc :memory {:eip                0\r\n                       :registers          {}\r\n                       :eip-stack          []\r\n                       :internal-registers {}\r\n                       :stack              []\r\n                       :symbol-table       []}))))\r\n\r\n;; ====================================================================\r\n;; Source Code Editor events\r\n;; ====================================================================\r\n\r\n; replace with\r\n;(reagent/with-let [ref2 (reagent/atom nil)]\r\n;   [:div\r\n;    [:textarea {:on-scroll (fn [^js e] (when-some [node2 @ref2] ...))}]\r\n;    [:textarea {:ref #(reset! ref2 %)}]])\r\n\r\n(rf/reg-fx\r\n :scroll-line-nos\r\n (fn [scroll-pos]\r\n   (-> js/document\r\n       (.getElementById \"lineNos\")\r\n       (.-scrollTop)\r\n       (set! scroll-pos))))\r\n\r\n(rf/reg-event-fx\r\n :update-scroll\r\n (fn [{:keys [db]} [_ scroll-pos]]\r\n   {:db (assoc db :scroll-pos scroll-pos)\r\n    :scroll-line-nos scroll-pos}))\r\n\r\n;; ===================================================================\r\n;; Parsed code events\r\n;; ===================================================================\r\n (rf/reg-event-db\r\n  :toggle-breakpoint\r\n  (fn [{:keys [breakpoints] :as db} [_ line-no]]\r\n    (assoc db :breakpoints (if (some? (breakpoints line-no))\r\n                             (set/difference  breakpoints #{line-no})\r\n                             (conj breakpoints line-no)))))\r\n\r\n;; ===================================================================\r\n;; Code execution control events\r\n;; ===================================================================\r\n(rf/reg-event-db\r\n :set-handle\r\n (fn [db [_ handle]]\r\n   (assoc db :ticker-handle handle)))\r\n \r\n(rf/reg-fx\r\n :toggle-running\r\n (fn [[running? handle]]\r\n   (if running?\r\n     (rf/dispatch [:set-handle (js/setInterval dispatch-timer-event 1000)])\r\n     (js/clearInterval handle))))\r\n \r\n(rf/reg-fx\r\n :scroll-current-code-into-view\r\n (fn [eip]\r\n   (-> js/document\r\n       (.getElementById \"code-container\")\r\n       (.-scrollTop)\r\n       (set! (* eip 25)))))\r\n \r\n (rf/reg-event-fx\r\n :toggle-running\r\n (fn [{:keys [db]} _]\r\n   {:db (assoc db :running? (not (db :running?)))\r\n    :toggle-running [(not (db :running?)) (db :ticker-handle)]}))\r\n \r\n(rf/reg-fx\r\n :end-if-finished\r\n (fn [[handle finished?]]\r\n   (when finished?\r\n     (js/clearInterval handle))))\r\n\r\n (rf/reg-event-db\r\n  :reset\r\n  (fn [db _]\r\n    (-> db\r\n        (assoc :memory {:eip                0\r\n                        :registers          {}\r\n                        :eip-stack          []\r\n                        :internal-registers {}\r\n                        :stack              []\r\n                        :symbol-table (:symbol-table (:memory db))})\r\n        (assoc :running? false)\r\n        (assoc :finished? false))))\r\n\r\n(rf/reg-event-fx\r\n :next-instruction\r\n (fn [{:keys [db]} _]\r\n   (let [[memory finished?] (exfn.interpreter/interpret (db :code) (db :memory))]\r\n     {:db (-> db\r\n              (assoc :memory memory)\r\n              (assoc :finished? finished?))\r\n      :scroll-current-code-into-view (:eip memory)\r\n      :end-if-finished [(db :ticker-handle) finished?]})))\r\n\r\n ;;================== DEV TEST EVENTS ==================================\r\n (rf/reg-event-db\r\n  :add-value-to-registers\r\n  (fn [db [_ [k v]]]\r\n    (update-in db [:memory :registers] assoc k v)))\r\n\r\n(rf/reg-event-db\r\n :add-value-to-stack\r\n (fn [db [_ v]]\r\n   (update-in db [:memory :stack] conj v)))\r\n\r\n(rf/reg-event-db\r\n :reset-eip\r\n (fn [db _]\r\n   (assoc-in db [:memory :eip] 0)))\r\n \r\n(rf/reg-event-db\r\n :test-code\r\n (fn [db _]\r\n   (assoc db :source \"; function calls.\r\nmov a 0    ; a = 0\r\nmov b 1    ; a = 0, b = 1\r\nmov c 2    ; a = 0, b = 1, c = 2\r\ncall foo   ; move eip to foo, push eip to eip-stack\r\nmul c b    ; a = 0, b = 2, c = 4\r\ncmp a b    ; :cmp = lt\r\njne quax   ; jump\r\nmul c 10   ;\r\n                      \r\n\r\n;; quax:: call bar and zero :b\r\nquax:      ;\r\nnop        ;\r\ncall bar   ; move eip to bar, push eip to eip-stack\r\nxor b b    ; a = 7, b = 0, c = 3\r\nend        ; a = 7, b = 0, c = 3\r\n                      \r\n\r\n;; foo:: increment b\r\nfoo:\r\ninc b      ; a = 0, b = 2, c = 2\r\nret        ; ret to foo call, pop eip stack\r\n\r\n\r\n;; bar:: add 7 to a and decrement c\r\nbar:\r\nadd a 7    ; a = 7, b = 2, c = 4\r\nsub c 1    ; a = 7, b = 2, c = 3\r\nret        ; ret to bar call, pop eip stack\")))"]}