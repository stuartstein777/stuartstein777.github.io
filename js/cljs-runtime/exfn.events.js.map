{"version":3,"sources":["exfn/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","p__30394","vec__30395","cljs.core.nth","db","source","cljs.core.assoc","p__30398","map__30399","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parsed","exfn.parser/parse","symbol-table","exfn.interpreter/build-symbol-table","re-frame.core/reg-fx","scroll-pos","js/document","re_frame.core.reg_event_fx","p__30401","p__30402","map__30403","vec__30404","p__30408","p__30409","map__30410","vec__30411","breakpoints","line-no","clojure.set.difference","cljs.core.conj","eip","cljs.core/not","p__30415","map__30416","memory","exfn.interpreter/interpret","p__30418","vec__30419","vec__30422","k","v","cljs.core.update_in","cljs.core/assoc","p__30425","vec__30426","cljs.core/conj","cljs.core/assoc-in"],"sourcesContent":["(ns exfn.events\r\n  (:require [exfn.parser :refer [parse]]\r\n            [re-frame.core :as rf]\r\n            [exfn.interpreter :as interp]\r\n            [clojure.set :as set]))\r\n\r\n(rf/reg-event-db\r\n :initialize\r\n (fn [_ _]\r\n   {:source      \"; main\r\n\r\nmov c 6\r\ncall foo\r\nmul a b\r\nmul a c\r\nxor c c\r\nend\r\n\r\n\r\n; function::: foo\r\nfoo:\r\npush 1\r\ncall bar\r\nret\r\n\r\n; function::: bar\r\nbar:\r\npush 2\r\ncall quax\r\nret\r\n\r\n; function:: quax\r\nquax:\r\npop a\r\npop b\r\nret\"\r\n    :code        []\r\n    :memory {:eip                0\r\n             :registers          {}\r\n             :eip-stack          []\r\n             :internal-registers {}\r\n             :stack              []\r\n             :symbol-table       {}}\r\n    :breakpoints #{}\r\n    :running? false\r\n    :finished? false}))\r\n\r\n;; Handles the user typing into the source control editor.\r\n(rf/reg-event-db\r\n :update-source\r\n (fn [db [_ source]]\r\n   (assoc db :source source)))\r\n\r\n;; Handles when the user clicks the Parse button.\r\n(rf/reg-event-db\r\n :parse\r\n (fn [{:keys [source] :as db} _]\r\n   (let [parsed (parse source)\r\n         symbol-table (interp/build-symbol-table parsed)]\r\n     (-> db \r\n          (assoc :memory {:eip                0\r\n                          :registers          {}\r\n                          :eip-stack          []\r\n                          :internal-registers {}\r\n                          :stack              []\r\n                          :symbol-table symbol-table})\r\n          (assoc :code parsed)))))\r\n\r\n;; ====================================================================\r\n;; Source Code Editor events\r\n;; ====================================================================\r\n\r\n; replace with\r\n;(reagent/with-let [ref2 (reagent/atom nil)]\r\n;   [:div\r\n;    [:textarea {:on-scroll (fn [^js e] (when-some [node2 @ref2] ...))}]\r\n;    [:textarea {:ref #(reset! ref2 %)}]])\r\n\r\n(rf/reg-fx\r\n :scroll-line-nos\r\n (fn [scroll-pos]\r\n   (-> js/document\r\n       (.getElementById \"lineNos\")\r\n       (.-scrollTop)\r\n       (set! scroll-pos))))\r\n\r\n(rf/reg-event-fx\r\n :update-scroll\r\n (fn [{:keys [db]} [_ scroll-pos]]\r\n   {:db (assoc db :scroll-pos scroll-pos)\r\n    :scroll-line-nos scroll-pos}))\r\n\r\n;; ===================================================================\r\n;; Parsed code events\r\n;; ===================================================================\r\n (rf/reg-event-db\r\n  :toggle-breakpoint\r\n  (fn [{:keys [breakpoints] :as db} [_ line-no]]\r\n    (assoc db :breakpoints (if (some? (breakpoints line-no))\r\n                             (set/difference  breakpoints #{line-no})\r\n                             (conj breakpoints line-no)))))\r\n\r\n;; ===================================================================\r\n;; Code execution control events\r\n;; ===================================================================\r\n(rf/reg-fx\r\n :scroll-current-code-into-view\r\n (fn [eip]\r\n   (-> js/document\r\n       (.getElementById \"code-container\")\r\n       (.-scrollTop)\r\n       (set! (* eip 25)))))\r\n \r\n(rf/reg-event-db\r\n :toggle-running\r\n (fn [db _]\r\n   (assoc db :running? (not (db :running?)))))\r\n \r\n (rf/reg-event-db\r\n  :reset\r\n  (fn [db _]\r\n    (-> db\r\n        (assoc :memory {:eip                0\r\n                        :registers          {}\r\n                        :eip-stack          []\r\n                        :internal-registers {}\r\n                        :stack              []\r\n                        :symbol-table (:symbol-table (:memory db))})\r\n        (assoc :running? false))))\r\n\r\n(rf/reg-event-fx\r\n :next-instruction\r\n (fn [{:keys [db]} _]\r\n   (let [memory (exfn.interpreter/interpret (db :code) (db :memory))]\r\n     {:db (assoc db :memory memory)\r\n      :scroll-current-code-into-view (:eip memory)})))\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n ;;================== DEV TEST EVENTS ==================================\r\n (rf/reg-event-db\r\n  :add-value-to-registers\r\n  (fn [db [_ [k v]]]\r\n    (update-in db [:memory :registers] assoc k v)))\r\n\r\n(rf/reg-event-db\r\n :add-value-to-stack\r\n (fn [db [_ v]]\r\n   (update-in db [:memory :stack] conj v)))\r\n\r\n(rf/reg-event-db\r\n :reset-eip\r\n (fn [db _]\r\n   (assoc-in db [:memory :eip] 0)))\r\n \r\n(rf/reg-event-db\r\n :test-code\r\n (fn [db _]\r\n   (assoc db :source \"; function calls.\r\nmov a 0    ; a = 0\r\nmov b 1    ; a = 0, b = 1\r\nmov c 2    ; a = 0, b = 1, c = 2\r\ncall foo   ; move eip to foo, push eip to eip-stack\r\nmul c b    ; a = 0, b = 2, c = 4\r\ncmp a b    ; :cmp = lt\r\njne quax   ; jump\r\nmul c 10   ;\r\n                      \r\n\r\n;; quax:: call bar and zero :b\r\nquax:      ;\r\nnop        ;\r\ncall bar   ; move eip to bar, push eip to eip-stack\r\nxor b b    ; a = 7, b = 0, c = 3\r\nmsg 'a = ' a ', b = ' b ', c = ' c\r\nend        ; a = 7, b = 0, c = 3\r\n                      \r\n\r\n;; foo:: increment b\r\nfoo:\r\ninc b      ; a = 0, b = 2, c = 2\r\nret        ; ret to foo call, pop eip stack\r\n\r\n\r\n;; bar:: add 7 to a and decrement c\r\nbar:\r\nadd a 7    ; a = 7, b = 2, c = 4\r\nsub c 1    ; a = 7, b = 2, c = 3\r\nret        ; ret to bar call, pop eip stack\")))"]}