{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/cofx.cljc"],"mappings":";AAUA,AAAA,AAAKA;AACL,AAAQ,AAACE,AAAAA,AAAAA,AAAwEF,AAAAA;AAAjF;AAAA,AAAA,AAAA,AAAAC,AAAA;;AAEA,AAAA,AAAME,AACHC,AAAGC;AADN,AAEE,AAACC,AAAiBN,AAAKI,AAAGC;;AAK5B,AAAA,AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMQ,AACFL;AADJ,AAEG,AAAA,AAAA,AAAA,AAACM,AAEU,AACGC;AADH,AAEE,AAAAC,AAAiB,AAACC,AAAYb,AAAKI;AAAnC,AAAA,AAAAQ;AAAA,AAAAA,AAASP;AAAT,AACE,AAAA,AAACS,AAAOH,AAAmBN;;AAC3B,AAAA,AAAA,AAACU,AAAgDX;;;;;AARnE,AAAA,AAAA,AAAMK,AASFL,AAAGY;AATP,AAUG,AAAA,AAAA,AAAA,AAACN,AAEU,AACGC;AADH,AAEE,AAAAC,AAAiB,AAACC,AAAYb,AAAKI;AAAnC,AAAA,AAAAQ;AAAA,AAAAA,AAASP;AAAT,AACE,AAAA,AAACS,AAAOH,AAAmBN,AAAQW;;AACnC,AAAA,AAAA,AAACD,AAAgDX;;;;;AAhBnE,AAAA,AAAA,AAAMK;;AAAN,AAwBA,AAAA,AAACN,AAEC,AACGc;AADH,AAEE,AAAA,AAAA,AAAAC,AAACC,AAAMF,AAAeG;;AAI1B,AAAKC,AAAU,AAAA,AAACC","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/reg-cofx","id","handler","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/register-handler","var_args","G__34906","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/inject-cofx","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor","context","temp__5733__auto__","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.get_handler","cljs.core.update","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","value","coeffects","cljs.core/deref","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/inject-db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_cofx"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db           :refer [app-db]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor  :refer [->interceptor]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar    :refer [get-handler register-handler]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers      :refer [console]]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :cofx)\n(assert (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds kind))\n\n(defn reg-cofx\n  [id handler]\n  (register-handler kind id handler))\n\n\n;; -- Interceptor -------------------------------------------------------------\n\n(defn inject-cofx\n  ([id]\n   (->interceptor\n     :id      :coeffects\n     :before  (fn coeffects-before\n                [context]\n                (if-let [handler (get-handler kind id)]\n                  (update context :coeffects handler)\n                  (console :error \"No cofx handler registered for\" id)))))\n  ([id value]\n   (->interceptor\n     :id     :coeffects\n     :before  (fn coeffects-before\n                [context]\n                (if-let [handler (get-handler kind id)]\n                  (update context :coeffects handler value)\n                  (console :error \"No cofx handler registered for\" id))))))\n\n\n;; -- Builtin CoEffects Handlers  ---------------------------------------------\n\n;; :db\n;;\n;; Adds to coeffects the value in `app-db`, under the key `:db`\n(reg-cofx\n  :db\n  (fn db-coeffects-handler\n    [coeffects]\n    (assoc coeffects :db @app-db)))\n\n\n;; Because this interceptor is used so much, we reify it\n(def inject-db (inject-cofx :db))\n\n\n"]}