{"version":3,"sources":["interpreter-tests.cljs"],"mappings":"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","names":["cljs.test/test-var","test.interpreter-tests/build-symbol-table-tests","values__9937__auto__","cljs.core/List","result__9938__auto__","cljs.core.apply","cljs.test/report","cljs.core/cons","t__9974__auto__","e39529","cljs.core/=","exfn.interpreter/build-symbol-table","e39530","test.interpreter-tests/conditional-repeats","cljs.test.update_current_env_BANG_","cljs.core/conj","cljs.test/update-current-env!","cljs.core/rest","memory","result","exfn.interpreter/interpret","value__9941__auto__","e39531","cljs.core._EQ_","e39532","e39533","e39534","e39535","e39536","e39537","e39538","e39539","e39540","e39541","e39542","cljs.test/run-block","env39543","cljs.test.empty_env","summary39544","cljs.core/volatile!","cljs.core.concat","cljs.test/set-env!","cljs.test/do-report","cljs.test/block","env__10007__auto__","cljs.test/get-current-env","cljs.test/test-vars-block","cljs.test/clear-env!","cljs.core.partial","cljs.core/merge-with","cljs.core/+","cljs.test/get-and-clear-env!","cljs.core/deref","cljs.core.assoc"],"sourcesContent":["(ns test.interpreter-tests\n  (:require [cljs.test :refer [deftest is testing run-tests]]\n            [exfn.interpreter :refer [interpret build-symbol-table]]))\n\n(deftest build-symbol-table-tests\n  (is (= {:foo 2, :bar 4, :quax 5}\n         (build-symbol-table [[:nop]\n                              [:nop]\n                              [:label :foo]\n                              [:nop]\n                              [:label :bar]\n                              [:label :quax]])))\n\n  (is (= {}\n         (build-symbol-table [[:nop]\n                              [:nop]\n                              [:nop]\n                              [:nop]\n                              [:nop]\n                              [:nop]]))))\n\n\n(deftest conditional-repeats\n  (testing \"rgz repeats\"\n    (let [memory {:registers {:a -1} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rgz :a]] memory)]\n      (is (and (= (-> result :memory :eip) 1)\n               (= (-> result :memory :eip-stack) [0])))))\n\n  (testing \"rgz does not repeat\"\n    (let [memory {:registers {:a 1} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rgz :a]] memory)]\n      (is (and (= (-> result :memory :eip) 3)\n               (= (-> result :memory :eip-stack) [])))))\n\n  (testing \"rlz repeats\"\n    (let [memory {:registers {:a 0} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rlz :a]] memory)]\n      (is (and (= (-> result :memory :eip) 1)\n               (= (-> result :memory :eip-stack) [0])))))\n\n  (testing \"rlz does not repeat\"\n    (let [memory {:registers {:a -1} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rlz :a]] memory)]\n      (is (and (= (-> result :memory :eip) 3)\n               (= (-> result :memory :eip-stack) [])))))\n\n  (testing \"rlez does not repeat\"\n    (let [memory {:registers {:a 1} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rlez :a]] memory)]\n      (is (and (= (-> result :memory :eip) 1)\n               (= (-> result :memory :eip-stack) [0])))))\n\n  (testing \"rlez repeats\"\n    (let [memory {:registers {:a 0} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rlez :a]] memory)]\n      (is (and (= (-> result :memory :eip) 3)\n               (= (-> result :memory :eip-stack) [])))))\n\n  (testing \"rgez does not repeats\"\n    (let [memory {:registers {:a 0} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rgez :a]] memory)]\n      (is (and (= (-> result :memory :eip) 3)\n               (= (-> result :memory :eip-stack) [])))))\n\n  (testing \"rgez repeats\"\n    (let [memory {:registers {:a -1} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rgez :a]] memory)]\n      (is (and (= (-> result :memory :eip) 1)\n               (= (-> result :memory :eip-stack) [0])))))\n\n  (testing \"rz repeats\"\n    (let [memory {:registers {:a 1} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rz :a]] memory)]\n      (is (= (-> result :memory :eip) 1))\n      (is (= (-> result :memory :eip-stack) [0]))))\n\n  (testing \"rz does not repeat\"\n    (let [memory {:registers {:a 0} :eip 2 :eip-stack [0]}\n          result (interpret [[:rep] [:nop] [:rz :a]] memory)]\n      (is (= (-> result :memory :eip) 3))\n      (is (= (-> result :memory :eip-stack) [])))))\n\n  (run-tests)"]}