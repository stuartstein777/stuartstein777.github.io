{
"version":3,
"file":"module$node_modules$graphlib$lib$alg$floyd_warshall.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,mDAAf,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAahHC,QAASA,iBAAgB,CAACC,CAAD,CAAIC,QAAJ,CAAcC,MAAd,CAAsB,CAC7C,IAAIC,QAAU,EAAd,CACIC,MAAQJ,CAAA,CAAEI,KAAF,EAEZA,MAAA,CAAMC,OAAN,CAAc,QAAQ,CAACC,CAAD,CAAI,CACxBH,OAAA,CAAQG,CAAR,CAAA,CAAa,EACbH,QAAA,CAAQG,CAAR,CAAA,CAAWA,CAAX,CAAA,CAAgB,CAAEC,SAAU,CAAZ,CAChBH,MAAA,CAAMC,OAAN,CAAc,QAAQ,CAACG,CAAD,CAAI,CACpBF,CAAJ,GAAUE,CAAV,GACEL,OAAA,CAAQG,CAAR,CAAA,CAAWE,CAAX,CADF,CACkB,CAAED,SAAUE,MAAVF,CAAiBG,iBAAnB,CADlB,CADwB,CAA1B,CAKAR,OAAA,CAAOI,CAAP,CAAA,CAAUD,OAAV,CAAkB,QAAQ,CAACM,IAAD,CAAO,CAC/B,IAAIH,EAAIG,IAAA,CAAKL,CAAL,GAAWA,CAAX,CAAeK,IAAf,CAAoBH,CAApB,CAAwBG,IAAxB,CAA6BL,CACjCM,KAAAA,CAAIX,QAAA,CAASU,IAAT,CACRR,QAAA,CAAQG,CAAR,CAAA,CAAWE,CAAX,CAAA,CAAgB,CAAED,SAAUK,IAAZ,CAAeC,YAAaP,CAA5B,CAHe,CAAjC,CARwB,CAA1B,CAeAF,MAAA,CAAMC,OAAN,CAAc,QAAQ,CAACS,CAAD,CAAI,CACxB,IAAIC;AAAOZ,OAAA,CAAQW,CAAR,CACXV,MAAA,CAAMC,OAAN,CAAc,QAAQ,CAACW,CAAD,CAAI,CACxB,IAAIC,KAAOd,OAAA,CAAQa,CAAR,CACXZ,MAAA,CAAMC,OAAN,CAAc,QAAQ,CAACa,CAAD,CAAI,CAExB,IAAIC,GAAKJ,IAAA,CAAKG,CAAL,CACLE,EAAAA,CAAKH,IAAA,CAAKC,CAAL,CACT,KAAIG,YAHKJ,IAAAK,CAAKR,CAALQ,CAGLD,CAAiBd,QAAjBc,CAA4BF,EAA5BE,CAA+Bd,QAC/Bc,YAAJ,CAAkBD,CAAlB,CAAqBb,QAArB,GACEa,CACA,CADGb,QACH,CADcc,WACd,CAAAD,CAAA,CAAGP,WAAH,CAAiBM,EAAjB,CAAoBN,WAFtB,CALwB,CAA1B,CAFwB,CAA1B,CAFwB,CAA1B,CAiBA,OAAOV,QApCsC,CAZ3CoB,MAAAA,CAAI3B,OAAA,CAAQ,yCAAR,CAERC,OAAA,CAAOC,OAAP,CAIA0B,QAAsB,CAACxB,CAAD,CAAIC,QAAJ,CAAcC,MAAd,CAAsB,CAC1C,MAAOH,iBAAA,CAAiBC,CAAjB,CACLC,QADK,EACOwB,mBADP,CAELvB,MAFK,EAEK,QAAQ,CAACI,CAAD,CAAI,CAAE,MAAON,EAAA,CAAE0B,QAAF,CAAWpB,CAAX,CAAT,CAFjB,CADmC,CAF5C,KAAImB,oBAAsBF,MAAA,CAAEI,QAAF,CAAW,CAAX,CALsF;",
"sources":["node_modules/graphlib/lib/alg/floyd-warshall.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphlib$lib$alg$floyd_warshall\"] = function(global,require,module,exports) {\nvar _ = require(\"../lodash\");\n\nmodule.exports = floydWarshall;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function(v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function(w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function(edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function(k) {\n    var rowK = results[k];\n    nodes.forEach(function(i) {\n      var rowI = results[i];\n      nodes.forEach(function(j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","runFloydWarshall","g","weightFn","edgeFn","results","nodes","forEach","v","distance","w","Number","POSITIVE_INFINITY","edge","d","predecessor","k","rowK","i","rowI","j","kj","ij","altDistance","ik","_","floydWarshall","DEFAULT_WEIGHT_FUNC","outEdges","constant"]
}
