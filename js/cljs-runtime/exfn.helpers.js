goog.provide('exfn.helpers');
exfn.helpers.get_source_line_numbers = (function exfn$helpers$get_source_line_numbers(source){
return new cljs.core.Keyword(null,"line-nos","line-nos",-1830843435).cljs$core$IFn$_invoke$arity$1(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__112552,i){
var map__112553 = p__112552;
var map__112553__$1 = (((((!((map__112553 == null))))?(((((map__112553.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__112553.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__112553):map__112553);
var acc = map__112553__$1;
var cur = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__112553__$1,new cljs.core.Keyword(null,"cur","cur",1153190599));
var line_nos = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__112553__$1,new cljs.core.Keyword(null,"line-nos","line-nos",-1830843435));
if(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2("",i)) || (clojure.string.starts_with_QMARK_(i,";")))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,"line-nos","line-nos",-1830843435),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_nos),"\n"].join(''));
} else {
return cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,"line-nos","line-nos",-1830843435),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_nos),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cur),"\n"].join('')),new cljs.core.Keyword(null,"cur","cur",1153190599),cljs.core.inc);
}
}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"cur","cur",1153190599),(0),new cljs.core.Keyword(null,"line-nos","line-nos",-1830843435),""], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.string.trim,clojure.string.split.cljs$core$IFn$_invoke$arity$3(source,/\r?\n/,(-1)))));
});
exfn.helpers.keyed_collection = (function exfn$helpers$keyed_collection(col){
return cljs.core.zipmap(cljs.core.range.cljs$core$IFn$_invoke$arity$1(cljs.core.count(col)),col);
});
exfn.helpers.get_supported_instructions = (function exfn$helpers$get_supported_instructions(){
return new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"mov",new cljs.core.Keyword(null,"example","example",-1755779144),"mov :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"moves b (number or register) into register :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"add",new cljs.core.Keyword(null,"example","example",-1755779144),"add :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"a + b (numbers or registers), result goes into :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"sub",new cljs.core.Keyword(null,"example","example",-1755779144),"sub :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"a - b (numbers or registers), result goes into :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"mul",new cljs.core.Keyword(null,"example","example",-1755779144),"mul :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"a * b (numbers or registers), result goes into :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"div",new cljs.core.Keyword(null,"example","example",-1755779144),"div :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"a / b (numbers or registers), result goes into :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"and",new cljs.core.Keyword(null,"example","example",-1755779144),"and :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"a \u2227 b (numbers or registers), result goes into :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"or",new cljs.core.Keyword(null,"example","example",-1755779144),"or :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"a \u2228 b (numbers or registers), result goes into :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"xor",new cljs.core.Keyword(null,"example","example",-1755779144),"xor :a :b",new cljs.core.Keyword(null,"description","description",-1428560544),"a \u2295 b (numbers or registers), result goes into :a"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"dec",new cljs.core.Keyword(null,"example","example",-1755779144),"dec :a",new cljs.core.Keyword(null,"description","description",-1428560544),"Decrements the register :a by one"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"inc",new cljs.core.Keyword(null,"example","example",-1755779144),"inc :a",new cljs.core.Keyword(null,"description","description",-1428560544),"Increments the register :a by one"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"jnz",new cljs.core.Keyword(null,"example","example",-1755779144),"jnz :x :y",new cljs.core.Keyword(null,"description","description",-1428560544),"jumps y (number or register) instructions (positive or negative) if x (number or register) is not zero."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"label",new cljs.core.Keyword(null,"example","example",-1755779144),"foo:",new cljs.core.Keyword(null,"description","description",-1428560544),"Creates a label foo: that can be used by jmp or call instructions. If encountered as an instruction it is ignored."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"jmp",new cljs.core.Keyword(null,"example","example",-1755779144),"jmp foo",new cljs.core.Keyword(null,"description","description",-1428560544),"Moves the execution pointer to the label foo."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"nop",new cljs.core.Keyword(null,"example","example",-1755779144),"nop",new cljs.core.Keyword(null,"description","description",-1428560544),"Does nothing."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"cmp",new cljs.core.Keyword(null,"example","example",-1755779144),"cmp :x :y",new cljs.core.Keyword(null,"description","description",-1428560544),"compares x and y and stores the result in the internal register :cmp, result will either be x < y, x = y, x > y."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"jne",new cljs.core.Keyword(null,"example","example",-1755779144),"jne foo",new cljs.core.Keyword(null,"description","description",-1428560544),"jumps to the label foo if the result of the previous cmp call was that x /= y"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"jg",new cljs.core.Keyword(null,"example","example",-1755779144),"jg foo",new cljs.core.Keyword(null,"description","description",-1428560544),"jumps to the label foo if the result of the previous cmp call was that x > y"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"jge",new cljs.core.Keyword(null,"example","example",-1755779144),"jge foo",new cljs.core.Keyword(null,"description","description",-1428560544),"jumps to the label foo if the result of the previous cmp call was that x >= y"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"je",new cljs.core.Keyword(null,"example","example",-1755779144),"je foo",new cljs.core.Keyword(null,"description","description",-1428560544),"jumps to the label foo if the result of the previous cmp call was that x = y"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"jle",new cljs.core.Keyword(null,"example","example",-1755779144),"jle foo",new cljs.core.Keyword(null,"description","description",-1428560544),"jumps to the label foo if the result of the previous cmp call was that x <= y"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"jl",new cljs.core.Keyword(null,"example","example",-1755779144),"jl foo",new cljs.core.Keyword(null,"description","description",-1428560544),"jumps to the label foo if the result of the previous cmp call was that x < y"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"call",new cljs.core.Keyword(null,"example","example",-1755779144),"call foo",new cljs.core.Keyword(null,"description","description",-1428560544),"Moves the execution pointer to the label foo, pushes the current execution pointer onto the EIP stack so that it can be returned to by a ret instruction."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"ret",new cljs.core.Keyword(null,"example","example",-1755779144),"ret",new cljs.core.Keyword(null,"description","description",-1428560544),"returns execution to the top execution pointer on the execution pointer stack. Results in popping eip stack."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"end",new cljs.core.Keyword(null,"example","example",-1755779144),"end",new cljs.core.Keyword(null,"description","description",-1428560544),"terminates the program."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"pop",new cljs.core.Keyword(null,"example","example",-1755779144),"pop :x",new cljs.core.Keyword(null,"description","description",-1428560544),"Pops the top value off the stack into register x"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"push",new cljs.core.Keyword(null,"example","example",-1755779144),"push :x",new cljs.core.Keyword(null,"description","description",-1428560544),"Pushes x (value or register) onto the stack"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"cat",new cljs.core.Keyword(null,"example","example",-1755779144),"cat :x y",new cljs.core.Keyword(null,"description","description",-1428560544),"Concatents the string in register x with the string y (where y is a register or literal string)"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"instruction","instruction",915804765),"comments",new cljs.core.Keyword(null,"example","example",-1755779144),"; foo",new cljs.core.Keyword(null,"description","description",-1428560544),"Comments are ignored, can be on own line or trailing, e.g. mov a b ; moves b into a"], null)], null);
});

//# sourceMappingURL=exfn.helpers.js.map
