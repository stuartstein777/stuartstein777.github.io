{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/code-editor","cljs.core/deref","p1__32818#","source","re_frame.core.subscribe","exfn.helpers/get-source-line-numbers","re-frame.core/dispatch-sync","e","scroll-pos","re-frame.core/dispatch","exfn.app/code","code","breakpoints","code-with-lines","cljs.core/zipmap","cljs.core.range","cljs.core/count","eip","iter__4529__auto__","s__32820","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__32822","cljs.core/chunk-buffer","i__32821","vec__32823","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32819","cljs.core/chunk-rest","vec__32830","cljs.core/first","cljs.core/cons","cljs.core/rest","line-no","code-line","cljs.core._EQ_","arguments","s__32827","b__32829","i__32828","iter__32826","s__32834","b__32836","i__32835","iter__32833","i","cljs.core/Keyword","cljs.core/val","cljs.core/key","exfn.app/execution-controls","is-running?","finished?","has-parsed-code?","or__4126__auto__","cljs.core/not","exfn.app/eip","exfn.app/registers","registers","cljs.core.not_EQ_","s__32838","b__32840","i__32839","vec__32841","vec__32844","iter__32837","vec__32847","vec__32850","k","name","v","exfn.app/cmp-values","cmp","cljs.core.prn","cljs.core/keyword-identical?","exfn.app/internal-registers","internal-registers","s__32854","b__32856","i__32855","vec__32857","iter__32853","vec__32860","reg","exfn.app/stack","stack","title","s__32864","b__32866","i__32865","iter__32863","r","cljs.core/reverse","exfn.app/symbol-table","symbols","s__32868","b__32870","i__32869","iter__32867","s","exfn.app/app","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\r\n  (:require\r\n   [reagent.dom :as dom]\r\n   [exfn.subs]\r\n   [exfn.events]\r\n   [exfn.helpers :as h]\r\n   [re-frame.core :as rf]))\r\n\r\n;; DEV NOTES\r\n;; npx shadow-cljs watch app\r\n;; then open web page in browser\r\n;; then connect to repl.\r\n\r\n;; -- Reagent Components ------------------------------------------------------------\r\n\r\n;; Source Code Editor.\r\n(defn code-editor []\r\n  (let [source @(rf/subscribe [:source])]\r\n    [:div\r\n     [:div.editor\r\n      [:div.source-editor-header \"Source Editor\"]\r\n      [:textarea#lineNos.text-editor-line-nos {:readOnly  true\r\n                                               :value     (h/get-source-line-numbers source)}]\r\n      [:textarea#editor.text-editor {:on-change #(rf/dispatch-sync [:update-source (-> % .-target .-value)])\r\n                                     :on-scroll (fn [^js e]\r\n                                                  (let [scroll-pos (.. e -target -scrollTop)]\r\n                                                    (rf/dispatch [:update-scroll scroll-pos])))\r\n                                     :value     @(rf/subscribe [:source])\r\n                                     :wrap      :off}]]]))\r\n\r\n;; Display the parsed code.\r\n(defn code []\r\n  [:div#code-container.code-container\r\n   [:div.parsed-code-header \"Parsed Code\"]\r\n   (let [code @(rf/subscribe [:code])\r\n         breakpoints @(rf/subscribe [:breakpoints])\r\n         code-with-lines (zipmap (range (count code)) code)\r\n         eip @(rf/subscribe [:eip])]\r\n     [:table#code.code\r\n      [:tbody\r\n       (for [[line-no code-line] code-with-lines]\r\n         [:tr.code-line {:key line-no\r\n                         :style {:background-color (if (= eip line-no) \"goldenrod\" \"white\")}}\r\n          [:td.breakpoint\r\n           [:i.fas.fa-circle {:style {:color (if (some? (breakpoints line-no)) \"red\" \"lightgray\")}\r\n                              :on-click #(rf/dispatch [:toggle-breakpoint line-no])}]]\r\n          [:td.code-eip\r\n           [:i.fas.fa-angle-double-right\r\n            {:style {:visibility (if (= eip line-no) :visible :hidden)}}]]\r\n          [:td.line-number [:div {:style {:height 25}}\r\n                            line-no]]\r\n          [:td\r\n           [:span\r\n            [:label.instruction (first code-line)]\r\n            (let [arguments (rest code-line)]\r\n              (for [i (zipmap (range (count arguments)) arguments)]\r\n                (if (keyword? (val i))\r\n                  [:label.register {:key (key i)} (val i)]\r\n                  [:label.value {:key (key i)} (val i)])))]]])]])])\r\n\r\n;; Buttons that control the executing code (start/stop/pause/speed)\r\n(defn execution-controls []\r\n  [:div.row\r\n   (let [is-running? @(rf/subscribe [:running?])\r\n         finished? @(rf/subscribe [:finished?])\r\n         has-parsed-code? @(rf/subscribe [:has-parsed-code?])]\r\n     [:div.execution-controls\r\n      [:button.btn.btn-success.play-pause\r\n       {:on-click #(rf/dispatch [:toggle-running])\r\n        :disabled (or finished? (not has-parsed-code?))}\r\n       (if is-running? [:i.fas.fa-pause] [:i.fas.fa-play])]\r\n      [:button.btn.btn-success.next-instruction\r\n       {:on-click #(rf/dispatch [:next-instruction])\r\n        :disabled (or finished? (not has-parsed-code?))}\r\n       [:i.fas.fa-forward]]\r\n      [:button.btn.btn-danger.stop-button\r\n       {:on-click #(rf/dispatch [:reset])}\r\n       [:i.fas.fa-stop]]\r\n      [:input.instr-per-sec {:type \"text\"\r\n                             :placeholder \"1\"}]\r\n      [:label.speed-label \"speed (secs / instruction.)\"]])])\r\n\r\n;; Display the current eip when running.\r\n(defn eip []\r\n  (let [eip @(rf/subscribe [:eip])]\r\n    [:div\r\n     [:label.eip-header \"EIP\"]\r\n     [:label.eip eip]]))\r\n\r\n;; Display the user registers.\r\n(defn registers []\r\n  (let [registers @(rf/subscribe [:registers])]\r\n    [:div.registers-container\r\n     [:div.registers-header \"Registers\"]\r\n     [:div.registers-list\r\n      (when (not= registers {})\r\n        (for [[k [name v]] (zipmap (range (count registers)) registers)]\r\n          [:div.row {:key k}\r\n           [:div.col-col-lg6.register-name {:key (str k \"reg:name\")} name]\r\n           [:div.col-col-lg6.register-value {:id (str \"reg\" name) :key (str k \"reg:value\")} v]]))]]))\r\n\r\n(defn cmp-values [cmp]\r\n  (prn \"cmp: \" cmp)\r\n  (cond (keyword-identical? cmp :lt) \"<\"\r\n        (keyword-identical? cmp :gt) \">\"\r\n        (keyword-identical? cmp :eq) \"=\"\r\n        :else cmp))\r\n\r\n;; Display the internal registers.\r\n(defn internal-registers []\r\n  (let [internal-registers @(rf/subscribe [:internal-registers])]\r\n    [:div.registers-container\r\n     [:div.registers-header \"Internal Registers\"]\r\n     [:div.registers-list\r\n      (when (not= internal-registers {})\r\n        (for [[reg v] internal-registers]\r\n          [:div.row\r\n           [:div.col-col-lg6.register-name reg]\r\n           [:div.col-col-lg6.register-value\r\n            (cmp-values v)]]))]]))\r\n\r\n;; Display the stack.\r\n(defn stack [stack title]\r\n  (let [stack @(rf/subscribe [stack])]\r\n    [:div.stack-container\r\n     [:div.stack-header title]\r\n     [:div.stack-list\r\n      (when (not= stack {})\r\n        (for [r (reverse stack)]\r\n          [:div.row\r\n           [:div.col-col-lg6.stack-value r]]))]]))\r\n\r\n;; Display the symbol table.\r\n(defn symbol-table []\r\n  (let [symbols @(rf/subscribe [:symbols])]\r\n    [:div.symbol-table-container\r\n     [:div.symbol-table-header \"Symbol Table\"]\r\n     [:div.symbol-table\r\n      (when (not= {} symbols)\r\n        (for [s symbols]\r\n          [:div.row\r\n           [:div.col-col-lg6.symbol-name (key s)]\r\n           [:div.col-col-lg6.symbol-value (val s)]]))]]))\r\n\r\n;; -- App ---------------------------------------------------------------------------\r\n(defn app []\r\n  [:div.content\r\n   [:div.row\r\n    [:div.col.col-lg-4\r\n     [code-editor]]\r\n    [:div.col.col-lg-4\r\n     [code]]\r\n    [:div.col.col-lg-4]]\r\n   [:div.row\r\n    [:button.btn.btn-primary.parse-btn {:on-click #(rf/dispatch [:parse])} \"Parse\"]\r\n    [:button.btn.btn-danger.parse-btn {:on-click #(rf/dispatch [:clear-parsed])} \"Clear Parsed\"]]\r\n   [execution-controls]\r\n   [:div.row.eip-container\r\n    [eip]]\r\n   [:div.grid\r\n    [:div\r\n     [registers]]\r\n    [:div\r\n     [internal-registers]]\r\n    [:div\r\n     [stack :stack \"Stack\"]]\r\n    [:div\r\n     [stack :eip-stack \"EIP Stack\"]]\r\n    [:div\r\n     [symbol-table]]]])\r\n\r\n;; -- Dev Helpers -------------------------------------------------------------------\r\n(comment (rf/dispatch-sync [:initialize]))\r\n(comment (rf/dispatch-sync [:test-code]))\r\n(comment (rf/dispatch-sync [:parse]))\r\n(comment (rf/dispatch-sync [:toggle-breakpoint 11]))\r\n(comment (rf/dispatch-sync [:reset-eip]))\r\n\r\n(comment \r\n  (let [registers [[:a 1] [:b 2] [:c 3] [:d 4] [:e 5] [:f 6]]]\r\n    ((doseq [r registers]\r\n       (rf/dispatch-sync [:add-value-to-registers r])))))\r\n\r\n(comment (rf/dispatch [:add-value-to-stack 4]))\r\n\r\n;; -- After-Load --------------------------------------------------------------------\r\n;; Do this after the page has loaded.\r\n;; Initialize the initial db state.\r\n(defn ^:dev/after-load start\r\n  []\r\n  (dom/render [app]\r\n              (.getElementById js/document \"app\")))\r\n\r\n(defn ^:export init []\r\n  (start))\r\n\r\n(defonce initialize (rf/dispatch-sync [:initialize]))       ; dispatch the event which will create the initial state. "]}