{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/code-editor","cljs.core/deref","p1__48196#","source","re_frame.core.subscribe","re-frame.core/dispatch","exfn.helpers/get-source-line-numbers","re-frame.core/dispatch-sync","e","scroll-pos","exfn.app/code","code","breakpoints","code-with-lines","cljs.core/zipmap","cljs.core.range","cljs.core/count","eip","on-breakpoint?","iter__4529__auto__","s__48198","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__48200","cljs.core/chunk-buffer","i__48199","vec__48201","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48197","cljs.core/chunk-rest","vec__48208","cljs.core/first","cljs.core/cons","cljs.core/rest","line-no","code-line","cljs.core._EQ_","arguments","s__48205","b__48207","i__48206","iter__48204","s__48212","b__48214","i__48213","iter__48211","i","exfn.helpers/keyed-collection","cljs.core/Keyword","cljs.core/val","cljs.core/key","exfn.app/execution-controls","p1__48215#","is-running?","finished?","has-parsed-code?","running-speed","on-breakpoint","and__4115__auto__","or__4126__auto__","cljs.core/not","exfn.app/eip","exfn.app/registers","registers","last-edit-register","cljs.core.not_EQ_","s__48217","b__48219","i__48218","vec__48220","vec__48223","iter__48216","vec__48226","vec__48229","k","name","v","cljs.core/keyword-identical?","exfn.app/cmp-values","cmp","exfn.app/internal-registers","internal-registers","cljs.core.dissoc","eip-stack","rep-counters","s__48233","b__48235","i__48234","vec__48236","vec__48239","iter__48232","vec__48242","vec__48245","reg","s__48249","b__48251","i__48250","vec__48252","iter__48248","vec__48255","r","cljs.core/reverse","s__48259","b__48261","i__48260","vec__48262","iter__48258","vec__48265","exfn.app/stack","stack","title","s__48269","b__48271","i__48270","vec__48272","iter__48268","vec__48275","exfn.app/symbol-table","symbols","s__48279","b__48281","i__48280","vec__48282","iter__48278","vec__48285","s","exfn.app/supported-instructions","instructions","exfn.helpers/get-supported-instructions","s__48289","b__48291","i__48290","vec__48292","map__48295","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","iter__48288","vec__48297","map__48300","instruction","example","description","exfn.app/output","output","exfn.app/app","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\n  (:require\n   [reagent.dom :as dom]\n   [exfn.subs]\n   [exfn.events]\n   [exfn.helpers :as h]\n   [re-frame.core :as rf]))\n\n;; DEV NOTES\n;; npx shadow-cljs watch app\n;; then open web page in browser\n;; then connect to repl.\n\n;; -- Reagent Components ------------------------------------------------------------\n\n;; Source Code Editor.\n(defn code-editor []\n  (let [source @(rf/subscribe [:source])]\n    [:div\n     [:div.editor\n      [:div.source-editor-header.header \"Source Editor\"\n       [:button.btn.btn-danger.btn.py-0 {:on-click #(rf/dispatch [:clear-source])\n                                         :style    {:font-size    \"0.8em\"\n                                                    :float        :right\n                                                    :margin-top   2\n                                                    :margin-right 2}}\n        \"clear\"]]\n      [:textarea#lineNos.text-editor-line-nos {:readOnly  true\n                                               :value     (h/get-source-line-numbers source)}]\n      [:textarea#editor.text-editor {:on-change #(rf/dispatch-sync [:update-source (-> % .-target .-value)])\n                                     :on-scroll (fn [^js e]\n                                                  (let [scroll-pos (.. e -target -scrollTop)]\n                                                    (rf/dispatch [:update-scroll scroll-pos])))\n                                     :value     @(rf/subscribe [:source])\n                                     :wrap      :off}]]]))\n\n;; Display the parsed code.\n(defn code []\n  (let [code            @(rf/subscribe [:code])\n        breakpoints     @(rf/subscribe [:breakpoints])\n        code-with-lines (zipmap (range (count code)) code)\n        eip             @(rf/subscribe [:eip])\n        on-breakpoint?  @(rf/subscribe [:on-breakpoint])]\n    [:div {:style {:margin 10\n                   :height 455\n                   :overflow-y :none\n                   :width  1000}}\n     [:div.parsed-code-header.header\n      [:div\n       [:div {:style {:text-align   :left\n                      :padding-left 5}}\n        [:i.fas.fa-trash-alt {:style    {:color  :red\n                                         :cursor :pointer}\n                              :on-click #(rf/dispatch [:clear-breakpoints])}]\n        [:label {:style {:margin-left 10}} \"Parsed Code\"]\n        [:button.btn.btn-danger.btn.py-0 {:on-click #(rf/dispatch [:clear-parsed])\n                                          :style    {:font-size    \"0.8em\"\n                                                     :float        :right\n                                                     :margin-top   2\n                                                     :margin-right 2}}\n         \"clear\"]]]]\n     [:div#code-container.code-container\n      [:table#code.code\n       [:tbody\n        (for [[line-no code-line] code-with-lines]\n          [:tr.code-line {:key   line-no\n                          :style {:background-color (if (= eip line-no) \"goldenrod\" \"white\")}}\n           [:td.breakpoint\n            [:i.fas.fa-circle {:style    {:color (if (some? (breakpoints line-no)) \"red\" \"lightgray\")}\n                               :on-click #(rf/dispatch [:toggle-breakpoint line-no])}]]\n           [:td.code-eip\n            [:i.fas.fa-angle-double-right\n             {:style {:visibility (if (= eip line-no) :visible :hidden)}}]]\n           [:td.line-number [:div {:style {:height 25}}\n                             line-no]]\n           [:td\n            [:span\n             [:label.instruction (first code-line)]\n             (let [arguments (rest code-line)]\n               (for [i (h/keyed-collection arguments)]\n                 (if (keyword? (val i))\n                   [:label.register {:key (key i)} (val i)]\n                   [:label.value {:key (key i)} (val i)])))]]])]]]\n     [:div.breakpoint-indicator\n      {:style {:visibility (if on-breakpoint? :visible :hidden)}}\n      [:label (str \"Breakpoint hit: Line \" eip)]]]))\n\n;; Buttons that control the executing code (start/stop/pause/speed)\n(defn execution-controls []\n  [:div.row\n   (let [is-running? @(rf/subscribe [:running?])\n         finished? @(rf/subscribe [:finished?])\n         has-parsed-code? @(rf/subscribe [:has-parsed-code?])\n         running-speed @(rf/subscribe [:running-speed])\n         on-breakpoint @(rf/subscribe [:on-breakpoint])\n         eip @(rf/subscribe [:eip])]\n     [:div.execution-controls\n      [:button.btn.btn-primary.parse-btn {:on-click #(rf/dispatch [:parse])} \"Parse\"]\n      [:button.btn.btn-success.play-pause\n       {:on-click #(rf/dispatch [:toggle-running])\n        :disabled (and (or finished? (not has-parsed-code?)) (not on-breakpoint))}\n       (if is-running? [:i.fas.fa-pause] [:i.fas.fa-play])]\n      [:button.btn.btn-success.next-instruction\n       {:on-click #(rf/dispatch [:next-instruction])\n        :disabled (and (or finished? (not has-parsed-code?) is-running? ) (not on-breakpoint))}\n       [:i.fas.fa-forward]]\n      [:button.btn.btn-danger.stop-button\n       {:on-click #(rf/dispatch [:reset])}\n       (if finished? [:i.fas.fa-redo] [:i.fas.fa-stop])]\n      [:input.instr-per-sec {:disabled    is-running?\n                             :on-change   #(rf/dispatch-sync [:update-running-speed (-> % .-target .-value)])\n                             :placeholder \"1000\"\n                             :type        \"text\"\n                             :value       running-speed}]\n      [:label.speed-label \"speed (msecs / instruction.)\"]\n      [:label.breakpoint-label\n       {:style {:visibility (if on-breakpoint :visible :hidden)}}\n       (str \"on-breakpoint: \" eip)]])])\n\n;; Display the current eip when running.\n(defn eip []\n  (let [eip @(rf/subscribe [:eip])]\n    [:div\n     [:label.eip-header.header \"EIP\"]\n     [:label.eip eip]]))\n\n;; Display the user registers.\n(defn registers []\n  (let [registers @(rf/subscribe [:registers])\n        last-edit-register @(rf/subscribe [:last-edit-register])]\n    [:div.registers-container\n     [:div.registers-header.header \"Registers\"]\n     [:div.registers-list\n      (when (not= registers {})\n        (for [[k [name v]] (h/keyed-collection registers)]\n          [:div.row {:key k}\n           [:div.col-col-lg6.register-name {:key (str k \"reg:name\")} name]\n           (if (keyword-identical? name last-edit-register)\n             [:div.col-col-lg6.register-value {:id (str \"reg\" name) :key (str k \"reg:value\")\n                                               :style {:background-color :yellow}}\n              v]\n             [:div.col-col-lg6.register-value {:id (str \"reg\" name) :key (str k \"reg:value\")} v])]))]]))\n\n(defn cmp-values [cmp]\n  (cond (keyword-identical? cmp :lt) \"<\"\n        (keyword-identical? cmp :gt) \">\"\n        (keyword-identical? cmp :eq) \"=\"\n        :else cmp))\n\n;; Display the internal registers.\n(defn internal-registers []\n  (let [internal-registers (dissoc @(rf/subscribe [:internal-registers]) :errmsg)\n        eip-stack @(rf/subscribe [:eip-stack])\n        rep-counters @(rf/subscribe [:rep-counters-stack])]\n    [:div.registers-container\n     [:div.registers-header.header \"Internal Registers\"]\n     [:div.registers-list\n      (when (not= internal-registers {})\n        (for [[k [reg v]] (h/keyed-collection internal-registers)]\n          [:div.row {:key k}\n           [:div.col-col-lg6.register-name {:key (str \"irgn-\" k)} reg]\n           [:div.col-col-lg6.register-value {:key (str \"irgv-\" k)}\n            (cmp-values v)]]))\n      [:div\n       [:div {:style {:float :left :width 103 :text-align :center}}\n        [:div.header \"EIP Stack\"]\n        [:div\n         (for [[k r] (h/keyed-collection (reverse eip-stack))]\n           [:div.eip-stack-value {:key k} r])]]\n       [:div {:style {:float :right :width 103 :text-align :center}}\n        [:div.header \"RP Stack\"]\n        [:div \n         (for [[k r] (h/keyed-collection (reverse rep-counters))]\n           [:div.eip-stack-value {:key k} r])]]]]]))\n\n;; Display the stack.\n(defn stack [stack title]\n  (let [stack @(rf/subscribe [stack])]\n    [:div.stack-container\n     [:div.stack-header.header title]\n     [:div.stack-list\n      (when (not= stack {})\n        (for [[k r] (h/keyed-collection (reverse stack))]\n          [:div.row {:key k}\n           [:div.col-col-lg6.stack-value {:key (str \"stack-val-\" k)} r]]))]]))\n\n;; Display the symbol table.\n(defn symbol-table []\n  (let [symbols @(rf/subscribe [:symbols])]\n    [:div.symbol-table-container\n     [:div.symbol-table-header.header \"Symbol Table\"]\n     [:div.symbol-table\n      (when (not= {} symbols)\n        (for [[k s] (h/keyed-collection symbols)]\n          [:div.row {:key k}\n           [:div.col-col-lg6.symbol-name {:key (str \"symbols-name-\" k)} (key s)]\n           [:div.col-col-lg6.symbol-value {:key (str \"symbols-value-\" k)} (val s)]]))]]))\n\n(defn supported-instructions []\n  [:div\n   [:h2 \"Supported Instructions\"]\n   [:table.table.table-striped.table-hover {:style {:margin 10 :border \"1px solid black\"}}\n    [:thead.table {:style {:background-color \"rgb(18, 18, 19)\" :color :white}}\n     [:tr\n      [:th {:style {:text-align :left :padding 10}} \"Instruction\"]\n      [:th {:style {:text-align :left :padding 10}} \"Example\"]\n      [:th {:style {:text-align :left :padding 10}} \"Description\"]]]\n    [:tbody\n     (let [instructions (h/get-supported-instructions)]\n       (for [[k {:keys [instruction example description]}] (h/keyed-collection instructions)]\n         [:tr {:key k :style {:border \"1px solid black\"}}\n          [:td {:style {:width 150 :text-align :left :border-right \"1px solid black\"}} instruction]\n          [:td {:style {:width 200 :text-align :left :border-right \"1px solid black\"}}\n           example]\n          [:td {:style {:width 500 :text-align :left}} description]]))]]])\n\n(defn output []\n  (let [output @(rf/subscribe [:output])]\n    [:div.std-out-container\n     [:div.header {:style {:text-align :left}}\n      [:label {:style {:margin-left 5}}\"Output\"]\n      [:button.btn.btn-danger.btn.py-0\n       {:on-click #(rf/dispatch [:clear-output])\n        :style    {:font-size    \"0.8em\"\n                   :float        :right\n                   :margin-top   2\n                   :margin-right 2}}\n       \"clear\"]]\n     [:textarea.std-out {:value output\n                         :readOnly  true\n                         :wrap      :off}]]))\n\n;; -- App ---------------------------------------------------------------------------\n(defn app []\n  [:div.content\n   [:div.row\n    [:div.col.col-lg-4\n     [code-editor]]\n    [:div.col.col-lg-4\n     [code]]]\n   [:div.row\n    [execution-controls]]\n   [:div.row.eip-container\n    [eip]]\n   [:div.grid\n    [:div\n     [registers]]\n    [:div\n     [internal-registers]]\n    [:div\n     [stack :stack \"Stack\"]]\n    [:div\n     [symbol-table]]\n    [:div\n     [output]]]   \n   [:div\n    [supported-instructions]]])\n\n;; -- Dev Helpers -------------------------------------------------------------------\n(comment (rf/dispatch-sync [:initialize]))\n(comment (rf/dispatch-sync [:test-code]))\n(comment (rf/dispatch-sync [:parse]))\n(comment (rf/dispatch-sync [:toggle-breakpoint 11]))\n(comment (rf/dispatch-sync [:reset-eip]))\n\n(comment \n  (let [registers [[:a 1] [:b 2] [:c 3] [:d 4] [:e 5] [:f 6]]]\n    ((doseq [r registers]\n       (rf/dispatch-sync [:add-value-to-registers r])))))\n\n(comment (rf/dispatch [:add-value-to-stack 4]))\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (start))\n\n(defonce initialize (rf/dispatch-sync [:initialize]))       ; dispatch the event which will create the initial state. "]}