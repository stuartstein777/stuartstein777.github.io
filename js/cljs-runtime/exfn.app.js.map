{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/det","r","p1","p2","p__71081","vec__71082","cljs.core.nth","exfn.app/calculate-w","v1","v2","exfn.app/is-point-outside?","point","points","closed-points","cljs.core.conj","cljs.core/first","cljs.core.map","cljs.core.partial","cljs.core.partition","cljs.core.reduce","cljs.core/+","re_frame.core.reg_event_db","_","exfn.app/clear-canvas","canvas","ctx","w","h","exfn.app/draw-guides","x","y","exfn.app/draw-selected-point","js/Math","exfn.app/draw-boundary","should-fill","cljs.core.dorun","p__71085","map__71086","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re-frame.core/reg-fx","p__71088","vec__71089","map__71092","js/document","re_frame.core.reg_event_fx","p__71094","map__71095","db","p__71097","p__71098","map__71099","vec__71100","xy","cljs.core._EQ_","updated-points","cljs.core.assoc","cljs.core.update","cljs.core/conj","p__71104","map__71105","p__71107","map__71108","p__71110","map__71111","current-action","toggle","p__71113","map__71114","should-fill?","cljs.core/not","p__71116","map__71117","cljs.core/empty?","last-dropped","cljs.core/vec","cljs.core/butlast","cljs.core/pop","p__71119","map__71120","new-points","cljs.core/peek","new-undo","new-redo","re_frame.core.reg_sub","p__71122","map__71123","p__71125","map__71126","cljs.core/count","exfn.app/point-canvas","e","re-frame.core/dispatch-sync","cljs.core/deref","re_frame.core.subscribe","exfn.app/buttons","re-frame.core/dispatch","exfn.app/location","exfn.app/app","exfn.app/start","reagent.dom.render","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize"],"sourcesContent":["(ns exfn.app\r\n  (:require [reagent.dom :as dom]\r\n            [re-frame.core :as rf]\r\n            [goog.string.format]))\r\n\r\n;; -- Helpers ------------------------------------------------------------------------------------\r\n(defn det [r p1 p2]\r\n  (- (* (- (:x p1) (:x r))\r\n        (- (:y p2) (:y r)))\r\n     (* (- (:x p2) (:x r))\r\n        (- (:y p1) (:y r)))))\r\n\r\n(defn calculate-w [r [v1 v2]]\r\n  (if (<= (:y v1) (:y r))\r\n    (if (and (> (:y v2) (:y r)) (pos? (det r v1 v2)))\r\n         1 0)\r\n    (if (and (<= (:y v2) (:y r)) (neg? (det r v1 v2)))\r\n      -1 0)))\r\n\r\n(defn is-point-outside? [point points]\r\n  (let [closed-points (conj points (first points))]\r\n    (->> (map (partial calculate-w point) (partition 2 1 closed-points))\r\n         (reduce +)\r\n         (zero?))))\r\n\r\n;;-- Events and Effects --------------------------------------------------------------------------\r\n(rf/reg-event-db\r\n :initialize\r\n (fn [_ _]\r\n   {:points []\r\n    :current-action :drawing-boundary\r\n    :point {}\r\n    :should-fill false\r\n    :location \"Requires Calculation\"\r\n    :undo-stack []\r\n    :redo-stack []}))\r\n\r\n(defn clear-canvas [canvas ctx]\r\n  (let [w (.-width canvas)\r\n        h (.-height canvas)]\r\n    (.beginPath ctx)\r\n    (set! (.-fillStyle ctx) \"white\")\r\n    (.rect ctx 0 0  w h)\r\n    (.fill ctx)))\r\n\r\n(defn draw-guides [ctx points x y]\r\n  (.beginPath ctx)\r\n  (.lineTo ctx 0 y)\r\n  (.lineTo ctx 500 y)\r\n  (set! (.-lineWidth ctx) 1.0)\r\n  (set! (.-strokeStyle ctx) \"green\")\r\n  (.stroke ctx))\r\n\r\n(defn draw-selected-point [ctx x y]\r\n  (when (and (not (nil? x)) (not (nil? y)))\r\n    (.beginPath ctx)\r\n    (set! (.-strokeStyle ctx) \"black\")\r\n    (set! (.-fillStyle ctx) \"blue\")\r\n    (.arc ctx x y 4 0 (* 2 (.-PI js/Math)) 0)\r\n    (.stroke ctx)\r\n    (.fill ctx)))\r\n\r\n(defn draw-boundary [ctx points should-fill]\r\n  (set! (.-lineWidth ctx) 2.0)\r\n  (set! (.-strokeStyle ctx) \"black\")\r\n  (.beginPath ctx)\r\n  (when should-fill\r\n    (set! (.-fillStyle ctx) \"orange\"))\r\n  (dorun (map (fn [{:keys [x y]}]\r\n                (.lineTo ctx x y)) points))\r\n  (.stroke ctx)\r\n  (.fill ctx))\r\n\r\n(rf/reg-fx\r\n :draw-canvas\r\n (fn [[points {:keys [x y]} should-fill]]\r\n   (let [canvas (.getElementById js/document \"point-canvas\")\r\n         ctx (.getContext canvas \"2d\")]\r\n     (.scale ctx 1 1)\r\n     (clear-canvas canvas ctx)\r\n     (draw-boundary ctx points should-fill)\r\n     (draw-selected-point ctx x y)\r\n     #_(draw-guides ctx points x y))))\r\n\r\n(rf/reg-event-fx\r\n :update-canvas\r\n (fn [{:keys [db]} _]\r\n   {:db db\r\n    :draw-canvas [(:points db) (:point db) (:should-fill db)]}))\r\n\r\n(rf/reg-event-fx\r\n :point-click\r\n (fn [{:keys [db]} [_ xy]]\r\n   (cond\r\n     ; if user is drawing boundary...\r\n     (= :drawing-boundary (db :current-action))\r\n     (let [updated-points (conj (db :points) xy)]\r\n       {:db          (-> db\r\n                         (assoc :points updated-points)\r\n                         (assoc :location \"Requires Calculation\")\r\n                         (assoc :redo-stack [])\r\n                         (update :undo-stack conj (db :points)))\r\n        :draw-canvas [updated-points (:point db) (db :should-fill)]})\r\n\r\n     ; if user is selecting a point.\r\n     (= :selecting-point (db :current-action))\r\n     {:db          (-> db\r\n                       (assoc :point xy)\r\n                       (assoc :location \"Requires Calculation\"))\r\n      :draw-canvas [(:points db) xy (db :should-fill)]})))\r\n\r\n(rf/reg-event-fx\r\n :reset-boundary\r\n (fn [{:keys [db]} _]\r\n   {:draw-canvas [[] (:point db) (:should-fill db)]\r\n    :db          (-> db\r\n                     (assoc :points [])\r\n                     (update :undo-stack conj (db :points))\r\n                     (assoc :current-action :drawing-boundary))}))\r\n\r\n(rf/reg-event-db\r\n :calculate\r\n (fn [{:keys [points point] :as db} _]\r\n   (if (is-point-outside? point points)\r\n     (assoc db :location \"Point is Outside the boundary\")\r\n     (assoc db :location \"Point is Inside the boundary\"))))\r\n\r\n(rf/reg-event-db\r\n :toggle\r\n (fn [{:keys [current-action] :as db} _]\r\n   (let [toggle {:drawing-boundary :selecting-point :selecting-point :drawing-boundary}]\r\n     (assoc db :current-action (toggle current-action)))))\r\n\r\n(rf/reg-event-fx\r\n :toggle-fill\r\n (fn [{:keys [db]} _]\r\n   (let [should-fill? (not (:should-fill db))]\r\n     {:db (assoc db :should-fill should-fill?)\r\n      :draw-canvas [(:points db) (:point db) should-fill?]})))\r\n\r\n;; on undo, we need to make points equal to result of popping undo-stack\r\n;; make undo-stack equal to popping undo-stack\r\n;; push points tp redo-stack\r\n(rf/reg-event-fx\r\n  :undo\r\n  (fn [{:keys [db]} _]\r\n    (if (empty? (:undo-stack db))\r\n      {:db db}\r\n      (let [last-dropped (vec (butlast (db :points)))]\r\n        {:db          (-> db\r\n                          (assoc :points last-dropped)\r\n                          (update :undo-stack pop)\r\n                          (update :redo-stack conj (db :points)))\r\n         :draw-canvas [last-dropped (:point db) (:should-fill db)]}))))\r\n\r\n(rf/reg-event-fx\r\n :redo\r\n (fn [{:keys [db]} _]\r\n   (if (empty? (:redo-stack db))\r\n     {:db db}\r\n     (let [new-points (peek (:redo-stack db))\r\n           new-undo (:points db)\r\n           new-redo (pop (:redo-stack db))]\r\n       {:db          (-> db\r\n                         (assoc :points new-points)\r\n                         (assoc :redo-stack new-redo)\r\n                         (assoc :undo-stack new-undo))\r\n        :draw-canvas [new-points (:point db) (:should-fill db)]}))))\r\n\r\n;; -- Subscriptions ------------------------------------------------------------------\r\n(rf/reg-sub\r\n :points\r\n (fn [db _]\r\n   (:points db)))\r\n\r\n(rf/reg-sub\r\n :boundary-button-label\r\n (fn [db _]\r\n   (:boundary-button-label db)))\r\n\r\n(rf/reg-sub\r\n :current-action\r\n (fn [db _]\r\n   (:current-action db)))\r\n\r\n(rf/reg-sub\r\n :location\r\n (fn [db _]\r\n   (:location db)))\r\n\r\n(rf/reg-sub\r\n :toggle-label\r\n (fn [{:keys [current-action]}]\r\n   (if (= current-action :drawing-boundary)\r\n     \"Select Point\"\r\n     \"Draw Boundary\")))\r\n\r\n(rf/reg-sub\r\n :point-count\r\n (fn [{:keys [points]}]\r\n   (count points)))\r\n\r\n;; -- Reagent Forms ------------------------------------------------------------------\r\n(defn point-canvas []\r\n  [:div.content\r\n   [:canvas#point-canvas.canvas\r\n    {:on-click  (fn [^js e] (rf/dispatch-sync [:point-click {:x (.. e -nativeEvent -offsetX) :y (.. e -nativeEvent -offsetY)}]))\r\n     :width 500\r\n     :height 500}]\r\n   [:div.current-action\r\n    (let [current-action @(rf/subscribe [:current-action])]\r\n      (if (= current-action :drawing-boundary)\r\n        (str \"Drawing boundary. Points: \" @(rf/subscribe [:point-count]))\r\n        \"Selecting Point\"))]])\r\n\r\n(defn buttons []\r\n  [:div.content\r\n   [:div\r\n    [:button.btn.btn-primary\r\n     {:on-click #(rf/dispatch [:toggle (not @(rf/subscribe [:current-action]))])}\r\n     @(rf/subscribe [:toggle-label])]\r\n    [:button.btn.btn-danger\r\n     {:on-click #(rf/dispatch [:reset-boundary])}\r\n     \"Reset boundary\"]]\r\n   [:button.btn.btn-success\r\n    {:on-click #(rf/dispatch [:calculate])}\r\n    \"Calculate\"]\r\n   [:button.btn.btn-primary\r\n    {:on-click #(rf/dispatch [:toggle-fill])}\r\n    \"Toggle fill\"]\r\n   [:button.btn.btn-primary\r\n    {:on-click #(rf/dispatch [:undo])}\r\n    \"Undo Point\"]\r\n    [:button.btn.btn-primary\r\n    {:on-click #(rf/dispatch [:redo])}\r\n    \"Redo Point\"]])\r\n\r\n(defn location []\r\n  [:div.content.result\r\n   @(rf/subscribe [:location])])\r\n\r\n;; -- App -------------------------------------------------------------------------\r\n(defn app []\r\n  [:div.container\r\n   [point-canvas]\r\n   [location]\r\n   [buttons]])\r\n\r\n(comment (rf/dispatch-sync [:initialize]))\r\n(comment (rf/dispatch-sync [:reset-boundary]))\r\n(comment (rf/dispatch [:update-canvas]))\r\n(rf/dispatch [:update-canvas])\r\n;only here for debugging / dev / testing.\r\n\r\n;; -- After-Load --------------------------------------------------------------------\r\n;; Do this after the page has loaded.\r\n;; Initialize the initial db state.\r\n(defn ^:dev/after-load start\r\n  []\r\n  (dom/render [app]\r\n              (.getElementById js/document \"app\")))\r\n\r\n(defn ^:export init []\r\n  (start))\r\n\r\n(defonce initialize (rf/dispatch-sync [:initialize]))       ; dispatch the event which will create the initial state. "]}