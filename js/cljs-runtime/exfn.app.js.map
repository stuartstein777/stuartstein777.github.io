{"version":3,"sources":["exfn/app.cljs"],"mappings":";AAMA,AAAA,AAAMA,AAAKC,AAAEC,AAAGC;AAAhB,AACE,AAAG,AAAG,AAAG,AAAA,AAAID,AAAI,AAAA,AAAID,AACf,AAAG,AAAA,AAAIE,AAAI,AAAA,AAAIF,AAClB,AAAG,AAAG,AAAA,AAAIE,AAAI,AAAA,AAAIF,AACf,AAAG,AAAA,AAAIC,AAAI,AAAA,AAAID;;AAEvB,AAAA,AAAAG,AAAMG,AAAaN;AAAnB,AAAA,AAAAI,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAsBG;AAAtB,AAAAF,AAAAD,AAAA,AAAA,AAAyBI;AAAzB,AACE,AAAI,AAAI,AAAA,AAAID,AAAI,AAAA,AAAIP;AAClB,AAAI,AAAK,AAAG,AAAA,AAAIQ,AAAI,AAAA,AAAIR,AAAI,AAAA,AAAM,AAACD,AAAIC,AAAEO,AAAGC;AAA5C;;AAAA;;;AAEA,AAAI,AAAK,AAAI,AAAA,AAAIA,AAAI,AAAA,AAAIR,AAAI,AAAA,AAAM,AAACD,AAAIC,AAAEO,AAAGC;AAA7C;;AAAA;;;;AAGJ,AAAA,AAAMC,AAAmBC,AAAMC;AAA/B,AACE,AAAMC,AAAc,AAACC,AAAKF,AAAO,AAACG,AAAMH;AAAxC,AACO,AAACI,AAAI,AAACC,AAAQV,AAAYI,AAAO,AAAA,AAAA,AAACO,AAAcL,AAChD,AAACM,AAAOC,AACR,AAAA;;AAGT,AAAA,AAACC,AAEA,AAAKC,AAAEA;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AASD,AAAA,AAAMC,AAAcC,AAAOC;AAA3B,AACE,AAAMC,AAAE,AAASF;AACXG,AAAE,AAAUH;AADlB,AAEE,AAAYC;;AACZ,AAAA,AAAM,AAAaA;;AACnB,AAAA,AAAA,AAAOA,AAASC,AAAEC;;AAClB,AAAOF;;AAEX,AAAA,AAAMG,AAAaH,AAAIb,AAAOiB,AAAEC;AAAhC,AACE,AAAYL;;AACZ,AAAA,AAASA,AAAMK;;AACf,AAAA,AAASL,AAAQK;;AACjB,AAAA,AAAM,AAAaL;;AACnB,AAAA,AAAM,AAAeA;;AACrB,AAASA;;AAEX,AAAA,AAAMM,AAAqBN,AAAII,AAAEC;AAAjC,AACE,AAAM,AAAK,AAAK,AAAA,AAAMD,AAAI,AAAK,AAAA,AAAMC;AAArC,AACE,AAAYL;;AACZ,AAAA,AAAM,AAAeA;;AACrB,AAAA,AAAM,AAAaA;;AACnB,AAAA,AAAA,AAAA,AAAMA,AAAII,AAAEC,AAAM,AAAA,AAAK,AAAME;;AAC7B,AAASP;;AACT,AAAOA;;AANT;;;AAQF,AAAA,AAAMQ,AAAeR,AAAIb,AAAOsB;AAAhC,AACE,AAAA,AAAM,AAAaT;;AACnB,AAAA,AAAM,AAAeA;;AACrB,AAAYA;;AACZ,AAACU,AAAM,AAACnB,AAAI,AAAAoB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaR;AAAb,AAAAY,AAAAJ,AAAA,AAAeP;AAAf,AACE,AAAA,AAAA,AAAA,AAAML,AAAII,AAAEC,AAAM,AAAA,AAAK,AAAME;;AAC7B,AAASP,AAAII,AAAEC;AAAIlB;;AACjC,AAASa;;AACT,AAAMS;AAAN,AACE,AAAA,AAAM,AAAaT;;AACnB,AAAOA;;AAFT;;;AAIF,AAAA,AAACiB,AAEA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAArC,AAAAsC,AAAA,AAAA,AAAMhC;AAANiC,AAAA,AAAAvC,AAAAsC,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAP,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAC,AAAAK,AAAAA;AAAA,AAAAJ,AAAAI,AAAA,AAAqBhB;AAArB,AAAAY,AAAAI,AAAA,AAAuBf;AAAvB,AAAAxB,AAAAsC,AAAA,AAAA,AAA2BV;AAA3B,AACE,AAAMV,AAAO,AAAA,AAAiBsB;AACxBrB,AAAI,AAAA,AAAaD;AADvB,AAEE,AAAA,AAAA,AAAQC;;AACR,AAACF,AAAaC,AAAOC;;AACrB,AAACQ,AAAcR,AAAIb,AAAOsB;;AAC1B,AAACH,AAAoBN,AAAII,AAAEC;;AAGhC,AAAA,AAACiB,AAEA,AAAAC,AAAkB1B;AAAlB,AAAA,AAAA2B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAX,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAC,AAAAS,AAAAA;AAAA,AAAAR,AAAAQ,AAAA,AAAaC;AAAb,AAAA,AAAA,AAAA,AAAA,AACOA,AACU,AAAA,AAASA,AAAI,AAAA,AAAQA,AAAI,AAAA,AAAcA;;AAEzD,AAAA,AAACH,AAEA,AAAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAf,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAd,AAAAC,AAAAa,AAAAA;AAAA,AAAAZ,AAAAY,AAAA,AAAaH;AAAbI,AAAAF;AAAA,AAAA9C,AAAAgD,AAAA,AAAA,AAAmBhC;AAAnB,AAAAhB,AAAAgD,AAAA,AAAA,AAAqBC;AAArB,AACE,AAEE,AAAA,AAACC,AAAoB,AAAA,AAAA,AAACN,AAAAA,AAAAA;AACtB,AAAMO,AAAe,AAAC3C,AAAK,AAAA,AAAA,AAACoC,AAAAA,AAAAA,AAAYK;AAAxC,AAAA,AAAA,AAAA,AAAA,AACoBL,AACA,AAAA,AAACQ,AAAcD,AACf,AAAA,AAACC,AAAgB,AAAA,AAAA,AAAI,AAAChD,AAAkB,AAAA,AAAA,AAACwC,AAAAA,AAAAA,AAAWO,AACpD,AAAA,AAAA,AAACC,AACD,AAAA,AAACC,AAAmBC,AAAK,AAAA,AAAA,AAACV,AAAAA,AAAAA,AAC7BO,AAAe,AAAA,AAAQP,AAAI,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AAT/C,AAYE,AAAA,AAACM,AAAmB,AAAA,AAAA,AAACN,AAAAA,AAAAA;AAZvB,AAAA,AAAA,AAAA,AAaoBA,AACA,AAAA,AAACQ,AAAaH,AACd,AAAA,AAACG,AAAgB,AAAA,AAAA,AAAI,AAAChD,AAAkB6C,AAAG,AAAA,AAAA,AAACL,AAAAA,AAAAA,AAC/C,AAAA,AAASA,AAAIK,AAAG,AAAA,AAAA,AAACL,AAAAA,AAAAA;;AAhBlC;;;;AAkBH,AAAA,AAACH,AAEA,AAAAc,AAAkBvC;AAAlB,AAAA,AAAAwC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAAC,AAAAsB,AAAAA;AAAA,AAAArB,AAAAqB,AAAA,AAAaZ;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AACoB,AAAA,AAAQA,AAAI,AAAA,AAAcA,AAC1BA,AACA,AAAA,AAAA,AAACQ,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAACC,AAAmBC,AAAK,AAAA,AAAA,AAACV,AAAAA,AAAAA,AAC1B,AAAA,AAAA,AAACQ;;AAEtB,AAAA,AAACrC,AAEA,AAAA0C,AAAmCzC;AAAnC,AAAA,AAAA0C,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAAA,AAA+Bd;AAA/B,AAAAT,AAAAuB,AAAA,AAAapD;AAAb,AAAA6B,AAAAuB,AAAA,AAAoBrD;AAApB,AACE,AAAI,AAACD,AAAkBC,AAAMC;AAC3B,AAAA,AAAA,AAAC8C,AAAMR;;AACP,AAAA,AAAA,AAACQ,AAAMR;;;AAEZ,AAAA,AAAC7B,AAEA,AAAA4C,AAAqC3C;AAArC,AAAA,AAAA4C,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5B,AAAA,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAAC,AAAA0B,AAAAA;AAAAA,AAAiChB;AAAjC,AAAAT,AAAAyB,AAAA,AAAaC;AAAb,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC;AAAN,AACE,AAAA,AAACV,AAAMR,AAAmB,AAACkB,AAAAA,AAAAA,AAAOD,AAAAA;;AAEvC,AAAA,AAACpB,AAEA,AAAAsB,AAAkB/C;AAAlB,AAAA,AAAAgD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhC,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA/B,AAAAC,AAAA8B,AAAAA;AAAA,AAAA7B,AAAA6B,AAAA,AAAapB;AAAb,AACE,AAAMqB,AAAa,AAACC,AAAI,AAAA,AAActB;AAAtC,AAAA,AAAA,AAAA,AAAA,AACO,AAAA,AAACQ,AAAMR,AAAgBqB,AACb,AAAA,AAASrB,AAAI,AAAA,AAAQA,AAAIqB;;AAK7C,AAAA,AAACxB,AAEA,AAAA0B,AAAkBnD;AAAlB,AAAA,AAAAoD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApC,AAAA,AAAAoC,AAAA,AAAA,AAAA,AAAA,AAAAnC,AAAAC,AAAAkC,AAAAA;AAAA,AAAAjC,AAAAiC,AAAA,AAAaxB;AAAb,AACE,AAAI,AAACyB,AAAO,AAAA,AAAazB;AAAzB,AAAA,AACOA;;AACL,AAAM0B,AAAa,AAACC,AAAI,AAACC,AAAQ,AAAA,AAAA,AAAC5B,AAAAA,AAAAA;AAAlC,AAAA,AAAA,AAAA,AAAA,AACoBA,AACA,AAAA,AAACQ,AAAckB,AACf,AAAA,AAAClB,AAAgB,AAAA,AAAA,AAAI,AAAChD,AAAkB,AAAA,AAAA,AAACwC,AAAAA,AAAAA,AAAW0B,AACpD,AAAA,AAACjB,AAAmBoB,AACpB,AAAA,AAACpB,AAAmBC,AAAK,AAAA,AAAA,AAACV,AAAAA,AAAAA,AAC7B0B,AAAa,AAAA,AAAQ1B,AAAI,AAAA,AAAcA;;;AAE7D,AAAA,AAACH,AAEA,AAAAiC,AAAkB1D;AAAlB,AAAA,AAAA2D,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA2C,AAAA,AAAA,AAAA,AAAA,AAAA1C,AAAAC,AAAAyC,AAAAA;AAAA,AAAAxC,AAAAwC,AAAA,AAAa/B;AAAb,AACE,AAAI,AAACyB,AAAO,AAAA,AAAazB;AAAzB,AAAA,AACOA;;AACL,AAAMgC,AAAW,AAACC,AAAK,AAAA,AAAajC;AAC9BkC,AAAS,AAAA,AAASlC;AAClBmC,AAAS,AAACN,AAAI,AAAA,AAAa7B;AAFjC,AAAA,AAAA,AAAA,AAAA,AAGoBA,AACA,AAAA,AAACQ,AAAcwB,AACf,AAAA,AAACxB,AAAgB,AAAA,AAAA,AAAI,AAAChD,AAAkB,AAAA,AAAA,AAACwC,AAAAA,AAAAA,AAAWgC,AACpD,AAAA,AAACxB,AAAkB2B,AACnB,AAAA,AAAC3B,AAAkB0B,AACtBF,AAAW,AAAA,AAAQhC,AAAI,AAAA,AAAcA;;;AAG3D,AAAA,AAACoC,AAEA,AAAKpC,AAAG5B;AAAR,AACE,AAAA,AAAS4B;;AAEZ,AAAA,AAACoC,AAEA,AAAKpC,AAAG5B;AAAR,AACE,AAAA,AAAwB4B;;AAE3B,AAAA,AAACoC,AAEA,AAAKpC,AAAG5B;AAAR,AACE,AAAA,AAAiB4B;;AAEpB,AAAA,AAACoC,AAEA,AAAKpC,AAAG5B;AAAR,AACE,AAAA,AAAW4B;;AAEd,AAAA,AAACoC,AAEA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlD,AAAA,AAAAkD,AAAA,AAAA,AAAA,AAAA,AAAAjD,AAAAC,AAAAgD,AAAAA;AAAA,AAAA/C,AAAA+C,AAAA,AAAarB;AAAb,AACE,AAAI,AAAA,AAACX,AAAEW;AAAP;;AAAA;;;AAIH,AAAA,AAACmB,AAEA,AAAAG;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApD,AAAA,AAAAoD,AAAA,AAAA,AAAA,AAAA,AAAAnD,AAAAC,AAAAkD,AAAAA;AAAA,AAAAjD,AAAAiD,AAAA,AAAa9E;AAAb,AACE,AAAC+E,AAAM/E;;AAGV,AAAA,AAAMgF;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGgB,AAASC;AAAT,AAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAmC,AAAA,AAAID,AAA4B,AAAA,AAAIA;AAHpG,AAAA,AAAA,AAAA,AAAA,AAAA,AAOI,AAAA,AAAAE,AAAM5B,AAAgB,AAAA,AAAA,AAAC6B;AAAvB,AACE,AAAI,AAAA,AAACxC,AAAEW;AACL,AAAA,AAAA,AAAA4B,AAAmC,AAAA,AAAA,AAACC;;AADtC;;;;AAIN,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAIiB,AAAA,AAAA,AAACC,AAAqB,AAAA,AAAAH,AAACvB,AAAK,AAAA,AAAA,AAACwB;AAJ9C,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAKM,AAAA,AAAA,AAACC;AALP,AAOiB,AAAA,AAAA,AAACE;AAPlB,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAUgB,AAAA,AAAA,AAACA;AAVjB,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAagB,AAAA,AAAA,AAACA;AAbjB,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAgBgB,AAAA,AAAA,AAACA;AAhBjB;;AAmBA,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAAJ,AAEI,AAAA,AAAA,AAACC;;AAGL,AAAA,AAAMI;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEIR,AACAO,AACAF;;AAIJ,AACA,AACA,AAAA,AAAA,AAACC;AAMD,AAAA,AAAuBG;AAAvB,AAEE,AAAA,AAACC,AAAYF,AACD,AAAA,AAAiBtD;;AAE/B,AAAA,AAAeyD;AAAf,AACE,AAACF;;;AAEH,AAAA,AAAAG,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAAA,AAACb","names":["exfn.app/det","r","p1","p2","p__38440","vec__38441","cljs.core.nth","exfn.app/calculate-w","v1","v2","exfn.app/is-point-outside?","point","points","closed-points","cljs.core.conj","cljs.core/first","cljs.core.map","cljs.core.partial","cljs.core.partition","cljs.core.reduce","cljs.core/+","re_frame.core.reg_event_db","_","exfn.app/clear-canvas","canvas","ctx","w","h","exfn.app/draw-guides","x","y","exfn.app/draw-selected-point","js/Math","exfn.app/draw-boundary","should-fill","cljs.core.dorun","p__38444","map__38445","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re-frame.core/reg-fx","p__38447","vec__38448","map__38451","js/document","re_frame.core.reg_event_fx","p__38453","map__38454","db","p__38456","p__38457","map__38458","vec__38459","xy","cljs.core._EQ_","updated-points","cljs.core.assoc","cljs.core.update","cljs.core/conj","p__38463","map__38464","p__38466","map__38467","p__38469","map__38470","current-action","toggle","p__38472","map__38473","should-fill?","cljs.core/not","p__38475","map__38476","cljs.core/empty?","last-dropped","cljs.core/vec","cljs.core/butlast","cljs.core/pop","p__38478","map__38479","new-points","cljs.core/peek","new-undo","new-redo","re_frame.core.reg_sub","p__38481","map__38482","p__38484","map__38485","cljs.core/count","exfn.app/point-canvas","e","re-frame.core/dispatch-sync","cljs.core/deref","re_frame.core.subscribe","exfn.app/buttons","re-frame.core/dispatch","exfn.app/location","exfn.app/app","exfn.app/start","reagent.dom.render","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize"],"sourcesContent":["(ns exfn.app\n  (:require [reagent.dom :as dom]\n            [re-frame.core :as rf]\n            [goog.string.format]))\n\n;; -- Helpers ------------------------------------------------------------------------------------\n(defn det [r p1 p2]\n  (- (* (- (:x p1) (:x r))\n        (- (:y p2) (:y r)))\n     (* (- (:x p2) (:x r))\n        (- (:y p1) (:y r)))))\n\n(defn calculate-w [r [v1 v2]]\n  (if (<= (:y v1) (:y r))\n    (if (and (> (:y v2) (:y r)) (pos? (det r v1 v2)))\n      1 0)\n    (if (and (<= (:y v2) (:y r)) (neg? (det r v1 v2)))\n      -1 0)))\n\n(defn is-point-outside? [point points]\n  (let [closed-points (conj points (first points))]\n    (->> (map (partial calculate-w point) (partition 2 1 closed-points))\n         (reduce +)\n         (zero?))))\n\n;;-- Events and Effects --------------------------------------------------------------------------\n(rf/reg-event-db\n :initialize\n (fn [_ _]\n   {:points []\n    :current-action :drawing-boundary\n    :point {}\n    :should-fill false\n    :location \"Requires Calculation\"\n    :undo-stack []\n    :redo-stack []}))\n\n(defn clear-canvas [canvas ctx]\n  (let [w (.-width canvas)\n        h (.-height canvas)]\n    (.beginPath ctx)\n    (set! (.-fillStyle ctx) \"white\")\n    (.rect ctx 0 0  w h)\n    (.fill ctx)))\n\n(defn draw-guides [ctx points x y]\n  (.beginPath ctx)\n  (.lineTo ctx 0 y)\n  (.lineTo ctx 500 y)\n  (set! (.-lineWidth ctx) 1.0)\n  (set! (.-strokeStyle ctx) \"green\")\n  (.stroke ctx))\n\n(defn draw-selected-point [ctx x y]\n  (when (and (not (nil? x)) (not (nil? y)))\n    (.beginPath ctx)\n    (set! (.-strokeStyle ctx) \"black\")\n    (set! (.-fillStyle ctx) \"blue\")\n    (.arc ctx x y 4 0 (* 2 (.-PI js/Math)) 0)\n    (.stroke ctx)\n    (.fill ctx)))\n\n(defn draw-boundary [ctx points should-fill]\n  (set! (.-lineWidth ctx) 2.0)\n  (set! (.-strokeStyle ctx) \"black\")\n  (.beginPath ctx)\n  (dorun (map (fn [{:keys [x y]}]\n                (.arc ctx x y 1 0 (* 2 (.-PI js/Math)) 1)\n                (.lineTo ctx x y)) points))\n  (.stroke ctx)\n  (when should-fill\n    (set! (.-fillStyle ctx) \"yellow\")\n    (.fill ctx)))\n\n(rf/reg-fx\n :draw-canvas\n (fn [[points {:keys [x y]} should-fill]]\n   (let [canvas (.getElementById js/document \"point-canvas\")\n         ctx (.getContext canvas \"2d\")]\n     (.scale ctx 1 1)\n     (clear-canvas canvas ctx)\n     (draw-boundary ctx points should-fill)\n     (draw-selected-point ctx x y)\n     #_(draw-guides ctx points x y))))\n\n(rf/reg-event-fx\n :update-canvas\n (fn [{:keys [db]} _]\n   {:db db\n    :draw-canvas [(:points db) (:point db) (:should-fill db)]}))\n\n(rf/reg-event-fx\n :point-click\n (fn [{:keys [db]} [_ xy]]\n   (cond\n     ; if user is drawing boundary...\n     (= :drawing-boundary (db :current-action))\n     (let [updated-points (conj (db :points) xy)]\n       {:db          (-> db\n                         (assoc :points updated-points)\n                         (assoc :location (if (is-point-outside? (db :point) updated-points) \"Outside\" \"Inside\"))\n                         (assoc :redo-stack [])\n                         (update :undo-stack conj (db :points)))\n        :draw-canvas [updated-points (:point db) (db :should-fill)]})\n\n     ; if user is selecting a point.\n     (= :selecting-point (db :current-action))\n     {:db          (-> db\n                       (assoc :point xy)\n                       (assoc :location (if (is-point-outside? xy (db :points)) \"Outside\" \"Inside\")))\n      :draw-canvas [(:points db) xy (db :should-fill)]})))\n\n(rf/reg-event-fx\n :reset-boundary\n (fn [{:keys [db]} _]\n   {:draw-canvas [[] (:point db) (:should-fill db)]\n    :db          (-> db\n                     (assoc :points [])\n                     (assoc :location \"Outside\")\n                     (update :undo-stack conj (db :points))\n                     (assoc :current-action :drawing-boundary))}))\n\n(rf/reg-event-db\n :calculate\n (fn [{:keys [points point] :as db} _]\n   (if (is-point-outside? point points)\n     (assoc db :location \"Outside\")\n     (assoc db :location \"Inside\"))))\n\n(rf/reg-event-db\n :toggle\n (fn [{:keys [current-action] :as db} _]\n   (let [toggle {:drawing-boundary :selecting-point :selecting-point :drawing-boundary}]\n     (assoc db :current-action (toggle current-action)))))\n\n(rf/reg-event-fx\n :toggle-fill\n (fn [{:keys [db]} _]\n   (let [should-fill? (not (:should-fill db))]\n     {:db (assoc db :should-fill should-fill?)\n      :draw-canvas [(:points db) (:point db) should-fill?]})))\n\n;; on undo, we need to make points equal to result of popping undo-stack\n;; make undo-stack equal to popping undo-stack\n;; push points tp redo-stack\n(rf/reg-event-fx\n :undo\n (fn [{:keys [db]} _]\n   (if (empty? (:undo-stack db))\n     {:db db}\n     (let [last-dropped (vec (butlast (db :points)))]\n       {:db          (-> db\n                         (assoc :points last-dropped)\n                         (assoc :location (if (is-point-outside? (db :point) last-dropped) \"Outside\" \"Inside\"))\n                         (update :undo-stack pop)\n                         (update :redo-stack conj (db :points)))\n        :draw-canvas [last-dropped (:point db) (:should-fill db)]}))))\n\n(rf/reg-event-fx\n :redo\n (fn [{:keys [db]} _]\n   (if (empty? (:redo-stack db))\n     {:db db}\n     (let [new-points (peek (:redo-stack db))\n           new-undo (:points db)\n           new-redo (pop (:redo-stack db))]\n       {:db          (-> db\n                         (assoc :points new-points)\n                         (assoc :location (if (is-point-outside? (db :point) new-points) \"Outside\" \"Inside\"))\n                         (assoc :redo-stack new-redo)\n                         (assoc :undo-stack new-undo))\n        :draw-canvas [new-points (:point db) (:should-fill db)]}))))\n\n;; -- Subscriptions ------------------------------------------------------------------\n(rf/reg-sub\n :points\n (fn [db _]\n   (:points db)))\n\n(rf/reg-sub\n :boundary-button-label\n (fn [db _]\n   (:boundary-button-label db)))\n\n(rf/reg-sub\n :current-action\n (fn [db _]\n   (:current-action db)))\n\n(rf/reg-sub\n :location\n (fn [db _]\n   (:location db)))\n\n(rf/reg-sub\n :toggle-label\n (fn [{:keys [current-action]}]\n   (if (= current-action :drawing-boundary)\n     \"Select Point\"\n     \"Draw Boundary\")))\n\n(rf/reg-sub\n :point-count\n (fn [{:keys [points]}]\n   (count points)))\n\n;; -- Reagent Forms ------------------------------------------------------------------\n(defn point-canvas []\n  [:div.content\n   [:canvas#point-canvas.canvas\n    {:on-click  (fn [^js e] (rf/dispatch-sync [:point-click {:x (.. e -nativeEvent -offsetX) :y (.. e -nativeEvent -offsetY)}]))\n     :width 500\n     :height 500}]\n   [:div.current-action\n    (let [current-action @(rf/subscribe [:current-action])]\n      (if (= current-action :drawing-boundary)\n        (str \"Drawing boundary. Points: \" @(rf/subscribe [:point-count]))\n        \"Selecting Point\"))]])\n\n(defn buttons []\n  [:div.content\n   [:div\n    [:button.btn.btn-primary\n     {:on-click #(rf/dispatch [:toggle (not @(rf/subscribe [:current-action]))])}\n     @(rf/subscribe [:toggle-label])]\n    [:button.btn.btn-danger\n     {:on-click #(rf/dispatch [:reset-boundary])}\n     \"Reset boundary\"]]\n   [:button.btn.btn-primary\n    {:on-click #(rf/dispatch [:toggle-fill])}\n    \"Toggle fill\"]\n   [:button.btn.btn-primary\n    {:on-click #(rf/dispatch [:undo])}\n    \"Undo\"]\n   [:button.btn.btn-primary\n    {:on-click #(rf/dispatch [:redo])}\n    \"Redo\"]])\n\n(defn location []\n  [:div.content.result\n   @(rf/subscribe [:location])])\n\n;; -- App -------------------------------------------------------------------------\n(defn app []\n  [:div.container\n   [point-canvas]\n   [location]\n   [buttons]\n   [:p \"When calculating the point the algorithm will automatically close the polygon (i.e. make the last point = the first point), which is why it may\n        make it look like its inside while you are drawing.\"]])\n\n(comment (rf/dispatch-sync [:initialize]))\n(comment (rf/dispatch-sync [:reset-boundary]))\n(rf/dispatch [:update-canvas])\n;only here for debugging / dev / testing.\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (start))\n\n(defonce initialize (rf/dispatch-sync [:initialize]))       ; dispatch the event which will create the initial state. \n\n"]}