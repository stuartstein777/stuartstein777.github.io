{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/code-editor","cljs.core/deref","p1__34932#","source","re_frame.core.subscribe","exfn.helpers/get-source-line-numbers","re-frame.core/dispatch-sync","e","scroll-pos","re-frame.core/dispatch","exfn.app/code","code","breakpoints","code-with-lines","cljs.core/zipmap","cljs.core.range","cljs.core/count","eip","on-breakpoint?","iter__4529__auto__","s__34934","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__34936","cljs.core/chunk-buffer","i__34935","vec__34937","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34933","cljs.core/chunk-rest","vec__34944","cljs.core/first","cljs.core/cons","cljs.core/rest","line-no","code-line","cljs.core._EQ_","arguments","s__34941","b__34943","i__34942","iter__34940","s__34948","b__34950","i__34949","iter__34947","i","cljs.core/Keyword","cljs.core/val","cljs.core/key","exfn.app/execution-controls","p1__34951#","is-running?","finished?","has-parsed-code?","running-speed","on-breakpoint","and__4115__auto__","or__4126__auto__","cljs.core/not","exfn.app/eip","exfn.app/registers","registers","last-edit-register","cljs.core.not_EQ_","s__34953","b__34955","i__34954","vec__34956","vec__34959","iter__34952","vec__34962","vec__34965","k","name","v","cljs.core/keyword-identical?","exfn.app/cmp-values","cmp","cljs.core.prn","exfn.app/internal-registers","internal-registers","s__34969","b__34971","i__34970","vec__34972","iter__34968","vec__34975","reg","exfn.app/stack","stack","title","s__34979","b__34981","i__34980","iter__34978","r","cljs.core/reverse","exfn.app/symbol-table","symbols","s__34983","b__34985","i__34984","iter__34982","s","exfn.app/supported-instructions","s__34987","b__34989","i__34988","map__34990","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","iter__34986","map__34992","instruction","example","description","exfn.helpers/get-supported-instructions","exfn.app/app","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\n  (:require\n   [reagent.dom :as dom]\n   [exfn.subs]\n   [exfn.events]\n   [exfn.helpers :as h]\n   [re-frame.core :as rf]))\n\n;; DEV NOTES\n;; npx shadow-cljs watch app\n;; then open web page in browser\n;; then connect to repl.\n\n;; -- Reagent Components ------------------------------------------------------------\n\n;; Source Code Editor.\n(defn code-editor []\n  (let [source @(rf/subscribe [:source])]\n    [:div\n     [:div.editor\n      [:div.source-editor-header \"Source Editor\"]\n      [:textarea#lineNos.text-editor-line-nos {:readOnly  true\n                                               :value     (h/get-source-line-numbers source)}]\n      [:textarea#editor.text-editor {:on-change #(rf/dispatch-sync [:update-source (-> % .-target .-value)])\n                                     :on-scroll (fn [^js e]\n                                                  (let [scroll-pos (.. e -target -scrollTop)]\n                                                    (rf/dispatch [:update-scroll scroll-pos])))\n                                     :value     @(rf/subscribe [:source])\n                                     :wrap      :off}]]]))\n\n;; Display the parsed code.\n(defn code []\n  (let [code            @(rf/subscribe [:code])\n        breakpoints     @(rf/subscribe [:breakpoints])\n        code-with-lines (zipmap (range (count code)) code)\n        eip             @(rf/subscribe [:eip])\n        on-breakpoint?  @(rf/subscribe [:on-breakpoint])]\n    [:div {:style {:margin 10\n                   :height 455\n                   :overflow-y :none\n                   :width  1000}}\n     [:div.parsed-code-header \"Parsed Code\"]\n     [:div#code-container.code-container\n      [:table#code.code\n       [:tbody\n        (for [[line-no code-line] code-with-lines]\n          [:tr.code-line {:key   line-no\n                          :style {:background-color (if (= eip line-no) \"goldenrod\" \"white\")}}\n           [:td.breakpoint\n            [:i.fas.fa-circle {:style    {:color (if (some? (breakpoints line-no)) \"red\" \"lightgray\")}\n                               :on-click #(rf/dispatch [:toggle-breakpoint line-no])}]]\n           [:td.code-eip\n            [:i.fas.fa-angle-double-right\n             {:style {:visibility (if (= eip line-no) :visible :hidden)}}]]\n           [:td.line-number [:div {:style {:height 25}}\n                             line-no]]\n           [:td\n            [:span\n             [:label.instruction (first code-line)]\n             (let [arguments (rest code-line)]\n               (for [i (zipmap (range (count arguments)) arguments)]\n                 (if (keyword? (val i))\n                   [:label.register {:key (key i)} (val i)]\n                   [:label.value {:key (key i)} (val i)])))]]])]]]\n     [:div.breakpoint-indicator\n      {:style {:visibility (if on-breakpoint? :visible :hidden)}}\n      [:label (str \"Breakpoint hit: Line \" eip)]]]))\n\n;; Buttons that control the executing code (start/stop/pause/speed)\n(defn execution-controls []\n  [:div.row\n   (let [is-running? @(rf/subscribe [:running?])\n         finished? @(rf/subscribe [:finished?])\n         has-parsed-code? @(rf/subscribe [:has-parsed-code?])\n         running-speed @(rf/subscribe [:running-speed])\n         on-breakpoint @(rf/subscribe [:on-breakpoint])\n         eip @(rf/subscribe [:eip])]\n     [:div.execution-controls\n      [:button.btn.btn-success.play-pause\n       {:on-click #(rf/dispatch [:toggle-running])\n        :disabled (and (or finished? (not has-parsed-code?)) (not on-breakpoint))}\n       (if is-running? [:i.fas.fa-pause] [:i.fas.fa-play])]\n      [:button.btn.btn-success.next-instruction\n       {:on-click #(rf/dispatch [:next-instruction])\n        :disabled (and (or finished? (not has-parsed-code?) is-running? ) (not on-breakpoint))}\n       [:i.fas.fa-forward]]\n      [:button.btn.btn-danger.stop-button\n       {:on-click #(rf/dispatch [:reset])}\n       [:i.fas.fa-stop]]\n      [:input.instr-per-sec {:on-change   #(rf/dispatch-sync [:update-running-speed (-> % .-target .-value)])\n                             :placeholder \"1000\"\n                             :type        \"text\"\n                             :value running-speed}]\n      [:label.speed-label \"speed (msecs / instruction.)\"]\n      [:label.breakpoint-label\n       {:style {:visibility (if on-breakpoint :visible :hidden)}}\n       (str \"on-breakpoint: \" eip)]])])\n\n;; Display the current eip when running.\n(defn eip []\n  (let [eip @(rf/subscribe [:eip])]\n    [:div\n     [:label.eip-header \"EIP\"]\n     [:label.eip eip]]))\n\n;; Display the user registers.\n(defn registers []\n  (let [registers @(rf/subscribe [:registers])\n        last-edit-register @(rf/subscribe [:last-edit-register])]\n    [:div.registers-container\n     [:div.registers-header \"Registers\"]\n     [:div.registers-list\n      (when (not= registers {})\n        (for [[k [name v]] (zipmap (range (count registers)) registers)]\n          [:div.row {:key k}\n           [:div.col-col-lg6.register-name {:key (str k \"reg:name\")} name]\n           (if (keyword-identical? name last-edit-register)\n             [:div.col-col-lg6.register-value {:id (str \"reg\" name) :key (str k \"reg:value\")\n                                               :style {:background-color :yellow}}\n              v]\n             [:div.col-col-lg6.register-value {:id (str \"reg\" name) :key (str k \"reg:value\")} v])]))]]))\n\n(defn cmp-values [cmp]\n  (prn \"cmp: \" cmp)\n  (cond (keyword-identical? cmp :lt) \"<\"\n        (keyword-identical? cmp :gt) \">\"\n        (keyword-identical? cmp :eq) \"=\"\n        :else cmp))\n\n;; Display the internal registers.\n(defn internal-registers []\n  (let [internal-registers @(rf/subscribe [:internal-registers])]\n    [:div.registers-container\n     [:div.registers-header \"Internal Registers\"]\n     [:div.registers-list\n      (when (not= internal-registers {})\n        (for [[reg v] internal-registers]\n          [:div.row\n           [:div.col-col-lg6.register-name reg]\n           [:div.col-col-lg6.register-value\n            (cmp-values v)]]))]]))\n\n;; Display the stack.\n(defn stack [stack title]\n  (let [stack @(rf/subscribe [stack])]\n    [:div.stack-container\n     [:div.stack-header title]\n     [:div.stack-list\n      (when (not= stack {})\n        (for [r (reverse stack)]\n          [:div.row\n           [:div.col-col-lg6.stack-value r]]))]]))\n\n;; Display the symbol table.\n(defn symbol-table []\n  (let [symbols @(rf/subscribe [:symbols])]\n    [:div.symbol-table-container\n     [:div.symbol-table-header \"Symbol Table\"]\n     [:div.symbol-table\n      (when (not= {} symbols)\n        (for [s symbols]\n          [:div.row\n           [:div.col-col-lg6.symbol-name (key s)]\n           [:div.col-col-lg6.symbol-value (val s)]]))]]))\n\n(defn supported-instructions []\n  [:div\n   [:h2 \"Supported Instructions\"]\n   [:table.table.table-striped.table-hover {:style {:margin 10 :border \"1px solid black\"}}\n    [:thead.table {:style {:background-color \"rgb(18, 18, 19)\" :color :white}}\n     [:td {:style {:text-align :left :padding 10}} \"Instruction\"]\n     [:td {:style {:text-align :left :padding 10}} \"Example\"]\n     [:td {:style {:text-align :left :padding 10}} \"Description\"]]\n    [:tbody\n     (for [{:keys [instruction example description]} (h/get-supported-instructions)]\n       [:tr {:style {:border \"1px solid black\"}}\n        [:td {:style {:width 150 :text-align :left :border-right \"1px solid black\"}}instruction]\n        [:td {:style {:width 200 :text-align :left :border-right \"1px solid black\"}}\n         example]\n        [:td {:style {:width 500 :text-align :left}} description]])]]])\n\n;; -- App ---------------------------------------------------------------------------\n(defn app []\n  [:div.content\n   [:div.row\n    [:div.col.col-lg-4\n     [code-editor]]\n    [:div.col.col-lg-4\n     [code]]\n    [:div.col.col-lg-4]]\n   [:div.row\n    [:button.btn.btn-primary.parse-btn {:on-click #(rf/dispatch [:parse])} \"Parse\"]\n    [:button.btn.btn-danger.parse-btn {:on-click #(rf/dispatch [:clear-parsed])} \"Clear Parsed\"]\n    [:button.btn.btn-danger.parse-btn {:on-click #(rf/dispatch [:clear-breakpoints]) :style {:width 200}} \"Clear Breakpoints\"]]\n   [execution-controls]\n   [:div.row.eip-container\n    [eip]]\n   [:div.grid\n    [:div\n     [registers]]\n    [:div\n     [internal-registers]]\n    [:div\n     [stack :stack \"Stack\"]]\n    [:div\n     [stack :eip-stack \"EIP Stack\"]]\n    [:div\n     [symbol-table]]]\n   [:div\n    [supported-instructions]]])\n\n;; -- Dev Helpers -------------------------------------------------------------------\n(comment (rf/dispatch-sync [:initialize]))\n(comment (rf/dispatch-sync [:test-code]))\n(comment (rf/dispatch-sync [:parse]))\n(comment (rf/dispatch-sync [:toggle-breakpoint 11]))\n(comment (rf/dispatch-sync [:reset-eip]))\n\n(comment \n  (let [registers [[:a 1] [:b 2] [:c 3] [:d 4] [:e 5] [:f 6]]]\n    ((doseq [r registers]\n       (rf/dispatch-sync [:add-value-to-registers r])))))\n\n(comment (rf/dispatch [:add-value-to-stack 4]))\n\n;; -- After-Load --------------------------------------------------------------------\n;; Do this after the page has loaded.\n;; Initialize the initial db state.\n(defn ^:dev/after-load start\n  []\n  (dom/render [app]\n              (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (start))\n\n(defonce initialize (rf/dispatch-sync [:initialize]))       ; dispatch the event which will create the initial state. "]}