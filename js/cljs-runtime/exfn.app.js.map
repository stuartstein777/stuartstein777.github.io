{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/code-editor","cljs.core/deref","p1__35099#","source","re_frame.core.subscribe","re-frame.core/dispatch","exfn.helpers/get-source-line-numbers","re-frame.core/dispatch-sync","e","scroll-pos","exfn.app/code","code","breakpoints","code-with-lines","cljs.core/zipmap","cljs.core.range","cljs.core/count","eip","on-breakpoint?","iter__4529__auto__","s__35101","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__35103","cljs.core/chunk-buffer","i__35102","vec__35104","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35100","cljs.core/chunk-rest","vec__35111","cljs.core/first","cljs.core/cons","cljs.core/rest","line-no","code-line","cljs.core._EQ_","arguments","s__35108","b__35110","i__35109","iter__35107","s__35115","b__35117","i__35116","iter__35114","i","cljs.core/Keyword","cljs.core/val","cljs.core/key","exfn.app/execution-controls","p1__35118#","is-running?","finished?","has-parsed-code?","running-speed","on-breakpoint","and__4115__auto__","or__4126__auto__","cljs.core/not","exfn.app/eip","exfn.app/registers","registers","last-edit-register","cljs.core.not_EQ_","s__35120","b__35122","i__35121","vec__35123","vec__35126","iter__35119","vec__35129","vec__35132","k","name","v","cljs.core/keyword-identical?","exfn.app/cmp-values","cmp","cljs.core.prn","exfn.app/internal-registers","internal-registers","eip-stack","rep-counters","s__35136","b__35138","i__35137","vec__35139","iter__35135","vec__35142","reg","s__35146","b__35148","i__35147","iter__35145","r","cljs.core/reverse","s__35150","b__35152","i__35151","iter__35149","exfn.app/stack","stack","title","s__35154","b__35156","i__35155","iter__35153","exfn.app/symbol-table","symbols","s__35158","b__35160","i__35159","iter__35157","s","exfn.app/supported-instructions","s__35162","b__35164","i__35163","map__35165","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","iter__35161","map__35167","instruction","example","description","exfn.helpers/get-supported-instructions","exfn.app/output","output","exfn.app/app","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\r\n  (:require\r\n   [reagent.dom :as dom]\r\n   [exfn.subs]\r\n   [exfn.events]\r\n   [exfn.helpers :as h]\r\n   [re-frame.core :as rf]))\r\n\r\n;; DEV NOTES\r\n;; npx shadow-cljs watch app\r\n;; then open web page in browser\r\n;; then connect to repl.\r\n\r\n;; -- Reagent Components ------------------------------------------------------------\r\n\r\n;; Source Code Editor.\r\n(defn code-editor []\r\n  (let [source @(rf/subscribe [:source])]\r\n    [:div\r\n     [:div.editor\r\n      [:div.source-editor-header.header \"Source Editor\"\r\n       [:button.btn.btn-danger.btn.py-0 {:on-click #(rf/dispatch [:clear-source])\r\n                                         :style    {:font-size    \"0.8em\"\r\n                                                    :float        :right\r\n                                                    :margin-top   2\r\n                                                    :margin-right 2}}\r\n        \"clear\"]]\r\n      [:textarea#lineNos.text-editor-line-nos {:readOnly  true\r\n                                               :value     (h/get-source-line-numbers source)}]\r\n      [:textarea#editor.text-editor {:on-change #(rf/dispatch-sync [:update-source (-> % .-target .-value)])\r\n                                     :on-scroll (fn [^js e]\r\n                                                  (let [scroll-pos (.. e -target -scrollTop)]\r\n                                                    (rf/dispatch [:update-scroll scroll-pos])))\r\n                                     :value     @(rf/subscribe [:source])\r\n                                     :wrap      :off}]]]))\r\n\r\n;; Display the parsed code.\r\n(defn code []\r\n  (let [code            @(rf/subscribe [:code])\r\n        breakpoints     @(rf/subscribe [:breakpoints])\r\n        code-with-lines (zipmap (range (count code)) code)\r\n        eip             @(rf/subscribe [:eip])\r\n        on-breakpoint?  @(rf/subscribe [:on-breakpoint])]\r\n    [:div {:style {:margin 10\r\n                   :height 455\r\n                   :overflow-y :none\r\n                   :width  1000}}\r\n     [:div.parsed-code-header.header\r\n      [:div\r\n       [:div {:style {:text-align   :left\r\n                      :padding-left 5}}\r\n        [:i.fas.fa-trash-alt {:style    {:color  :red\r\n                                         :cursor :pointer}\r\n                              :on-click #(rf/dispatch [:clear-breakpoints])}]\r\n        [:label {:style {:margin-left 10}} \"Parsed Code\"]\r\n        [:button.btn.btn-danger.btn.py-0 {:on-click #(rf/dispatch [:clear-parsed])\r\n                                          :style    {:font-size    \"0.8em\"\r\n                                                     :float        :right\r\n                                                     :margin-top   2\r\n                                                     :margin-right 2}}\r\n         \"clear\"]]]]\r\n     [:div#code-container.code-container\r\n      [:table#code.code\r\n       [:tbody\r\n        (for [[line-no code-line] code-with-lines]\r\n          [:tr.code-line {:key   line-no\r\n                          :style {:background-color (if (= eip line-no) \"goldenrod\" \"white\")}}\r\n           [:td.breakpoint\r\n            [:i.fas.fa-circle {:style    {:color (if (some? (breakpoints line-no)) \"red\" \"lightgray\")}\r\n                               :on-click #(rf/dispatch [:toggle-breakpoint line-no])}]]\r\n           [:td.code-eip\r\n            [:i.fas.fa-angle-double-right\r\n             {:style {:visibility (if (= eip line-no) :visible :hidden)}}]]\r\n           [:td.line-number [:div {:style {:height 25}}\r\n                             line-no]]\r\n           [:td\r\n            [:span\r\n             [:label.instruction (first code-line)]\r\n             (let [arguments (rest code-line)]\r\n               (for [i (zipmap (range (count arguments)) arguments)]\r\n                 (if (keyword? (val i))\r\n                   [:label.register {:key (key i)} (val i)]\r\n                   [:label.value {:key (key i)} (val i)])))]]])]]]\r\n     [:div.breakpoint-indicator\r\n      {:style {:visibility (if on-breakpoint? :visible :hidden)}}\r\n      [:label (str \"Breakpoint hit: Line \" eip)]]]))\r\n\r\n;; Buttons that control the executing code (start/stop/pause/speed)\r\n(defn execution-controls []\r\n  [:div.row\r\n   (let [is-running? @(rf/subscribe [:running?])\r\n         finished? @(rf/subscribe [:finished?])\r\n         has-parsed-code? @(rf/subscribe [:has-parsed-code?])\r\n         running-speed @(rf/subscribe [:running-speed])\r\n         on-breakpoint @(rf/subscribe [:on-breakpoint])\r\n         eip @(rf/subscribe [:eip])]\r\n     [:div.execution-controls\r\n      [:button.btn.btn-primary.parse-btn {:on-click #(rf/dispatch [:parse])} \"Parse\"]\r\n      [:button.btn.btn-success.play-pause\r\n       {:on-click #(rf/dispatch [:toggle-running])\r\n        :disabled (and (or finished? (not has-parsed-code?)) (not on-breakpoint))}\r\n       (if is-running? [:i.fas.fa-pause] [:i.fas.fa-play])]\r\n      [:button.btn.btn-success.next-instruction\r\n       {:on-click #(rf/dispatch [:next-instruction])\r\n        :disabled (and (or finished? (not has-parsed-code?) is-running? ) (not on-breakpoint))}\r\n       [:i.fas.fa-forward]]\r\n      [:button.btn.btn-danger.stop-button\r\n       {:on-click #(rf/dispatch [:reset])}\r\n       [:i.fas.fa-stop]]\r\n      [:input.instr-per-sec {:on-change   #(rf/dispatch-sync [:update-running-speed (-> % .-target .-value)])\r\n                             :placeholder \"1000\"\r\n                             :type        \"text\"\r\n                             :value running-speed}]\r\n      [:label.speed-label \"speed (msecs / instruction.)\"]\r\n      [:label.breakpoint-label\r\n       {:style {:visibility (if on-breakpoint :visible :hidden)}}\r\n       (str \"on-breakpoint: \" eip)]])])\r\n\r\n;; Display the current eip when running.\r\n(defn eip []\r\n  (let [eip @(rf/subscribe [:eip])]\r\n    [:div\r\n     [:label.eip-header.header \"EIP\"]\r\n     [:label.eip eip]]))\r\n\r\n;; Display the user registers.\r\n(defn registers []\r\n  (let [registers @(rf/subscribe [:registers])\r\n        last-edit-register @(rf/subscribe [:last-edit-register])]\r\n    [:div.registers-container\r\n     [:div.registers-header.header \"Registers\"]\r\n     [:div.registers-list\r\n      (when (not= registers {})\r\n        (for [[k [name v]] (zipmap (range (count registers)) registers)]\r\n          [:div.row {:key k}\r\n           [:div.col-col-lg6.register-name {:key (str k \"reg:name\")} name]\r\n           (if (keyword-identical? name last-edit-register)\r\n             [:div.col-col-lg6.register-value {:id (str \"reg\" name) :key (str k \"reg:value\")\r\n                                               :style {:background-color :yellow}}\r\n              v]\r\n             [:div.col-col-lg6.register-value {:id (str \"reg\" name) :key (str k \"reg:value\")} v])]))]]))\r\n\r\n(defn cmp-values [cmp]\r\n  (prn \"cmp: \" cmp)\r\n  (cond (keyword-identical? cmp :lt) \"<\"\r\n        (keyword-identical? cmp :gt) \">\"\r\n        (keyword-identical? cmp :eq) \"=\"\r\n        :else cmp))\r\n\r\n;; Display the internal registers.\r\n(defn internal-registers []\r\n  (let [internal-registers @(rf/subscribe [:internal-registers])\r\n        eip-stack @(rf/subscribe [:eip-stack])\r\n        rep-counters @(rf/subscribe [:rep-counters-stack])]\r\n    [:div.registers-container\r\n     [:div.registers-header.header \"Internal Registers\"]\r\n     [:div.registers-list\r\n      (when (not= internal-registers {})\r\n        (for [[reg v] internal-registers]\r\n          [:div.row\r\n           [:div.col-col-lg6.register-name reg]\r\n           [:div.col-col-lg6.register-value\r\n            (cmp-values v)]]))\r\n      [:div\r\n       [:div {:style {:float :left :width 103 :text-align :center}}\r\n        [:div.header \"EIP Stack\"]\r\n        [:div\r\n         (for [r (reverse eip-stack)]\r\n           [:div.eip-stack-value r])]]\r\n       [:div {:style {:float :right :width 103 :text-align :center}}\r\n        [:div.header \"RP Stack\"]\r\n        [:div\r\n         (for [r (reverse rep-counters)]\r\n           [:div.eip-stack-value r])]]]]]))\r\n\r\n;; Display the stack.\r\n(defn stack [stack title]\r\n  (let [stack @(rf/subscribe [stack])]\r\n    [:div.stack-container\r\n     [:div.stack-header.header title]\r\n     [:div.stack-list\r\n      (when (not= stack {})\r\n        (for [r (reverse stack)]\r\n          [:div.row\r\n           [:div.col-col-lg6.stack-value r]]))]]))\r\n\r\n;; Display the symbol table.\r\n(defn symbol-table []\r\n  (let [symbols @(rf/subscribe [:symbols])]\r\n    [:div.symbol-table-container\r\n     [:div.symbol-table-header.header \"Symbol Table\"]\r\n     [:div.symbol-table\r\n      (when (not= {} symbols)\r\n        (for [s symbols]\r\n          [:div.row\r\n           [:div.col-col-lg6.symbol-name (key s)]\r\n           [:div.col-col-lg6.symbol-value (val s)]]))]]))\r\n\r\n(defn supported-instructions []\r\n  [:div\r\n   [:h2 \"Supported Instructions\"]\r\n   [:table.table.table-striped.table-hover {:style {:margin 10 :border \"1px solid black\"}}\r\n    [:thead.table {:style {:background-color \"rgb(18, 18, 19)\" :color :white}}\r\n     [:tr\r\n      [:th {:style {:text-align :left :padding 10}} \"Instruction\"]\r\n      [:th {:style {:text-align :left :padding 10}} \"Example\"]\r\n      [:th {:style {:text-align :left :padding 10}} \"Description\"]]]\r\n    [:tbody\r\n     (for [{:keys [instruction example description]} (h/get-supported-instructions)]\r\n       [:tr {:style {:border \"1px solid black\"}}\r\n        [:td {:style {:width 150 :text-align :left :border-right \"1px solid black\"}}instruction]\r\n        [:td {:style {:width 200 :text-align :left :border-right \"1px solid black\"}}\r\n         example]\r\n        [:td {:style {:width 500 :text-align :left}} description]])]]])\r\n\r\n(defn output []\r\n  (let [output @(rf/subscribe [:output])]\r\n    [:div.std-out-container\r\n     [:div.header {:style {:text-align :left}}\r\n      [:label {:style {:margin-left 5}}\"Output\"]\r\n      [:button.btn.btn-danger.btn.py-0\r\n       {:on-click #(rf/dispatch [:clear-output])\r\n        :style    {:font-size    \"0.8em\"\r\n                   :float        :right\r\n                   :margin-top   2\r\n                   :margin-right 2}}\r\n       \"clear\"]]\r\n     [:textarea.std-out {:value output\r\n                         :readOnly  true\r\n                         :wrap      :off}]]))\r\n\r\n;; -- App ---------------------------------------------------------------------------\r\n(defn app []\r\n  [:div.content\r\n   [:div.row\r\n    [:div.col.col-lg-4\r\n     [code-editor]]\r\n    [:div.col.col-lg-4\r\n     [code]]]\r\n   [:div.row\r\n    [execution-controls]]\r\n   [:div.row.eip-container\r\n    [eip]]\r\n   [:div.grid\r\n    [:div\r\n     [registers]]\r\n    [:div\r\n     [internal-registers]]\r\n    [:div\r\n     [stack :stack \"Stack\"]]\r\n    [:div\r\n     [symbol-table]]\r\n    [:div\r\n     [output]]]   \r\n   [:div\r\n    [supported-instructions]]])\r\n\r\n;; -- Dev Helpers -------------------------------------------------------------------\r\n(comment (rf/dispatch-sync [:initialize]))\r\n(comment (rf/dispatch-sync [:test-code]))\r\n(comment (rf/dispatch-sync [:parse]))\r\n(comment (rf/dispatch-sync [:toggle-breakpoint 11]))\r\n(comment (rf/dispatch-sync [:reset-eip]))\r\n\r\n(comment \r\n  (let [registers [[:a 1] [:b 2] [:c 3] [:d 4] [:e 5] [:f 6]]]\r\n    ((doseq [r registers]\r\n       (rf/dispatch-sync [:add-value-to-registers r])))))\r\n\r\n(comment (rf/dispatch [:add-value-to-stack 4]))\r\n\r\n;; -- After-Load --------------------------------------------------------------------\r\n;; Do this after the page has loaded.\r\n;; Initialize the initial db state.\r\n(defn ^:dev/after-load start\r\n  []\r\n  (dom/render [app]\r\n              (.getElementById js/document \"app\")))\r\n\r\n(defn ^:export init []\r\n  (start))\r\n\r\n(defonce initialize (rf/dispatch-sync [:initialize]))       ; dispatch the event which will create the initial state. "]}