{"version":3,"sources":["exfn/app.cljs"],"mappings":"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","names":["exfn.app/code-editor","cljs.core/deref","p1__47401#","source","re_frame.core.subscribe","exfn.helpers/get-source-line-numbers","re-frame.core/dispatch-sync","e","scroll-pos","re-frame.core/dispatch","exfn.app/code","code","breakpoints","code-with-lines","cljs.core/zipmap","cljs.core.range","cljs.core/count","eip","iter__4529__auto__","s__47403","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__47405","cljs.core/chunk-buffer","i__47404","vec__47406","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47402","cljs.core/chunk-rest","vec__47413","cljs.core/first","cljs.core/cons","cljs.core/rest","line-no","code-line","cljs.core._EQ_","arguments","s__47410","b__47412","i__47411","iter__47409","s__47417","b__47419","i__47418","iter__47416","i","cljs.core/Keyword","cljs.core/val","cljs.core/key","exfn.app/execution-controls","is-running?","exfn.app/eip","exfn.app/registers","registers","cljs.core.not_EQ_","s__47421","b__47423","i__47422","iter__47420","r","cljs.core/second","exfn.app/app","exfn.app/start","reagent.dom.render","js/document","exfn.app/init","js/exfn","js/exfn.app","js/exfn.app.initialize","exfn.app/initialize","cljs.core/chunk-first"],"sourcesContent":["(ns exfn.app\r\n  (:require\r\n   [reagent.dom :as dom]\r\n   [exfn.subs]\r\n   [exfn.events]\r\n   [exfn.helpers :as h]\r\n   [re-frame.core :as rf]))\r\n\r\n;; DEV NOTES\r\n;; npx shadow-cljs watch app\r\n;; then open web page in browser\r\n;; then connect to repl.\r\n\r\n;; -- Reagent Components ------------------------------------------------------------\r\n\r\n;; Source Code Editor.\r\n(defn code-editor []\r\n  (let [source @(rf/subscribe [:source])]\r\n    [:div\r\n     [:div.editor\r\n      [:div.source-editor-header \"Source Editor\"]\r\n      [:textarea#lineNos.text-editor-line-nos {:readOnly  true\r\n                                               :value     (h/get-source-line-numbers source)}]\r\n      [:textarea#editor.text-editor {:on-change #(rf/dispatch-sync [:update-source (-> % .-target .-value)])\r\n                                     :on-scroll (fn [^js e]\r\n                                                  (let [scroll-pos (.. e -target -scrollTop)]\r\n                                                    (rf/dispatch [:update-scroll scroll-pos])))\r\n                                     :value     @(rf/subscribe [:source])\r\n                                     :wrap      :off}]]]))\r\n\r\n;; Display the parsed code.\r\n(defn code []\r\n  [:div.code-container\r\n   [:div.parsed-code-header \"Parsed Code\"]\r\n   (let [code @(rf/subscribe [:code])\r\n         breakpoints @(rf/subscribe [:breakpoints])\r\n         code-with-lines (zipmap (range (count code)) code)\r\n         eip @(rf/subscribe [:eip])]\r\n     [:table.code\r\n      [:tbody\r\n       (for [[line-no code-line] code-with-lines]\r\n         [:tr.code-line {:key line-no\r\n                         :style {:background-color (if (= eip line-no) \"goldenrod\" \"white\")}}\r\n          [:td.breakpoint\r\n           [:i.fas.fa-circle {:style {:color (if (some? (breakpoints line-no)) \"red\" \"lightgray\")}\r\n                              :on-click #(rf/dispatch [:toggle-breakpoint line-no])}]]\r\n          [:td.code-eip\r\n           [:i.fas.fa-angle-double-right\r\n            {:style {:visibility (if (= eip line-no) :visible :hidden)}}]]\r\n          [:td.line-number [:div {:style {:height 25}}\r\n                            line-no]]\r\n          [:td\r\n           [:span\r\n            [:label.instruction (first code-line)]\r\n            (let [arguments (rest code-line)]\r\n              (for [i (zipmap (range (count arguments)) arguments)]\r\n                (if (keyword? (val i))\r\n                  [:label.register {:key (key i)} (val i)]\r\n                  [:label.value {:key (key i)} (val i)])))]]])]])])\r\n\r\n;; Buttons that control the executing code (start/stop/pause/speed)\r\n(defn execution-controls []\r\n  [:div.row\r\n   (let [is-running? @(rf/subscribe [:running?])]\r\n     [:div.execution-controls\r\n      [:button.btn.btn-success.play-pause\r\n       {:on-click #(rf/dispatch [:toggle-running])}\r\n       (if is-running? [:i.fas.fa-pause] [:i.fas.fa-play])]\r\n      [:button.btn.btn-success.next-instruction\r\n       [:i.fas.fa-forward]]\r\n      [:button.btn.btn-danger.stop-button\r\n       [:i.fas.fa-stop]]\r\n      [:input.instr-per-sec {:type \"text\"\r\n                             :placeholder \"1\"}]\r\n      [:label.speed-label \"speed (secs / instruction.)\"]])])\r\n\r\n;; Display the current eip when running.\r\n(defn eip []\r\n  (let [eip @(rf/subscribe [:eip])]\r\n    [:div\r\n     [:label.eip-header \"EIP\"]\r\n     [:label.eip eip]]))\r\n\r\n;; Display the user registers.\r\n(defn registers []\r\n  (let [registers @(rf/subscribe [:registers])]\r\n    [:div.registers\r\n     [:div.registers-header \"Registers\"]\r\n     [:div.registers.list\r\n      (when (not= registers {})\r\n        (for [r registers]\r\n          [:div.row\r\n           [:div.col-col-lg6.register-name (first r)]\r\n           [:div.col-col-lg6.register-value (second r)]]))]]))\r\n\r\n;; -- App ---------------------------------------------------------------------------\r\n(defn app []\r\n  [:div.content\r\n   [:div.row\r\n    [:div.col.col-lg-4\r\n     [code-editor]]\r\n    [:div.col.col-lg-4\r\n     [code]]\r\n    [:div.col.col-lg-4]]\r\n   [:div.row\r\n    [:button.btn.btn-primary.parse-btn {:on-click #(rf/dispatch [:parse])} \"Parse\"]]\r\n   [execution-controls]\r\n   [:div.row.eip-container\r\n    [eip]]\r\n   [:div.row\r\n    [registers]]])\r\n\r\n;; -- Dev Helpers -------------------------------------------------------------------\r\n(comment (rf/dispatch-sync [:initialize]))\r\n(comment (rf/dispatch [:add-value-to-registers [:z 3]]))\r\n\r\n#_(let [db {:memory {:registers {:a 6, :b 7}}}]\r\n  (let [registers (-> db :memory :registers)]\r\n    registers\r\n    ))\r\n\r\n\r\n;; -- After-Load --------------------------------------------------------------------\r\n;; Do this after the page has loaded.\r\n;; Initialize the initial db state.\r\n(defn ^:dev/after-load start\r\n  []\r\n  (dom/render [app]\r\n              (.getElementById js/document \"app\")))\r\n\r\n(defn ^:export init []\r\n  (start))\r\n\r\n(defonce initialize (rf/dispatch-sync [:initialize]))       ; dispatch the event which will create the initial state. "]}