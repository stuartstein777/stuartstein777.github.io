{"version":3,"sources":["day8/re_frame_10x.cljs"],"mappings":"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","names":["js/goog.define","day8.re-frame-10x/debug?","day8.re-frame-10x/init-tracing!","day8.reagent.impl.component/patch-custom-wrapper","day8.reagent.impl.component/patch-wrap-funs","day8.reagent.impl.batching/patch-next-tick","day8.re-frame-10x/resizer-style","draggable-area","day8.re-frame-10x/ease-transition","day8.re-frame-10x/devtools-outer","opts","position","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.atom","panel-width%","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","showing?","dragging?","pin-to-bottom?","selected-tab","window-width","js/window.innerWidth","handle-window-resize","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","e","window-width-val","cljs.core/reset!","handle-keys","tag-name","entering-input?","cljs.core/contains?","cljs.core._EQ_","handle-mousemove","cljs.core/deref","x","y","new-window-width","width%","handle-mouse-up","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","js/window.addEventListener","js/window.removeEventListener","left","transition","day8.re-frame-10x.utils.re-com/box","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.view.container/devtools-inner","day8.re-frame-10x/panel-div","id","panel","js/document","new-panel","js/window.focus","day8.re-frame-10x/inject-devtools!","day8.re-frame-10x.styles/inject-trace-styles","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.dom.render","day8.re-frame-10x/traced-result","trace-id","fragment-id","trace","cljs.core/first","p1__35109#","cljs.core.filter","cljs.core.get_in","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","day8.re-frame-10x/init-db!","day8.re-frame-10x.db/init-db","day8.re-frame-10x/factory-reset!","day8.re-frame-10x/show-panel!","show-panel?"],"sourcesContent":["(ns day8.re-frame-10x\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.styles :as styles]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.subs]\n            [day8.re-frame-10x.events]\n            [day8.re-frame-10x.db :as trace.db]\n            [day8.reagent.impl.component :refer [patch-wrap-funs patch-custom-wrapper]]\n            [day8.reagent.impl.batching :refer [patch-next-tick]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom :as rdom]))\n\n(goog-define debug? false)\n\n#_(defonce real-schedule reagent.impl.batching/schedule)\n#_(defonce do-after-render-trace-scheduled? (atom false))\n\n(defn init-tracing!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (patch-custom-wrapper)\n  (patch-wrap-funs)\n  (patch-next-tick))\n\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [position             (r/atom :right)\n        panel-width%         (rf/subscribe [:settings/panel-width%])\n        showing?             (rf/subscribe [:settings/show-panel?])\n        dragging?            (r/atom false)\n        pin-to-bottom?       (r/atom true)\n        selected-tab         (rf/subscribe [:settings/selected-tab])\n        window-width         (r/atom js/window.innerWidth)\n        handle-window-resize (do (rf/dispatch [:settings/window-width js/window.innerWidth]) ;; Set initial\n                                 (fn [e]\n                                   ;; N.B. I don't think this should be a perf bottleneck.\n                                   (let [window-width-val js/window.innerWidth]\n                                     (rf/dispatch [:settings/window-width window-width-val])\n                                     (reset! window-width window-width-val))))\n        handle-keys          (fn [e]\n                               (let [tag-name        (.-tagName (.-target e))\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when (and (not entering-input?)\n                                            (= (.-key e) \"h\")\n                                            (.-ctrlKey e))\n                                   (rf/dispatch [:settings/user-toggle-panel])\n                                   (.preventDefault e))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (let [width% (/ (- new-window-width x) new-window-width)]\n                                     (when (<= width% 0.9)\n                                       (rf/dispatch [:settings/panel-width% width%])))\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [e] (reset! dragging? false))]\n    (r/create-class\n      {:component-did-mount    (fn []\n                                 (js/window.addEventListener \"keydown\" handle-keys)\n                                 (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.addEventListener \"resize\" handle-window-resize))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys)\n                                 (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.removeEventListener \"resize\" handle-window-resize))\n       :display-name           \"devtools outer\"\n       :reagent-render         (fn []\n                                 (let [draggable-area 10\n                                       left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                                    (str @window-width \"px\"))\n                                       transition     (if @dragging?\n                                                        \"\"\n                                                        ease-transition)]\n                                   [rc/box\n                                    :class \"panel-wrapper\"\n                                    :width \"0px\"\n                                    :height \"0px\"\n                                    :style {:position \"fixed\"\n                                            :top      \"0px\"\n                                            :left     \"0px\"\n                                            :z-index  99999999}\n                                    :child [rc/h-box\n                                            :class \"panel\"\n                                            :width (str (* 100 @panel-width%) \"%\")\n                                            :height \"100%\"\n                                            :style {:position   \"fixed\"\n                                                    :z-index    1\n                                                    :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\"\n                                                    :background \"white\"\n                                                    :left       left\n                                                    :top        \"0px\"\n                                                    :transition transition}\n                                            :children [[:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                                            :on-mouse-down #(reset! dragging? true)})]\n                                                       [container/devtools-inner opts]]]]))})))\n\n\n(defn panel-div []\n  (let [id    \"--re-frame-10x--\"\n        panel (.getElementById js/document id)]\n    (if panel\n      panel\n      (let [new-panel (.createElement js/document \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n(defn inject-devtools! []\n  (styles/inject-trace-styles js/document)\n  (rdom/render [devtools-outer {:panel-type :inline\n                                :debug?     debug?}] (panel-div)))\n\n(defn traced-result [trace-id fragment-id]\n  ;; TODO: this is not terribly efficient, figure out how to get the index of the trace directly.\n  (let [trace (first (filter #(= trace-id (:id %)) (get-in @day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db [:traces :all-traces])))]\n    (get-in trace [:tags :code fragment-id :result])))\n\n(defn init-db! []\n  (trace.db/init-db debug?))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [:settings/factory-reset]))\n\n(defn ^:export show-panel! [show-panel?]\n  (rf/dispatch [:settings/show-panel? show-panel?]))\n"]}