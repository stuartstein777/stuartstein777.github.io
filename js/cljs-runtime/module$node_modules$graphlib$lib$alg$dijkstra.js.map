{
"version":3,
"file":"module$node_modules$graphlib$lib$alg$dijkstra.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,6CAAf,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc1GC,QAASA,YAAW,CAACC,CAAD,CAAIC,MAAJ,CAAYC,QAAZ,CAAsBC,MAAtB,CAA8B,CAChD,IAAIC,QAAU,EAAd,CACIC,GAAK,IAAIC,aADb,CAIIC,gBAAkBA,QAAQ,CAACC,IAAD,CAAO,CACnC,IAAIC,EAAID,IAAA,CAAKE,CAAL,GAAWA,UAAX,CAAeF,IAAf,CAAoBE,CAApB,CAAwBF,IAAxB,CAA6BC,CAArC,CACIE,OAASP,OAAA,CAAQK,CAAR,CADb,CAEIG,OAASV,QAAA,CAASM,IAAT,CAFb,CAGIK,SAAWC,MAAXD,CAAkBA,QAAlBA,CAA6BD,MAEjC,IAAa,CAAb,CAAIA,MAAJ,CACE,KAAUG,MAAJ,CAAU,2DAAV,CACyBP,IADzB,CACgC,WADhC,CAC8CI,MAD9C,CAAN,CAIEC,QAAJ,CAAeF,MAAf,CAAsBE,QAAtB,GACEF,MAEA,CAFOE,QAEP,CAFkBA,QAElB,CADAF,MACA,CADOK,WACP;AADqBN,UACrB,CAAAL,EAAA,CAAGY,QAAH,CAAYR,CAAZ,CAAeI,QAAf,CAHF,CAXmC,CAwBrC,KANAb,CAAA,CAAEkB,KAAF,EAAA,CAAUC,OAAV,CAAkB,QAAQ,CAACT,CAAD,CAAI,CAC5B,IAAIG,SAAWH,CAAA,GAAMT,MAAN,CAAe,CAAf,CAAmBmB,MAAnB,CAA0BC,iBACzCjB,QAAA,CAAQM,CAAR,CAAA,CAAa,CAAEG,SAAUA,QAAZ,CACbR,GAAA,CAAGiB,GAAH,CAAOZ,CAAP,CAAUG,QAAV,CAH4B,CAA9B,CAMA,CAAmB,CAAnB,CAAOR,EAAA,CAAGkB,IAAH,EAAP,CAAA,CAAsB,CACpB,IAAAb,WAAIL,EAAA,CAAGmB,SAAH,EACJ,KAAAV,OAASV,OAAA,CAAQM,UAAR,CACT,IAAII,MAAJ,CAAWD,QAAX,GAAwBO,MAAxB,CAA+BC,iBAA/B,CACE,KAGFlB,OAAA,CAAOO,UAAP,CAAA,CAAUS,OAAV,CAAkBZ,eAAlB,CAPoB,CAUtB,MAAOH,QAvCyC,CAb9CqB,MAAAA,CAAI7B,OAAA,CAAQ,yCAAR,CACR,KAAIU,cAAgBV,OAAA,CAAQ,sDAAR,CAEpBC,OAAA,CAAOC,OAAP;AAIA4B,QAAiB,CAAC1B,CAAD,CAAIC,MAAJ,CAAYC,QAAZ,CAAsBC,MAAtB,CAA8B,CAC7C,MAAOJ,YAAA,CAAYC,CAAZ,CAAe2B,MAAA,CAAO1B,MAAP,CAAf,CACLC,QADK,EACO0B,mBADP,CAELzB,MAFK,EAEK,QAAQ,CAACO,CAAD,CAAI,CAAE,MAAOV,EAAA,CAAE6B,QAAF,CAAWnB,CAAX,CAAT,CAFjB,CADsC,CAF/C,KAAIkB,oBAAsBH,MAAA,CAAEK,QAAF,CAAW,CAAX,CANgF;",
"sources":["node_modules/graphlib/lib/alg/dijkstra.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphlib$lib$alg$dijkstra\"] = function(global,require,module,exports) {\nvar _ = require(\"../lodash\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","runDijkstra","g","source","weightFn","edgeFn","results","pq","PriorityQueue","updateNeighbors","edge","w","v","wEntry","weight","distance","vEntry","Error","predecessor","decrease","nodes","forEach","Number","POSITIVE_INFINITY","add","size","removeMin","_","dijkstra","String","DEFAULT_WEIGHT_FUNC","outEdges","constant"]
}
