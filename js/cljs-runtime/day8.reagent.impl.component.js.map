{"version":3,"sources":["day8/reagent/impl/component.cljs"],"mappings":"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","names":["day8.reagent.impl.component/operation-name","cljs.core/memoize","c","cljs.core/last","clojure.string.split","reagent.impl.component/component-name","day8.reagent.impl.component/wrap-funs","fmap","compiler","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","js/Error","cljs.core/not","cljs.core/count","cljs.core/ifn?","cljs.core.pr_str","or__4126__auto__","legacy-render","name","reagent.impl.util/fun-name","cljs.core.gensym","cljs.core/reduce-kv","m","k","v","cljs.core.assoc","reagent.impl.component/get-wrapper","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__40610","re-frame.trace/*current-trace*","*current-trace*-temp-val__40611","re-frame.trace/start-trace","end__39755__auto__","re-frame.interop/now","duration__39756__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","re-frame.trace/run-tracing-callbacks!","temp__5733__auto__","component-name","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","goog.object/get","_","reagent.impl.batching/mark-rendered","res","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__39757__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","cljs.core.map","day8.reagent.impl.component/patch-wrap-funs","reagent.impl.component/wrap-funs","js/day8","js/day8.reagent","js/day8.reagent.impl","js/day8.reagent.impl.component","js/day8.reagent.impl.component.original-custom-wrapper","day8.reagent.impl.component/original-custom-wrapper","reagent.impl.component/custom-wrapper","day8.reagent.impl.component/custom-wrapper","key","f","G__40621","cljs.core/Keyword","*current-trace*-orig-val__40622","*current-trace*-temp-val__40623","day8.reagent.impl.component/patch-custom-wrapper"],"sourcesContent":["(ns day8.reagent.impl.component\n  (:require\n    [goog.object            :as gobj]\n    [clojure.string         :as string]\n    [re-frame.trace         :as trace :include-macros true]\n    [re-frame.interop       :as interop]\n    [reagent.impl.component :as component]\n    [reagent.impl.batching  :as batch]\n    [reagent.impl.util      :as util]\n    [reagent.ratom          :as ratom]\n    [reagent.debug          :refer-macros [dev? warn error warn-unless assert-callable]]))\n\n(def operation-name (memoize (fn [c] (last (string/split (component/component-name c) #\" > \")))))\n\n;; Monkey patched reagent.impl.component/wrap-funs to hook into render\n(defn wrap-funs [fmap compiler]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender])\n          render-fun (-> renders vals first)]\n      (assert (not (:componentFunction fmap)) \":component-function is no longer supported, use :reagent-render instead.\")\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:render fmap))\n        legacy-render (nil? (:reagentRender fmap))\n        name (or (:displayName fmap)\n                 (util/fun-name render-fun)\n                 (str (gensym \"reagent\")))\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (component/get-wrapper k v)))\n                        {} fmap)]\n    (assoc fmap\n      :displayName name\n      :cljsLegacyRender legacy-render\n      :reagentRender render-fun\n      :render (fn render []\n                (this-as c\n                  (trace/with-trace\n                    {:op-type :render\n                     :tags    (if-let [component-name (component/component-name c)]\n                                {:component-name component-name}\n                                {})\n                     :operation (operation-name c)})\n                  (if util/*non-reactive*\n                    (component/do-render c compiler)\n                    (let [^clj rat (gobj/get c \"cljsRatom\")\n                          _        (batch/mark-rendered c)\n                          res      (if (nil? rat)\n                                     (ratom/run-in-reaction #(component/do-render c compiler) c \"cljsRatom\"\n                                                            batch/queue-render component/rat-opts)\n                                     (._run rat false))\n                          cljs-ratom (gobj/get c \"cljsRatom\")]\n                      (trace/merge-trace!\n                        {:tags {:reaction (interop/reagent-id cljs-ratom)\n                                :input-signals (when cljs-ratom\n                                                 (map interop/reagent-id (gobj/get cljs-ratom \"watching\" :none)))}})\n                      res)))))))\n\n(defn patch-wrap-funs\n  []\n  (set! reagent.impl.component/wrap-funs wrap-funs))\n\n(defonce original-custom-wrapper reagent.impl.component/custom-wrapper)\n\n(defn custom-wrapper\n  [key f]\n  (case key\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n        (trace/with-trace\n          {:op-type   key\n           :operation (last (string/split (component/component-name c) #\" > \"))\n           :tags      {:component-name (component/component-name c)\n                       :reaction (interop/reagent-id (gobj/get c \"cljsRatom\"))}})\n        (.call (original-custom-wrapper key f) c c)))\n    (original-custom-wrapper key f)))\n\n(defn patch-custom-wrapper\n  []\n  (set! reagent.impl.component/custom-wrapper custom-wrapper))"]}