{
"version":3,
"file":"module$node_modules$dagre$lib$order$resolve_conflicts.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/dagre/lib/order/resolve-conflicts.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dagre$lib$order$resolve_conflicts\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = resolveConflicts;\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function(entry, i) {\n    var tmp = mappedEntries[entry.v] = {\n      indegree: 0,\n      \"in\": [],\n      out: [],\n      vs: [entry.v],\n      i: i\n    };\n    if (!_.isUndefined(entry.barycenter)) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function(e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function(entry) {\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function(uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (_.isUndefined(uEntry.barycenter) ||\n          _.isUndefined(vEntry.barycenter) ||\n          uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function(wEntry) {\n      wEntry[\"in\"].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry[\"in\"].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(_.filter(entries, function(entry) { return !entry.merged; }),\n    function(entry) {\n      return _.pick(entry, [\"vs\", \"i\", \"barycenter\", \"weight\"]);\n    });\n\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","doResolveConflicts","sourceSet","handleIn","vEntry","uEntry","merged","_","isUndefined","barycenter","sum","weight","vs","concat","i","Math","min","handleOut","wEntry","push","indegree","entries","length","entry","pop","forEach","reverse","out","map","filter","pick","resolveConflicts","cg","mappedEntries","tmp","v","edges","e","entryV","entryW","w"]
}
