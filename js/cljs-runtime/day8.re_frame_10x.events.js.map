{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"mappings":";AAoBA,AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAA,AAAA,AAAA,AAACC,AAEQ,AACGC;AADH,AAEE,AAAMC,AAAM,AAAI,AAAA,AAACC,AAAU,AAAA,AAAUF,AACvB,AAAA,AAAA,AAAA,AAACG,AAAOH,AACR,AAAA,AAAA,AAAA,AAACG,AAAOH;AAChBI,AAAM,AAAA,AAAA,AAAA,AAACD,AAAOH;AAHpB,AAIE,AAACF,AAAAA,AAAAA,AAAEG,AAAAA,AAAGG,AAAAA;;AACNJ;;;AAEf,AAAA,AAAMK,AAAYC;AAAlB,AACE,AAAMC,AAAkB,AAAI,AAAA,AAACC,AAAE,AAAA,AAAUF,AACb,AAAA,AAACE,AAAE,AAAA,AAAUF;AACnCG,AAAkB,AAAA,AAAA,AAAA,AAAA,AAACN,AAAOG;AAFhC,AAGE,AAAA,AAAQC;AAAR;;AAEE,AAAK,AAAA,AAACG,AAAcD;;;AAE1B,AAAA,AAAME;AAAN,AACE,AAAA,AAACC;;AAEH,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAAAC,AAACC;AAAD,AAAwC,AAAA,AAAA,AAAAD,AAACE;;;AAE3C;;;;;AAAA,AAAAC,AAAMO,AAIHC;AAJH,AAAA,AAAAP,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAIMK;AAJNP,AAIUQ;AAJVT,AAIiBU;AAJjB,AAKE,AAAID;AACF,AAAAE,AAAiB,AAACE,AAAiBN,AAAEC;AAArC,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAAME,AAAO,AAACR,AAAAA,AAAAA,AAAUM,AAAAA,AAAQH,AAAAA;AAAhC,AACE,AAAI,AAACP,AAAIY;AACP,AAACC,AAAMR,AAAEC,AAAEM;;AACX,AAACE,AAAOT,AAAEC;;;AACdD;;;AACF,AAACS,AAAOT,AAAEC;;;AAEd,AAAA,AAAMS,AAAmBC;AAAzB,AACE,AAAA,AAAK,AAAA,AAAA,AAACE,AAA4CC,AAAuBH;AAAzE,AAAAC,AACqBG;AADrB,AAAA;;AAIF,AAAA,AAACC,AAEC,AAAAC,AAAKzC;AAAL,AAAA,AAAA0C,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASE;AAAT,AAAAD,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACE,AAAA,AAACC,AAAuC,AAAAC,AAAKF;AAALG,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC;;;AACxC,AAAA,AAAA,AAAA,AAACC,AAASjD,AAA6B,AAAA+C,AAAKF;AAALG,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC;;;AAE3C,AAAA,AAACR,AAEC,AAAAU,AAAKlD;AAAL,AAAA,AAAAmD,AAAAD;AAAA,AAAAP,AAAAQ,AAAA,AAAA,AAASP;AAAT,AAAAD,AAAAQ,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAACH,AAASjD,AAA6BoD;;AAE3C,AAAA,AAACZ,AAEC,AAAAa,AAAKrD;AAAL,AAAA,AAAAsD,AAAAD;AAAA,AAAAV,AAAAW,AAAA,AAAA,AAASV;AAAT,AAAAD,AAAAW,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACT,AAAkCS;;AACnC,AAAA,AAAA,AAAA,AAACN,AAASjD,AAA6BuD;;AAE3C,AAAA,AAACf,AAEC,AAAKxC,AAAG4C;AAAR,AACE,AAAA,AAAA,AAAA,AAACY,AAAUxD,AAAkCyD;;AAEjD,AAAA,AAACjB,AAEC,AAAAkB,AAAK1D;AAAL,AAAA,AAAA2D,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAASf;AAAT,AAAAD,AAAAgB,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACd,AAAgCc;;AACjC,AAAA,AAAA,AAAA,AAACX,AAASjD,AAA4B4D;;AAE1C,AAAA,AAACpB,AAEC,AAAKxC,AAAG4C;AAAR,AACE,AAACiB;;AACD,AAACC;;AACD9D;;AAEJ,AAAA,AAACwC,AAEC,AAAKxC,AAAG4C;AAAR,AACE,AAAMmB,AAAgB,AAACN,AAAI,AAAA,AAAA,AAAA,AAACvD,AAAOF;AAC7BgE,AAAgB,AAAA,AAAA,AAAA,AAAC9D,AAAOF;AACxBiE,AAAgB,AAAAC,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAAoBH;;;AAF1C,AAGE,AAAIA;AACF,AAACnD;;AACD,AAAUoD;AAAV;AAAA,AACE,AAACtD;;;;AACL,AAAA,AAACoC,AAAkCmB;;AACnC,AAAA,AAACnB,AAAgCiB;;AAC7B/D,AACA,AAAA,AAAA,AAAA,AAACiD,AAAmCgB,AACpC,AAAA,AAAA,AAAA,AAAChB,AAAkCc;;AAE7C,AAAA,AAACvB,AAEC,AAAA2B,AAAKnE;AAAL,AAAA,AAAAoE,AAAAD;AAAA,AAAAxB,AAAAyB,AAAA,AAAA,AAASxB;AAAT,AAAAD,AAAAyB,AAAA,AAAA,AAAWC;AAAX,AAME,AAAMC,AAAI,AAACC,AAAYF;AACjBC,AAAI,AAAA,AAAI,AAAK,AAACb,AAAI,AAACe,AAASF,AAAM,AAACG,AAASH,AACtCA;AAFZ,AAIE,AAAA,AAACxB,AAAqCwB;;AACtC,AAAA,AAAA,AAAA,AAACrB,AAASjD,AAAiCsE;;AAEjD,AAAA,AAAKI,AACF,AAAA,AAAA,AAAA,AAACC,AAAqC,AAAA,AAAAC,AAAChF;AAAD,AAAc,AAAA,AAAAgF,AAAC9B;;AAExD,AAAA,AAACN,AAECkC,AACA,AAAKG,AAAejC;AAApB,AACE,AAAMkC,AAAG,AAACC;AAAV,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC/C,AAAM6C,AAAeC,AAAQA,AAAqC,AAACE;;AAE1E,AAAA,AAACxC,AAECkC,AACA,AAAAO,AAAKJ;AAAL,AAAA,AAAAK,AAAAD;AAAA,AAAAtC,AAAAuC,AAAA,AAAA,AAAqBtC;AAArB,AAAAD,AAAAuC,AAAA,AAAA,AAAuBJ;AAAvB,AACE,AAAC7C,AAAO4C,AAAeC;;AAE3B,AAAA,AAACtC,AAECkC,AACA,AAAAS,AAAKN;AAAL,AAAA,AAAAO,AAAAD;AAAA,AAAAxC,AAAAyC,AAAA,AAAA,AAAqBxC;AAArB,AAAAD,AAAAyC,AAAA,AAAA,AAAuBN;AAAvB,AAAAnC,AAAAyC,AAAA,AAAA,AAA0BC;AAA1B,AAEE,AAAMlF,AAAM,AAAC+B,AAAkBmD;AAA/B,AACMR,AACA,AAAA,AAAA,AAAC5B,AAAU6B,AAAeO,AAC1B,AAAA,AAAA,AAAC7B,AAAWsB,AAAc,AAAKQ;AAAL,AAAgB,AAAInF;AAAMA;;AAAMmF;;;;AAEpE,AAAA,AAAC9C,AAECkC,AACA,AAAAa,AAAK3C;AAAL,AAAA,AAAA4C,AAAAD;AAAA,AAAA5C,AAAA6C,AAAA,AAAA,AAAQ5C;AAAR,AAAAD,AAAA6C,AAAA,AAAA,AAAUX;AAAV,AACEA;;AAEJ,AAAA,AAAKY,AACF,AAAA,AAAA,AAAA,AAACd,AAA0C,AAAA,AAAAe,AAAC9F;AAAD,AAAc,AAAA,AAAA8F,AAAC5C;;AAE7D,AAAA,AAACN,AAECiD,AACA,AAAKE,AAAoB/C;AAAzB,AACE,AAAMkC,AAAG,AAACC;AAAV,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC/C,AAAM2D,AAAoBb,AAAQA,AAA4B,AAACE;;AAEtE,AAAA,AAACxC,AAECiD,AACA,AAAAG,AAAKD;AAAL,AAAA,AAAAE,AAAAD;AAAA,AAAAjD,AAAAkD,AAAA,AAAA,AAA0BjD;AAA1B,AAAAD,AAAAkD,AAAA,AAAA,AAA4Bf;AAA5B,AACE,AAAC7C,AAAO0D,AAAoBb;;AAEhC,AAAA,AAACtC,AAECiD,AACA,AAAAK,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAAnD,AAAAoD,AAAA,AAAA,AAA0BnD;AAA1B,AAAAD,AAAAoD,AAAA,AAAA,AAA4BjB;AAA5B,AAAAnC,AAAAoD,AAAA,AAAA,AAA+BC;AAA/B,AAEE,AAAM7F,AAAM,AAAC+B,AAAkB8D;AAA/B,AACML,AACA,AAAA,AAAA,AAAC1C,AAAU6B,AAAYkB,AACvB,AAAA,AAAA,AAACxC,AAAWsB,AAAQ,AAAKQ;AAAL,AAAgB,AAAInF;AAAMA;;AAAMmF;;;;AAE9D,AAAA,AAAC9C,AAECiD,AACA,AAAAQ,AAAKrD;AAAL,AAAA,AAAAsD,AAAAD;AAAA,AAAAtD,AAAAuD,AAAA,AAAA,AAAQtD;AAAR,AAAAD,AAAAuD,AAAA,AAAA,AAAUrB;AAAV,AACEA;;AAEJ,AAAA,AAAKsB,AAAoB,AAAA,AAAA,AAAA,AAACxB,AAAsC,AAAA,AAAAyB,AAACxG;AAAD,AAAc,AAAA,AAAAwG,AAACtD;;AAE/E,AAAA,AAACN,AAEC2D,AACA,AAAAE,AAAKzD;AAAL,AAAA,AAAA0D,AAAAD;AAAA,AAAA1D,AAAA2D,AAAA,AAAA,AAAQ1D;AAAR,AAAAD,AAAA2D,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAEJ,AAAA,AAAC/D,AAEC2D,AACA,AAAAK,AAAKD;AAAL,AAAA,AAAAE,AAAAD;AAAA,AAAA7D,AAAA8D,AAAA,AAAA,AAAgB7D;AAAhB,AAAAD,AAAA8D,AAAA,AAAA,AAAkBC;AAAlB,AAAA/D,AAAA8D,AAAA,AAAA,AAA6BE;AAA7B,AACE,AAAC3E,AAAMuE,AAAUG,AAAWC;;AAEhC,AAAA,AAACnE,AAEC,AAAAoE,AAAK5G;AAAL,AAAA,AAAA6G,AAAAD;AAAA,AAAAjE,AAAAkE,AAAA,AAAA,AAASjE;AAAT,AAAAD,AAAAkE,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAAC7D,AAASjD,AAAuB8G;;AAErC,AAAA,AAAA,AAACtE,AAEE,AAAA,AAAA,AAAA,AAACmC,AAA6C,AAAA,AAAAoC,AAACnH;AAAD,AAAc,AAAA,AAAAmH,AAACjE;AAC9D,AAAAkE,AAAKhH;AAAL,AAAA,AAAAiH,AAAAD;AAAA,AAAArE,AAAAsE,AAAA,AAAA,AAASrE;AAAT,AAAAD,AAAAsE,AAAA,AAAA,AAAWC;AAAX,AACEA;;AAIJ,AAAA,AAAMC,AAAOC,AAAaC;AAA1B,AAIE,AAAMC,AAAyB,AAAA,AAAiBD;AAC1CE,AAAyB,AAAA,AAACC;AAC1BC,AAAyB,AAAKlF;AAAL,AACE,AAAA,AAAAmF,AAAWH;AAAX;;AAAA,AACE,AAAAI,AACE;AAAA,AACE,AAAMvE,AAAO,AAAcgE;AACrBS,AAAO,AAAeT;AAD5B,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACrG,AAAsDqC,AAAcyE;;AACvE,AAAA,AAACC,AAAOP;;AALZ,AAAA,AAAAI,AAAAA,AAACC,AAAAA,AAAAA;;AAMD,AAAA,AAACE,AAAOP;;;AACrCQ,AAAyB,AAAMC,AAAI,AAAA,AAACR;AAAX,AACE;AAAA,AAEE,AAAAS,AAAA,AAAAP,AAA0BM;AAA1BC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAnG,AAAAmG,AAAA,AAAcI;AAAd,AAAAvG,AAAAmG,AAAA,AAAmBK;AACbC,AAAY,AAAWnB;AACvBoB,AAAY,AAAWpB;AAF7B,AAGE,AAAM,AAAI,AAACqB,AAAKJ,AAAKE,AACX,AAACE,AAAKH,AAAIE;AADpB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACzH,AAAuDwH,AAAiBC;;AACzE,AAAA,AAAA,AAAA,AAACV,AAAOE,AAAWO,AAAiBC;;AAHtC;;;;AAI/BE,AAAyB,AAAA,AAAClB;AAC1BmB,AAAyB,AAAK/F;AAAL,AACE,AAAA,AAAsBwE,AAAsBK;;AAC5C,AAAAmB,AAAA,AAAAlB,AAASgB;AAAT,AAAA,AAAA,AAAAE,AAAA;AAAA;AAAA,AAAAA,AAAkCC;;;AAFpC;;AAtB/B,AA4BE,AAACC,AAA2BzB;;AAC5B,AAAA,AAAA,AAAC0B,AAAgB3B;AAAjB,AAA0C,AAAA,AAAA,AAACrG;;;AAC3C,AAAA,AAACiI,AACE,AAAA,AAAA,AAAA,AAAA,AAACC,AAE0B;AAAA,AACE,AAAA,AAAmB7B,AAAsBK;;AACzC,AAAA,AAAmBL,AAA4BuB;;AAE/C,AAACb,AAAOY,AACA,AAAA,AAACQ,AACCnB;AARvC,AAAA,AAU2BY,AACA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAQQ;AACpC7B;;AAEN;;;AAAA,AAAA8B,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAAA,AAEsCE;AAFtC,AAAAzH,AAAAuH,AAAA,AAEWjG;AAFX,AAAAtB,AAAAuH,AAAA,AAEiBxB;AAFjB,AAAA/F,AAAAuH,AAAA,AAEwBf;AAFxB,AAAAxG,AAAAuH,AAAA,AAE4BhB;AAF5B,AAGE,AAAMmB,AAAiBC;AACjBC,AAAiB,AAACC,AAAyB,AAAA,AAAuBH;AAClEI,AAAiB,AAAA,AAAA,AACKF;AAH5B,AAOE,AAAA9H,AAAW,AAAA,AAAA,AAACkI,AACe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAc1G,AAAiByE,AAAgBQ,AAAaC;AADvF,AAAA,AAAA1G;AAAA,AAAAA,AAASiI;AAAT,AAGE,AAAME,AAAE,AAAYF;AAApB,AAQE,AAAOE;;AACP,AAAQA,AAAEH;;AACV,AAAA,AAAA,AAACb,AAAgBc;AAAjB,AAA6B,AAAC1C,AAAM0C,AAAEE;;;AACtC,AAAQA;;AAXV;;AAHF;;;AAkBJ,AAAA,AAACC,AAEC,AAAKC,AAAIrH;AAAT,AACE,AAAI,AAAC0G,AAAqB,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAO+J;AAChC,AACE,AAAA,AAAA,AAACnH;;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEuB,AAAA,AAAKmH,AACL,AAAA,AAAA,AAAA,AAAA,AAAChH,AACD,AAAA,AAAA,AAAA,AAAC1B;;AAL1B,AAAA,AAAA,AAAA,AAAA,AAOa,AAAA,AAAA,AAAA,AAAA,AAAC0B,AAAS,AAAA,AAAKgH;;;AAGhC,AAAA,AAACD,AAEC,AAAKC,AAAIrH;AAAT,AACE,AAAA,AAAA,AAACE;;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEmB,AAAA,AAAA,AAAA,AAAA,AAACG,AAAS,AAAA,AAAKgH;;AAGpC,AAAA,AAAA,AAACzH,AAEE,AAAA,AAAA,AAAA,AAACmC,AAAiD,AAAA,AAAAuF,AAACC;AAAD,AAAW,AAAA,AAAAD,AAACpH;AAC/D,AAAAsH,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAzH,AAAA0H,AAAA,AAAA,AAAUzH;AAAV,AAAAD,AAAA0H,AAAA,AAAA,AAAYE;AAAZ,AACEA;;AAEJ,AAAA,AAAA,AAAC/H,AAEE,AAAA,AAAA,AAAA,AAACmC,AAAiD,AAAA,AAAA6F,AAACL;AAAD,AAAW,AAAA,AAAAK,AAAC1H;AAC/D,AAAA2H,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAA9H,AAAA+H,AAAA,AAAA,AAAU9H;AAAV+H,AAAA,AAAAhI,AAAA+H,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzC,AAAA,AAAAyC,AAAA,AAAA,AAAA,AAAA,AAAAxC,AAAAC,AAAAuC,AAAAA;AAAA,AAAA7I,AAAA6I,AAAA,AAAavH;AAAb,AAAAtB,AAAA6I,AAAA,AAA0B9C;AAA1B,AACE,AAAA,AAAA,AAAC7F,AAAMsI,AAAWlH,AAAcyE;;AAEpC,AAAA,AAAA,AAACrF,AAEE,AAAA,AAAA,AAAA,AAACmC,AAAiD,AAAA,AAAAiG,AAACT;AAAD,AAAW,AAAA,AAAAS,AAAC9H;AAC/D,AAAA+H,AAAKP;AAAL,AAAA,AAAAQ,AAAAD;AAAA,AAAAlI,AAAAmI,AAAA,AAAA,AAAUlI;AAAVmI,AAAA,AAAApI,AAAAmI,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7C,AAAA,AAAA6C,AAAA,AAAA,AAAA,AAAA,AAAA5C,AAAAC,AAAA2C,AAAAA;AAAA,AAAAjJ,AAAAiJ,AAAA,AAAa1C;AAAb,AAAAvG,AAAAiJ,AAAA,AAAwBzC;AAAxB,AACE,AAAA,AAAA,AAACtG,AAAMsI,AAAUjC,AAAUC;;AAE/B,AAAA,AAAC0B,AAEC,AAAKC,AAAIrH;AAAT,AACE,AAAChC;;AADH;;AAIF,AAAA,AAACoJ,AAEC,AAAKC,AAAIrH;AAAT,AACE,AAAClC;;AADH;;AAIF,AAAA,AAACsJ,AAEC,AAAKpH,AAAEA;AAAP,AACE,AAAA,AAAA,AAACoI;AAAD,AAA4C,AAAA,AAAA,AAAA,AAACC;;;AAD/C;;AAIF,AAAA,AAACzI,AAEC,AAAA0I,AAAKlL;AAAL,AAAA,AAAAmL,AAAAD;AAAA,AAAAvI,AAAAwI,AAAA,AAAA,AAASvI;AAAT,AAAAD,AAAAwI,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAACnI,AAASjD,AAAyBoL;;AAIvC,AAAA,AAAMC,AAAmBC;AAAzB,AACE,AAAA,AAACxI,AAAkCwI;;AAErC,AAAA,AAAC9I,AAEC,AAAA+I,AAAKvL;AAAL,AAAA,AAAAwL,AAAAD;AAAA,AAAA5I,AAAA6I,AAAA,AAAA,AAAS5I;AAAT,AAAAD,AAAA6I,AAAA,AAAA,AAAWF;AAAX,AACE,AAACD,AAAkBC;;AACnB,AAAA,AAAA,AAAA,AAACrI,AAASjD,AAA2BsL;;AAEzC,AAAA,AAAA,AAAC9I,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA8G,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAA9I,AAAA+I,AAAA,AAAA,AAAmB9I;AAAnB,AAAAD,AAAA+I,AAAA,AAAA,AAAqBC;AAArB,AAAAhJ,AAAA+I,AAAA,AAAA,AAAkCE;AAAlC,AACE,AAAMC,AAAO,AAAU,AAAA,AAAAC,AAACC;AAAD,AAAO,AAACxL,AAAEoL,AAAa,AAAA,AAAAG;AAAjC,AAAA,AAA6CR,AAG3C,AAAMA,AAAa,AAAI,AAAK,AAAA,AAAC/K,AAAeqL,AAChB,AAAA,AAAAI,AAACD;AAAD,AAAO,AAACxL,AAAEqL,AAAY,AAAA,AAAAI;AAD3B,AAC6CV,AAC/C,AAAA,AAAAW,AAACC;AAAD,AAAS,AAAA,AAAC3L,AAAe,AAAA,AAAA0L;AAAkBX,AAC3CA;AAHrB,AAKE,AAAA,AAAA,AAAA,AAAA,AAACa,AAAKb,AAA2B,AAACvG,AACD,AAAI,AAAA,AAACxE,AAAEqL,AACL,AAACQ,AAAeT,AAChB,AAACU,AAAcV,AACjBC;;AAZlD,AAaE,AAACP,AAAkBQ;;AACnBA;;AAEN,AAAA,AAAA,AAACrJ,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA2H,AAAKhB;AAAL,AAAA,AAAAiB,AAAAD;AAAA,AAAA3J,AAAA4J,AAAA,AAAA,AAAmB3J;AAAnB,AAAAD,AAAA4J,AAAA,AAAA,AAAqBC;AAArB,AACE,AAAMX,AAAO,AAAA,AAAAY,AAACP;AAAD,AAAS,AAAC3L,AAAE,AAAA,AAAAkM,AAAQD;AAAWlB;AAA5C,AACE,AAACD,AAAkBQ;;AACnBA;;AAEN,AAAA,AAACrJ,AAEC,AAAKxC,AAAG4C;AAAR,AACE,AAAMiJ,AAAO,AAAA,AAAA,AAAA,AAACtK,AAAUvB;AAAxB,AACE,AAACqL,AAAkB,AAAA,AAAA,AAAA,AAACnL,AAAO2L;;AAC3BA;;AAEN,AAAA,AAAA,AAACrJ,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAK+H,AAAwB9J;AAA7B,AACM8J,AACA,AAAA,AAAA,AAAC1K,AACD,AAAA,AAAC2K,AAAkBlJ;;AAE3B,AAAA,AAAA,AAACjB,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAiI,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAjK,AAAAkK,AAAA,AAAA,AAAiBjK;AAAjB,AAAAD,AAAAkK,AAAA,AAAA,AAAmB/H;AAAnB,AACE,AAAMiI,AAAS,AAAA,AAAA,AAAC7M,AAAO4M,AAAuBhI,AAAI,AAAA,AAAYgI;AAA9D,AACE,AAAA,AAAA,AAAA,AAAAE,AAACxJ,AAAUsJ,AAAuBhI;AAAlC,AAAuC,AAAIiI;AAAJ;;AAAmB,AAAAC,AAACvJ;;;;AAEjE,AAAA,AAAA,AAACjB,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAsI,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAtK,AAAAuK,AAAA,AAAA,AAAiBtK;AAAjB,AAAAD,AAAAuK,AAAA,AAAA,AAAmBE;AAAnB,AACE,AAAMA,AAAe,AAAI,AAACC,AAAcF,AAAWC,AAC5B,AAACE,AAAeH,AAAWC,AAC3B,AAACG,AAAUJ,AAAWC;AAF7C,AAGE,AAAA,AAACtK,AAAgCsK;;AACjCA;;AAEN,AAAA,AAAA,AAAC5K,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA6I,AAAKL;AAAL,AAAA,AAAAM,AAAAD;AAAA,AAAA7K,AAAA8K,AAAA,AAAA,AAAiB7K;AAAjB,AAAAD,AAAA8K,AAAA,AAAA,AAAmBL;AAAnB,AACEA;;AAGJ,AAAA,AAAA,AAAC5K,AAEE,AAAA,AAAA,AAAA,AAACmC,AAA4C,AAAA,AAAA+I,AAAC9N;AAAD,AAAc,AAAA,AAAA8N,AAAC5K;AAC7D,AAAA6K,AAAK/K;AAAL,AAAA,AAAAgL,AAAAD;AAAA,AAAAhL,AAAAiL,AAAA,AAAA,AAAQnM;AAAR,AAAAkB,AAAAiL,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAIJ,AAAA,AAAKC,AACF,AAAA,AAAA,AAAA,AAACnJ,AAA0B,AAAA,AAAAoJ,AAACnO;AAAD,AAAc,AAAA,AAAAmO,AAACjL;;AAE7C,AAAA,AAACN,AAECsL,AACA,AAAKE,AAAMpL;AAAX,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACZ,AAAMgM,AAAM,AAAChJ;;AAclB,AAAA,AAACxC,AAECsL,AACA,AAAAG,AAAKD;AAAL,AAAA,AAAAE,AAAAD;AAAA,AAAAtL,AAAAuL,AAAA,AAAA,AAAYtL;AAAZ,AAAAD,AAAAuL,AAAA,AAAA,AAAcC;AAAd,AAAAxL,AAAAuL,AAAA,AAAA,AAAsBE;AAAtB,AACE,AAAMC,AAAM,AAACnM,AAAkBkM;AACzBJ,AAAM,AAAA,AAAA,AAAC/K,AAAS+K,AAAOG,AAAmBC;AADhD,AAEE,AAAI,AAAI,AAAK,AAAA,AAAA,AAAOC,AACP,AAACC,AAAYD,AAClB,AAACE,AAAWH;AACdJ,AACA,AAAA,AAAA,AAAC/K,AAAUkL,AAAeE,AAC1B,AAAA,AAAA,AAAA,AAACpL,AAAUkL;;AACf,AAAA,AAAA,AAAA,AAAClL,AAAS+K,AAAOG;;;AAEzB,AAAA,AAAC3L,AAECsL,AACA,AAAAU,AAAKR;AAAL,AAAA,AAAAS,AAAAD;AAAA,AAAA7L,AAAA8L,AAAA,AAAA,AAAY7L;AAAZ,AAAAD,AAAA8L,AAAA,AAAA,AAAcN;AAAd,AACE,AAAAO,AAAiC,AAAC5M,AAAIkM,AAAMG;AAA5CO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxG,AAAA,AAAAwG,AAAA,AAAA,AAAA,AAAA,AAAAvG,AAAAC,AAAAsG,AAAAA;AAAA,AAAA5M,AAAA4M,AAAA,AAAcC;AAAd,AAAA7M,AAAA4M,AAAA,AAA0BL;AAA1B,AACE,AAAIM;AACFX;;AACI,AAAA,AAAA,AAAC/K,AAAS+K,AAAOG,AAAmB,AAACS,AAAOP,AAC5C,AAAA,AAAA,AAAA,AAACpL,AAAUkL;;;AAEvB,AAAA,AAAC3L,AAECsL,AACA,AAAAe,AAAKb;AAAL,AAAA,AAAAc,AAAAD;AAAA,AAAAlM,AAAAmM,AAAA,AAAA,AAAYlM;AAAZ,AAAAD,AAAAmM,AAAA,AAAA,AAAcX;AAAd,AAAAxL,AAAAmM,AAAA,AAAA,AAAsBC;AAAtB,AACE,AAAA,AAAA,AAAC9L,AAAS+K,AAAOG,AAAgBY;;AAErC,AAAA,AAACvM,AAECsL,AACA,AAAAkB,AAAKhB;AAAL,AAAA,AAAAiB,AAAAD;AAAA,AAAArM,AAAAsM,AAAA,AAAA,AAAYrM;AAAZ,AAAAD,AAAAsM,AAAA,AAAA,AAAcd;AAAd,AAAAxL,AAAAsM,AAAA,AAAA,AAAsBC;AAAtB,AACE,AAAMH,AAAM,AAAA,AAAIG,AAEF,AAAA,AAAA,AAAChP,AAAO8N,AAAOG;AAF7B,AAGMH,AACA,AAAA,AAAA,AAAC/K,AAAUkL,AAAgBe,AAE3B,AAAA,AAAA,AAACjM,AAAUkL,AAAgBY;;AAErC,AAAA,AAACvM,AAECsL,AACA,AAAAqB,AAAKnB;AAAL,AAAA,AAAAoB,AAAAD;AAAA,AAAAxM,AAAAyM,AAAA,AAAA,AAAYxM;AAAZ,AAAAD,AAAAyM,AAAA,AAAA,AAAcjB;AAAd,AACE,AAAClM,AAAO+L,AAAMG;;AAElB,AAAA,AAAC3L,AAECsL,AACA,AAAAuB,AAAKrP;AAAL,AAAA,AAAAsP,AAAAD;AAAA,AAAA1M,AAAA2M,AAAA,AAAA,AAAS1M;AAAT,AAAAD,AAAA2M,AAAA,AAAA,AAAWtB;AAAX,AACEA;;AA2BJ,AAAA,AAACxL,AAEC,AAAA+M,AAAKvP;AAAL,AAAA,AAAAwP,AAAAD;AAAA,AAAA5M,AAAA6M,AAAA,AAAA,AAAS5M;AAAT,AAAAD,AAAA6M,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAACxM,AAASjD,AAA4ByP;;AAE1C,AAAA,AAAA,AAACjN,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA+K,AAAK1P;AAAL,AAAA,AAAA2P,AAAAD;AAAA,AAAA/M,AAAAgN,AAAA,AAAA,AAAS/M;AAAT,AAAAD,AAAAgN,AAAA,AAAA,AAAW3B;AAAX,AACE,AAAA,AAAClL,AAA+CkL;;AAChDA;;AAEJ,AAAA,AAAA,AAACxL,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAiL,AAAK5B;AAAL,AAAA,AAAA6B,AAAAD;AAAA,AAAAjN,AAAAkN,AAAA,AAAA,AAAYjN;AAAZ,AAAAD,AAAAkN,AAAA,AAAA,AAAcxB;AAAd,AACE,AAAMyB,AAAU,AAAI,AAAC7P,AAAU+N,AAAMK,AACnB,AAAC0B,AAAK/B,AAAMK,AACZ,AAAClC,AAAK6B,AAAMK;AAF9B,AAGE,AAAA,AAACvL,AAA+CgN;;AAChDA;;AAEN,AAAA,AAAA,AAACtN,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAKqJ,AAAMpL;AAAX,AACE,AAACoN,AAA4BC;;AAEjC,AAAA,AAACzN,AAEC,AAAA0N,AAAKlQ;AAAL,AAAA,AAAAmQ,AAAAD;AAAA,AAAAvN,AAAAwN,AAAA,AAAA,AAASvN;AAAT,AAAAD,AAAAwN,AAAA,AAAA,AAAWC;AAAX,AACE,AAAM,AAAA,AAAA,AAAA,AAAClQ,AAAOF;AAAd,AACE,AAAMqQ,AAAS,AAAA,AAASrQ;AAClBsQ,AAAS,AAAApM,AAAIkM;AAAJ,AAAA,AAAAlM;AAAAA;;AAEI,AAACqM,AAAkB,AAAA,AAACzO,AAAIuO;;;AACrCG,AAAS,AAAA,AAAA,AAACtQ,AAAOmQ,AAAuBC;AACxCnQ,AAAS,AAACsQ,AAAoB,AAAA,AAAaD;AALjD,AAOE,AAAAE,AAAmB,AAACC,AAAmBxQ;AAAvC,AAAA,AAAA,AAAAuQ,AAAA;AAAA;AAAA,AAAAA,AAAY7E;AAAZ,AACE,AAAC/D,AAAOmI,AAAmBpE;;;AATjC;;AAUA7L;;AAIJ,AAAA,AAAM4Q,AACHpP;AADH,AAEE,AAAA,AAAA,AAAA,AAAA,AAAIA,AAAcH;;AAEpB,AAAA,AAAC2I,AAEC,AAAA6G,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7I,AAAA,AAAA6I,AAAA,AAAA,AAAA,AAAA,AAAA5I,AAAAC,AAAA2I,AAAAA;AAAA,AAAAjP,AAAAiP,AAAA,AAAa/Q;AAAbgR,AAAAF;AAAA,AAAAnO,AAAAqO,AAAA,AAAA,AAAmBpO;AAAnB,AAAAD,AAAAqO,AAAA,AAAA,AAAqBC;AAArB,AACE,AAAArP,AAA8B,AAACuP,AAAO/Q,AAAW6Q,AACnB,AAAA,AAACG;AAD/B,AAAA,AAAAxP;AAAA,AAAAA,AAASsP;AAAT,AAEE,AAAMI,AAA2B,AAAA,AAAA,AAAA,AAACpR,AAAOF;AACnCuR,AAA2B,AAAK,AAAA,AAAA,AAAA,AAACrR,AAAOF,AAAgCwR,AAAK,AAAA,AAAA,AAACC,AAAeC;AAC7FC,AAA2B,AAAA,AAAA,AAAA,AAAA,AAACzR,AAAOF;AACnC4R,AAA2B,AAAA,AAAA,AAAA,AAAC1R,AAAOF,AAA0B6R;AAHnER,AAIsD,AAAA,AAAA,AAAA,AAACnR,AAAOF;AAJ9DqR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnJ,AAAA,AAAAmJ,AAAA,AAAA,AAAA,AAAA,AAAAlJ,AAAAC,AAAAiJ,AAAAA;AAAA,AAAAvP,AAAAuP,AAAA,AAIOS;AAJP,AAAAhQ,AAAAuP,AAAA,AAI+BU;AACzBC,AAA2B,AAACC,AAAOC,AAAKP,AAAgBT;AACxDU,AAA2B,AAACO,AAAmBP,AAAYV;AAG3DkB,AAA2B,AAAA,AAAaR;AACxCS,AAA2B,AAAA,AAAA,AAAA,AAAA,AAACnS,AAAOF;AACnC4R,AAA2B,AAAA,AAAA,AAAC5P,AAAM4P;AAClCQ,AAA2B,AAAClG,AAAO,AAAKsE;AAAL,AACE,AAAMrQ,AAAM,AAAA,AAAA,AAAA,AAACD,AAAO,AAACuQ,AAAoBD;AAAzC,AACE,AAACvQ,AAAUsR,AAAiB,AAAClQ,AAAMlB;AAAUiS;AAMpFE,AAA2B,AAACC,AAAwB,AAAA,AAAA,AAAA,AAAA,AAACrS,AAAOF,AAAoCkR,AAAgB,AAAA,AAAA,AAAA,AAAChR,AAAOF;AACxHwS,AAA2B,AAAA,AAAA,AAAA,AAACtS,AAAOF,AAAwByS;AAC3DC,AAA2B,AAACC,AAA+BH,AAAUR,AAAWI;AAChFQ,AAA2B,AAACC,AAAKH;AAEjCI,AAA2B,AAACC,AAAKL;AACjCM,AAA2B,AAACC,AAAK,AAAKzC;AAAL,AACE,AAAM0C,AAAoB,AAAA,AAACC,AACK,AAACC,AACC,AAACC,AAAoB,AAAA,AAAK,AAAChS,AAAMmP,AAAQ,AAAA,AAAK,AAACuC,AAAKvC,AACtDwB;AAE1BsB,AAAoB,AAAA,AAAC3Q,AAAIuQ;AAEzBK,AAAoB,AAAClS,AAAM,AAAC8P,AAAOqC,AAAqBN;AACxDO,AAAoB,AAACpS,AAAM,AAAC8P,AAAOuC,AAAkBR;AACrDS,AAAoB,AAACtS,AAAM,AAAC8P,AAAOyC,AAAiBV;AACpDW,AAAoB,AAAA3P,AAAI,AAAC7C,AAAM,AAAC8P,AAAO2C,AAAkBZ;AAArC,AAAA,AAAAhP;AAAAA;;AACI,AAACqM,AAAkB2C;;;AAXjD,AAAA,AAAA,AAAA,AAAA,AAAA,AAYgC,AAACa,AAAmBT,AAAeO,AACnC,AAAA,AAAWF,AACX,AAAA,AAAWJ,AACX,AAAA,AAAWE;AAC7CrB;AAEjCA,AAA2B,AAACX,AAAI,AAAKjB,AAAMwD,AAAUC;AAArB,AAAA,AAAA,AAAA,AAAA,AAAqCzD,AACAwD,AACAC;AACrC7B,AAAYQ,AAAqBI;AAIjEkB,AAA2B,AAAAhQ,AAAI,AAAC/C,AAAIiR;AAAT,AAAA,AAAAlO;AAAAA;;AACI,AAACiN,AAAOgD,AAAiBjD;;;AACxDkD,AAA2B,AAACnC,AAAOC,AAAKG,AAAiBD;AACzDiC,AAA2B,AAAA,AAAClB,AAAQ,AAACmB,AAAUhD,AAA2B8C;AAC1EG,AAA2B,AAAC3D,AAAe,AAACvP,AAAMgT;AAClDG,AAA2B,AAAA,AAACrB,AAAQ,AAACC,AAAK,AAAA,AAAAqB,AAACC;AAAD,AAAa,AAAG,AAAA,AAAAD,AAAQF;AACxB,AAACrI,AAAO,AAAK7L;AAAL,AACE,AAAA6D,AAAI,AAAA,AAAA,AAAM6N,AAAa,AAAC4C,AAA+BtU;AAAvD,AAAA,AAAA6D;AAAAA;;AACI,AAAM4N;AAAN,AAAoB,AAAC8C,AAAgCvU;;AAArD;;;AAAiE2R;AA5D/H,AAAA,AAAA,AA6DiBhS,AACA,AAAA,AAAA,AAAA,AAACiD,AAA+BuR,AAChC,AAAA,AAAC7H,AAAe,AAAK0D;AAAL,AACE,AAAMwE,AAAc,AAAA,AAAsBxE;AACpCyE,AAAc,AAAA,AAAmBzE;AADvC,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACrO,AAAMqO,AACIgE,AACM,AAAA,AAAClB,AAAQ,AAAC1B,AAAI,AAACsD,AAAKnE,AAAeoE,AAAWX,AAClD,AAACpB,AAAKrC,AAAeyD,AACnBzC,AACFkB,AACQR,AAED,AAAA,AAAI,AAACnR,AAAIiR,AAAiB0C,AACvB,AAAA,AAAI,AAAC3T,AAAIiR,AAAiByC;AA3EtF,AA4Ea,AAAA,AAAA,AAAA,AAAA,AAAMX;;AA9ErB,AAAA,AAgFOlU;;;AAGX,AAAA,AAAA,AAACgK,AAEE,AAAA,AAAA,AAACrF,AACF,AAAAsQ,AAAkBrS;AAAlB,AAAA,AAAAsS,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhN,AAAA,AAAAgN,AAAA,AAAA,AAAA,AAAA,AAAA/M,AAAAC,AAAA8M,AAAAA;AAAA,AAAApT,AAAAoT,AAAA,AAAalV;AAAb,AACE,AAAAmV,AAAqB,AAAA,AAAmBnV;AAAxC,AAAA,AAAA,AAAAmV,AAAA;AAME,AAAM/E,AAAO,AAACzN,AAAI,AAAA,AAAY3C,AACZ,AAAA,AAAG,AAACwV,AAAM,AAAA,AAAYxV;AADxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAEa,AAAA,AAACgC,AAAMhC,AAAqBoQ,AACUA;;AATrD,AAAA+E,AAAUL;AAAV,AACE,AAAMM,AAAkB,AAAA,AAAYpV;AAC9BqV,AAAkB,AAACC,AAAwB,AAAKC;AAAL,AAAQ,AAAChV,AAAEuU,AAAWS;AAAIH;AACrEhF,AAAkB,AAACzN,AAAIyS,AAAU,AAAA,AAAKC;AAF5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAGa,AAAA,AAACrT,AAAMhC,AAAqBoQ,AACUA;;;AAMzD,AAAA,AAAA,AAACpG,AAEE,AAAA,AAAA,AAACrF,AACF,AAAA8Q,AAAkB7S;AAAlB,AAAA,AAAA8S,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxN,AAAA,AAAAwN,AAAA,AAAA,AAAA,AAAA,AAAAvN,AAAAC,AAAAsN,AAAAA;AAAA,AAAA5T,AAAA4T,AAAA,AAAa1V;AAAb,AACE,AAAAmV,AAAqB,AAAA,AAAmBnV;AAAxC,AAAA,AAAA,AAAAmV,AAAA;AAME,AAAM/E,AAAO,AAACG,AAAkB,AAAA,AAAYvQ;AAA5C,AAAA,AAAA,AAAA,AAAA,AAAA,AACa,AAAA,AAACgC,AAAMhC,AAAqBoQ,AACUA;;AARrD,AAAA+E,AAAUL;AAAV,AACE,AAAMM,AAAkB,AAAA,AAAYpV;AAC9BqV,AAAkB,AAACC,AAAwB,AAAKC;AAAL,AAAQ,AAAChV,AAAEuU,AAAWS;AAAIH;AACrEhF,AAAkB,AAACzN,AAAIyS,AAAU,AAAA,AAAKC;AAF5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAGa,AAAA,AAACrT,AAAMhC,AAAqBoQ,AACUA;;;AAKzD,AAAA,AAAA,AAACpG,AAEE,AAAA,AAAA,AAACrF,AACF,AAAAgR,AAAkB/S;AAAlB,AAAA,AAAAgT,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1N,AAAA,AAAA0N,AAAA,AAAA,AAAA,AAAA,AAAAzN,AAAAC,AAAAwN,AAAAA;AAAA,AAAA9T,AAAA8T,AAAA,AAAa5V;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AACa,AAAA,AAAA,AAAA,AAAA,AAACgC,AAAMhC,AAE+B,AAACuQ,AAAkB,AAAA,AAAYvQ;;AAEpF,AAAA,AAAA,AAACgK,AAEE,AAAA,AAAA,AAACrF,AACF,AAAAkR,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7N,AAAA,AAAA6N,AAAA,AAAA,AAAA,AAAA,AAAA5N,AAAAC,AAAA2N,AAAAA;AAAA,AAAAjU,AAAAiU,AAAA,AAAa/V;AAAbgW,AAAAF;AAAA,AAAAnT,AAAAqT,AAAA,AAAA,AAAmBpT;AAAnB,AAAAD,AAAAqT,AAAA,AAAA,AAAqB5F;AAArB,AAAA,AAAA,AAAA,AAAA,AAAA,AACa,AAAA,AAACpO,AAAMhC,AAAqBoQ,AACUA;;AAErD,AAAA,AAAA,AAAC5N,AAEE,AAAA,AAAA,AAACmC,AACF,AAAK0L,AAAOzN;AAAZ,AACE,AAAMqT,AAAiB,AAAA/R,AAAI,AAAA,AAACpC,AAAIuO;AAAT,AAAA,AAAAnM;AAAAA;;AACI,AAACqM,AAAkB,AAAA,AAACzO,AAAIuO;;;AAC7CsD,AAAqB,AAAA,AAAA,AAAA,AAACzT,AAAOmQ,AAAuB4F,AAC/B,AAACxF;AACtByF,AAAiB,AAACC,AAAoBxC;AACtCxT,AAAiB,AAAA,AAAA,AAAA,AAACD,AAAOyT;AAL/B,AAME,AAAC7L,AAAOmI,AAAmBiG;;AAE3B,AAAA,AAAClU,AAAMqO,AAAelQ;;AAE5B,AAAA,AAAA,AAACqC,AAEE,AAAA,AAAA,AAACmC,AACF,AAAK3E,AAAG4C;AAAR,AACE,AAAAuS,AAA0B,AAAA,AAASnV;AAAnC,AAAA,AAAA,AAAAmV,AAAA;AAGEnV;;AAHF,AAAAmV,AAAUiB;AAAV,AACE,AAAI,AAACC,AAAuBD;;AACxB,AAAA,AAACnU,AAAOjC;;;AAGlB,AAAA,AAACwC,AAEC,AAAKxC;AAAL,AACE,AAACsW;;AACD,AAAA,AAAA,AAACrU,AAAOjC;;AAIZ,AAAA,AAAA,AAACwC,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA4R,AAAK3T;AAAL,AAAA,AAAA4T,AAAAD;AAAA,AAAA5T,AAAA6T,AAAA,AAAA,AAAQ5T;AAAR,AAAAD,AAAA6T,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAEJ,AAAA,AAAA,AAACjU,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA+R,AAAK5J;AAAL,AAAA,AAAA6J,AAAAD;AAAA,AAAA/T,AAAAgU,AAAA,AAAA,AAAiB/T;AAAjB,AAAAD,AAAAgU,AAAA,AAAA,AAAmB7R;AAAnB,AAAAnC,AAAAgU,AAAA,AAAA,AAAsB5H;AAAtB,AACE,AAAA,AAAA,AAAC9L,AAAS6J,AAAYhI,AAAWiK;;AAErC,AAAA,AAAA,AAACvM,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAiS,AAAK9J;AAAL,AAAA,AAAA+J,AAAAD;AAAA,AAAAjU,AAAAkU,AAAA,AAAA,AAAiBjU;AAAjB,AAAAD,AAAAkU,AAAA,AAAA,AAAmB/R;AAAnB,AAAAnC,AAAAkU,AAAA,AAAA,AAAsB3H;AAAtB,AACE,AAAMH,AAAM,AAAA,AAAIG,AAEF,AAAA,AAAA,AAAChP,AAAO4M,AAAYhI;AAFlC,AAGMgI,AACA,AAAA,AAAA,AAAC7J,AAAU6B,AAAWoK,AAEtB,AAAA,AAAA,AAACjM,AAAU6B,AAAWiK;;AAEhC,AAAA,AAAA,AAACvM,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAmS,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAnU,AAAAoU,AAAA,AAAA,AAAanU;AAAb,AAAAD,AAAAoU,AAAA,AAAA,AAAejS;AAAf,AAAAnC,AAAAoU,AAAA,AAAA,AAAkBE;AAAlB,AACE,AAAA,AAAA,AAAChU,AAAS+T,AAAQlS,AAAUmS;;AAEhC,AAAA,AAAA,AAACzU,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAuS,AAAKtU;AAAL,AAAA,AAAAuU,AAAAD;AAAA,AAAAvU,AAAAwU,AAAA,AAAA,AAAQvU;AAAR,AAAAD,AAAAwU,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAIJ,AAAA,AAAA,AAAC5U,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA0S,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAA1U,AAAA2U,AAAA,AAAA,AAAiB1U;AAAjB,AAAAD,AAAA2U,AAAA,AAAA,AAAmBE;AAAnB,AAAA7U,AAAA2U,AAAA,AAAA,AAA8BvI;AAA9B,AACE,AAAC9L,AAASsU,AAAWC,AAAWzI;;AAEpC,AAAA,AAAA,AAACvM,AAEC,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA8S,AAAK7U;AAAL,AAAA,AAAA8U,AAAAD;AAAA,AAAA9U,AAAA+U,AAAA,AAAA,AAAQ9U;AAAR,AAAAD,AAAA+U,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAEH,AAAA,AAAA,AAACnV,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAiT,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAjV,AAAAkV,AAAA,AAAA,AAAWjV;AAAX,AAAAD,AAAAkV,AAAA,AAAA,AAAaE;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAACvV,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAqT,AAAKF;AAAL,AAAA,AAAAG,AAAAD;AAAA,AAAArV,AAAAsV,AAAA,AAAA,AAAWrV;AAAX,AAAAD,AAAAsV,AAAA,AAAA,AAAaF;AAAb,AACE,AAAI,AAACxX,AAAEuX,AAAKC;AAAZ;;AAEEA;;;AAEN,AAAA,AAAA,AAACvV,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAAuT,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAvV,AAAAwV,AAAA,AAAA,AAAsBvV;AAAtB,AAAAD,AAAAwV,AAAA,AAAA,AAAwBE;AAAxB,AACEA;;AAEJ,AAAA,AAAA,AAAC7V,AAEE,AAAA,AAAA,AAAA,AAACmC,AACF,AAAA2T,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAA3V,AAAA4V,AAAA,AAAA,AAAoB3V;AAApB,AAAAD,AAAA4V,AAAA,AAAA,AAAsBE;AAAtB,AACE,AAAI,AAAK,AAAA,AAAClY,AAAEiY,AAAwB,AAAA,AAACjY,AAAEkY;AAAvC;;AAEE,AAAI,AAAA,AAAClY,AAAEkY;AAAP;;AAAA;;;;AAIN,AAAA,AAAA,AAACjW,AAEE,AAAA,AAAA,AAACmC,AACF,AAAA+T,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAA/V,AAAAgW,AAAA,AAAA,AAAgB/V;AAAhB,AAAAD,AAAAgW,AAAA,AAAA,AAAkBE;AAAlB,AACE,AAAA,AAAC7W,AAAM4W,AAAqBC;;AAIhC,AAAA,AAAA,AAACrW,AAEE,AAAA,AAAA,AAACmC,AACF,AAAKmU,AAAOlW;AAAZ,AACE,AAAA,AAACX,AAAO6W;;AAIZ,AAAA,AAACtW,AAEC,AAAKxC,AAAG4C;AAAR,AACE,AAAA,AAAA,AAAA,AAACY,AAAUxD,AAAgCyD","names":["day8.re-frame-10x.events/fixed-after","f","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.__GT_interceptor","context","db","cljs.core/contains?","cljs.core.get_in","event","day8.re-frame-10x.events/log-trace?","trace","render-operation?","cljs.core._EQ_","component-name","clojure.string/includes?","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","p1__40767#","re-frame.trace/register-trace-cb","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","p__40769","vec__40770","seq__40771","cljs.core/seq","first__40772","cljs.core/first","cljs.core/next","day8.re-frame-10x.events/dissoc-in","m","k","ks","keys","temp__5733__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.events/read-string-maybe","s","e40775","cljs.tools.reader.edn.read_string","day8.re-frame-10x.utils.utils/default-readers","e","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","p__40776","vec__40777","cljs.core.nth","_","width%","day8.re-frame-10x.utils.localstorage/save!","x__4214__auto__","y__4215__auto__","cljs.core/assoc-in","p__40781","vec__40782","width","p__40788","vec__40789","selected-tab","cljs.core.update_in","cljs.core/not","p__40795","vec__40797","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__4126__auto__","p__40805","vec__40808","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","p1__40811#","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__40813","vec__40814","p__40818","vec__40819","event-str","old-event","p__40824","vec__40825","day8.re-frame-10x.events/filtered-view-trace-mw","p1__40829#","filtered-view-trace","p__40837","vec__40842","p__40847","vec__40853","ns-str","p__40862","vec__40863","day8.re-frame-10x.events/low-level-trace-mw","p1__40866#","p__40870","vec__40871","low-level","p__40876","vec__40878","trace-type","capture?","p__40881","vec__40882","debug?","p1__40885#","p__40886","vec__40887","follows-events?","day8.re-frame-10x.events/mount","popup-window","popup-document","app","resize-update-scheduled?","cljs.core.atom","handle-window-resize","cljs.core/deref","G__40890","reagent.impl.batching/next-tick","height","cljs.core/reset!","handle-window-position","pos","map__40891","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","left","top","screen-left","screen-top","cljs.core.not_EQ_","window-position-interval","unmount","G__40897","js/clearInterval","day8.re-frame-10x.styles/inject-trace-styles","goog.object/set","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.dom.render","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","js/setInterval","day8.re-frame-10x.view.container/devtools-inner","p__40898","map__40899","day8.re-frame-10x.events/open-debugger-window","dimensions","doc-title","js/document.title","new-window-title","goog.string/escapeString","new-window-html","w","js/window.open","d","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","ctx","p1__40912#","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/after","p__40913","vec__40914","dim","new-dim","p1__40917#","p__40918","vec__40919","map__40922","p1__40924#","p__40925","vec__40926","map__40929","js/window.addEventListener","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch-sync","p__40936","vec__40938","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__40948","vec__40949","p__40961","vec__40962","filter-input","filter-type","new-db","p1__40954#","cljs.core/some","p1__40955#","p1__40956#","cljs.core.remove","cljs.core.conj","clojure.string/lower-case","js/parseFloat","p__40968","vec__40969","filter-id","p1__40966#","trace-detail-expansions","cljs.core.update","p__40980","vec__40981","expansions","showing?","p1__40979#","p__40990","vec__40991","categories","new-categories","clojure.set/superset?","clojure.set.difference","clojure.set.union","p__40997","vec__40998","p1__41002#","p__41003","vec__41004","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","p1__41007#","paths","p__41011","vec__41012","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__41017","vec__41019","map__41022","valid-path?","cljs.core.pr_str","p__41028","vec__41029","open?","p__41032","vec__41033","diff?","p__41036","vec__41037","p__41040","vec__41041","p__41049","vec__41050","search-string","p__41053","vec__41054","p__41057","vec__41060","new-paths","cljs.core.disj","re-frame.interop/reagent-id","re-frame.db/app-db","p__41069","vec__41070","new-id","epochs","match-id","day8.re-frame-10x.utils.utils/last-in-vec","match","day8.re-frame-10x.metamorphic/matched-event","temp__5739__auto__","day8.re-frame-10x.metamorphic/app-db-after","day8.re-frame-10x.events/first-match-id","p__41137","p__41138","map__41139","vec__41140","new-traces","filtered-traces","cljs.core.filter","cljs.core.sort_by","map__41146","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce","cljs.core/conj","day8.re-frame-10x.metamorphic/parse-traces","new-matches","previous-matches","subscription-info","day8.re-frame-10x.metamorphic/subscription-info","sub-state","day8.re-frame-10x.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv","epoch-traces","cljs.core.into","cljs.core.comp","day8.re-frame-10x.utils.utils/id-between-xf","start-of-epoch","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.metamorphic/event-run?","finish-run","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","sub-match","t","quiescent?","day8.re-frame-10x.metamorphic/quiescent?","all-matches","retained-matches","cljs.core/take-last","first-id-to-retain","retained-traces","p1__41134#","cljs.core.drop_while","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","current-index","current-id","cljs.core.juxt","cljs.core/identity","p__41158","map__41159","temp__5737__auto__","match-ids","match-array-index","day8.re-frame-10x.utils.utils/find-index-in-vec","x","cljs.core/count","p__41161","map__41162","p__41164","map__41165","p__41167","p__41168","map__41169","vec__41170","current-epoch-id","app-db-before","day8.re-frame-10x.metamorphic/app-db-before","event-to-replay","re-frame.core/dispatch","re-frame.trace/reset-tracing!","p__41174","vec__41175","ignore?","p__41178","vec__41179","p__41183","vec__41184","p__41189","vec__41190","pinned","pinned?","p__41193","vec__41194","filter-value","p__41197","vec__41198","code-open?","open?-path","p__41202","vec__41203","execution-order?","p__41206","vec__41207","form","new-form","p__41210","vec__41211","p__41214","vec__41215","_show-all-code?","new-show-all-code?","p__41230","vec__41231","current-state","new-state","p__41234","vec__41235","component","new-direction","errors"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom :as rdom]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [reagent.impl.batching :as batching]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string]\n            [re-frame.db]\n            [re-frame.interop]\n            [re-frame.core]\n            [re-frame.trace]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-name    (get-in trace [:tags :component-name] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-name \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string {:readers utils/default-readers} s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/window-width\n  (fn [db [_ width]]\n    (assoc-in db [:settings :window-width] width)))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  ;; When programming here, we need to be careful about which document and window\n  ;; we are operating on, and keep in mind that the window can close without going\n  ;; through standard react lifecycle, so we hook the beforeunload event.\n  (let [app                      (.getElementById popup-document \"--re-frame-10x--\")\n        resize-update-scheduled? (atom false)\n        handle-window-resize     (fn [e]\n                                   (when-not @resize-update-scheduled?\n                                     (batching/next-tick\n                                       (fn []\n                                         (let [width  (.-innerWidth popup-window)\n                                               height (.-innerHeight popup-window)]\n                                           (rf/dispatch [:settings/external-window-resize {:width width :height height}]))\n                                         (reset! resize-update-scheduled? false)))\n                                     (reset! resize-update-scheduled? true)))\n        handle-window-position   (let [pos (atom {})]\n                                   (fn []\n                                     ;; Only update re-frame if the windows position has changed.\n                                     (let [{:keys [left top]} @pos\n                                           screen-left (.-screenX popup-window)\n                                           screen-top  (.-screenY popup-window)]\n                                       (when (or (not= left screen-left)\n                                                 (not= top screen-top))\n                                         (rf/dispatch [:settings/external-window-position {:left screen-left :top screen-top}])\n                                         (reset! pos {:left screen-left :top screen-top})))))\n        window-position-interval (atom nil)\n        unmount                  (fn [_]\n                                   (.removeEventListener popup-window \"resize\" handle-window-resize)\n                                   (some-> @window-position-interval js/clearInterval)\n                                   nil)]\n\n\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (rdom/render\n      [(r/create-class\n         {:display-name           \"devtools outer external\"\n          :component-did-mount    (fn []\n                                    (.addEventListener popup-window \"resize\" handle-window-resize)\n                                    (.addEventListener popup-window \"beforeunload\" unmount)\n                                    ;; Check the window position every 10 seconds\n                                    (reset! window-position-interval\n                                            (js/setInterval\n                                              handle-window-position\n                                              2000)))\n          :component-will-unmount unmount\n          :reagent-render         (fn [] [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left] :as dimensions}]\n  (let [doc-title        js/document.title\n        new-window-title (goog.string/escapeString (str \"re-frame-10x | \" doc-title))\n        new-window-html  (str \"<head><title>\"\n                              new-window-title\n                              \"</title></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")]\n    ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n    ;; control over this, it will only position it within the same display that it was popped out on.\n    (if-let [w (js/window.open \"about:blank\" \"re-frame-10x-popout\"\n                               (str \"width=\" width \",height=\" height \",left=\" left \",top=\" top\n                                    \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))]\n      (let [d (.-document w)]\n        ;; We had to comment out the following unmountComponentAtNode as it causes a React exception we assume\n        ;; because React says el is not a root container that it knows about.\n        ;; In theory by not freeing up the resources associated with this container (e.g. event handlers) we may be\n        ;; creating memory leaks. However with observation of the heap in developer tools we cannot see any significant\n        ;; unbounded growth in memory usage.\n        ;(when-let [el (.getElementById d \"--re-frame-10x--\")]\n        ;  (r/unmount-component-at-node el)))\n        (.open d)\n        (.write d new-window-html)\n        (goog.object/set w \"onload\" #(mount w d))\n        (.close d)\n        true)\n      false)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (if (open-debugger-window (get-in ctx [:db :settings :external-window-dimensions]))\n      (do\n        (localstorage/save! \"external-window?\" true)\n        {:db             (-> (:db ctx)\n                             (assoc-in [:settings :external-window?] true)\n                             (dissoc-in [:errors :popup-failed?]))\n         :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]})\n      {:db       (assoc-in (:db ctx) [:errors :popup-failed?] true)\n       :dispatch [:global/external-closed]})))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-db\n  :settings/external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ new-dim]]\n    new-dim))\n\n(rf/reg-event-db\n  :settings/external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {width :width height :height}]]\n    (assoc dim :width width :height height)))\n\n(rf/reg-event-db\n  :settings/external-window-position\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {left :left top :top}]]\n    (assoc dim :left left :top top)))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (utils/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  :epochs/receive-new-traces\n  (fn [{:keys [db]} [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? filtered-traces))\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all-traces] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [current-index (:current-epoch-index epochs)\n                                               current-id    (:current-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset current epoch to the head of the list if we got a new event in.\n                                             :current-epoch-id (if (seq new-matches) nil current-id)\n                                             :current-epoch-index (if (seq new-matches) nil current-index))))))\n         :dispatch (when quiescent? [:epochs/quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (utils/last-in-vec (:match-ids db))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/most-recent-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    {:db       (assoc db :current-epoch-index nil\n                         :current-epoch-id nil)\n     :dispatch [:snapshot/reset-current-epoch-app-db (utils/last-in-vec (:match-ids db))]}))\n\n(rf/reg-event-fx\n  :epochs/load-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} [_ new-id]]\n    {:db       (assoc db :current-epoch-id new-id)\n     :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))\n\n(rf/reg-event-db\n  :epochs/replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [current-epoch-id (or (get epochs :current-epoch-id)\n                               (utils/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id current-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  :epochs/quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n(rf/reg-event-db\n  :subs/set-pinned\n  [(rf/path [:subs :pinned])]\n  (fn [pinned [_ id pinned?]]\n    (assoc-in pinned [id :pin?] pinned?)))\n\n(rf/reg-event-db\n  :subs/set-filter\n  [(rf/path [:subs :filter-str])]\n  (fn [_ [_ filter-value]]\n    filter-value))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n :code/set-execution-order\n [(rf/path [:code :execution-order?])]\n (fn [_ [_ execution-order?]]\n   execution-order?))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/set-show-all-code?\n  [(rf/path [:code :show-all-code?])]\n  (fn [_show-all-code? [_ new-show-all-code?]]\n    new-show-all-code?))\n\n(rf/reg-event-db\n  :code/repl-msg-state\n  [(rf/path [:code :repl-msg-state])]\n  (fn [current-state [_ new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))\n\n;;\n\n(rf/reg-event-db\n  :component/set-direction\n  [(rf/path [:component])]\n  (fn [component [_ new-direction]]\n    (assoc component :direction new-direction)))\n\n;;\n\n(rf/reg-event-db\n  :errors/dismiss-popup-failed\n  [(rf/path [:errors])]\n  (fn [errors _]\n    (dissoc errors :popup-failed?)))\n\n;;\n\n(rf/reg-event-db\n  :history/toggle-history\n  (fn [db _]\n    (update-in db [:history :showing-history?] not)))\n"]}